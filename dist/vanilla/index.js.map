{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///index.js","webpack:///webpack/bootstrap 8532581930d141475160","webpack:///./node_modules/rxjs/_esm5/util/root.js","webpack:///./node_modules/rxjs/_esm5/util/isFunction.js","webpack:///./node_modules/rxjs/_esm5/util/isObject.js","webpack:///./node_modules/rxjs/_esm5/util/tryCatch.js","webpack:///./node_modules/rxjs/_esm5/Subscription.js","webpack:///./node_modules/rxjs/_esm5/util/toSubscriber.js","webpack:///./node_modules/rxjs/_esm5/util/noop.js","webpack:///./node_modules/rxjs/_esm5/util/pipe.js","webpack:///./node_modules/rxjs/_esm5/util/isScheduler.js","webpack:///./node_modules/rxjs/_esm5/util/isPromise.js","webpack:///./node_modules/rxjs/_esm5/util/subscribeToResult.js","webpack:///./node_modules/rxjs/_esm5/observable/combineLatest.js","webpack:///./node_modules/rxjs/_esm5/observable/FromEventObservable.js","webpack:///./node_modules/rxjs/_esm5/operators/mergeMap.js","webpack:///./node_modules/rxjs/_esm5/util/identity.js","webpack:///./node_modules/rxjs/_esm5/operators/mergeAll.js","webpack:///./node_modules/rxjs/_esm5/observable/merge.js","webpack:///./node_modules/rxjs/_esm5/operators/tap.js","webpack:///./node_modules/rxjs/_esm5/operators/filter.js","webpack:///./node_modules/rxjs/_esm5/operators/map.js","webpack:///./node_modules/rxjs/_esm5/operators/pairwise.js","webpack:///./node_modules/rxjs/_esm5/operators/repeatWhen.js","webpack:///./node_modules/rxjs/_esm5/operators/sample.js","webpack:///./node_modules/rxjs/_esm5/operators/refCount.js","webpack:///./node_modules/rxjs/_esm5/operators/multicast.js","webpack:///./node_modules/rxjs/_esm5/operators/share.js","webpack:///./node_modules/rxjs/_esm5/observable/PromiseObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/IteratorObservable.js","webpack:///./node_modules/rxjs/_esm5/operators/concatAll.js","webpack:///./node_modules/rxjs/_esm5/observable/concat.js","webpack:///./node_modules/rxjs/_esm5/operators/startWith.js","webpack:///./node_modules/rxjs/_esm5/operators/switchMap.js","webpack:///./node_modules/rxjs/_esm5/operators/take.js","webpack:///./node_modules/rxjs/_esm5/operators/takeUntil.js","webpack:///./node_modules/rxjs/_esm5/operators/timestamp.js","webpack:///./node_modules/rxjs/_esm5/operators/withLatestFrom.js","webpack:///./node_modules/rxjs-create-tween/esm/index.js","webpack:///./src/common.js","webpack:///./node_modules/rxjs/_esm5/operators/mapTo.js","webpack:///./node_modules/rxjs/_esm5/operators/skipWhile.js","webpack:///./node_modules/qd-set/esm/index.js","webpack:///./node_modules/hy-component/src/vanilla.js","webpack:///./node_modules/create-element-x/factory.js","webpack:///./node_modules/create-element-x/library.js","webpack:///./node_modules/hy-component/src/component.js","webpack:///./node_modules/rxjs/_esm5/util/isArray.js","webpack:///./node_modules/rxjs/_esm5/util/errorObject.js","webpack:///./node_modules/rxjs/_esm5/util/UnsubscriptionError.js","webpack:///./node_modules/rxjs/_esm5/Observer.js","webpack:///./node_modules/rxjs/_esm5/symbol/rxSubscriber.js","webpack:///./node_modules/rxjs/_esm5/Subscriber.js","webpack:///./node_modules/rxjs/_esm5/symbol/observable.js","webpack:///./node_modules/rxjs/_esm5/Observable.js","webpack:///./node_modules/rxjs/_esm5/util/ObjectUnsubscribedError.js","webpack:///./node_modules/rxjs/_esm5/SubjectSubscription.js","webpack:///./node_modules/rxjs/_esm5/Subject.js","webpack:///./node_modules/hy-component/src/rxjs.js","webpack:///./node_modules/attr-types/array.js","webpack:///./node_modules/attr-types/array-of.js","webpack:///./node_modules/attr-types/bool.js","webpack:///./node_modules/attr-types/number.js","webpack:///./node_modules/attr-types/one-of.js","webpack:///./node_modules/attr-types/regex.js","webpack:///./node_modules/attr-types/string.js","webpack:///./node_modules/rxjs/_esm5/observable/ScalarObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/EmptyObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/ArrayObservable.js","webpack:///./node_modules/rxjs/_esm5/OuterSubscriber.js","webpack:///./node_modules/rxjs/_esm5/util/isArrayLike.js","webpack:///./node_modules/rxjs/_esm5/symbol/iterator.js","webpack:///./node_modules/rxjs/_esm5/InnerSubscriber.js","webpack:///./node_modules/rxjs/_esm5/operators/combineLatest.js","webpack:///./node_modules/rxjs/_esm5/observable/DeferObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/defer.js","webpack:///./node_modules/rxjs/_esm5/observable/fromEvent.js","webpack:///./node_modules/rxjs/_esm5/observable/NeverObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/never.js","webpack:///./node_modules/rxjs/_esm5/observable/ConnectableObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/of.js","webpack:///./node_modules/rxjs/_esm5/observable/ArrayLikeObservable.js","webpack:///./node_modules/rxjs/_esm5/Notification.js","webpack:///./node_modules/rxjs/_esm5/operators/observeOn.js","webpack:///./node_modules/rxjs/_esm5/observable/FromObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/from.js","webpack:///./node_modules/rxjs/_esm5/util/ArgumentOutOfRangeError.js","webpack:///./node_modules/rxjs/_esm5/scheduler/Action.js","webpack:///./node_modules/rxjs/_esm5/scheduler/AsyncAction.js","webpack:///./node_modules/rxjs/_esm5/Scheduler.js","webpack:///./node_modules/rxjs/_esm5/scheduler/AsyncScheduler.js","webpack:///./node_modules/rxjs/_esm5/scheduler/async.js","webpack:///./src/mixin/operators.js","webpack:///./src/mixin/calc.js","webpack:///./src/mixin/constants.js","webpack:///./src/mixin/update.js","webpack:///./src/mixin/observables.js","webpack:///./src/mixin/setup.js","webpack:///./src/mixin/index.js","webpack:///./src/vanilla/index.js","webpack:///(webpack)/buildin/global.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","global","_root","__window","window","__self","WorkerGlobalScope","__global","_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","create","constructor","value","writable","setPrototypeOf","__proto__","component__classCallCheck","isFunction","x","isObject","_typeof","tryCatcher","tryCatchTarget","apply","arguments","e","errorObject","tryCatch","fn","flattenUnsubscriptionErrors","errors","reduce","errs","err","concat","UnsubscriptionError","toSubscriber","nextOrObserver","error","complete","Subscriber_Subscriber","rxSubscriber","empty","noop","pipeFromArray","fns","length","input","prev","rxjs__classCallCheck","rxjs__possibleConstructorReturn","rxjs__inherits","isScheduler","schedule","isPromise","subscribe","then","subscribeToResult","outerSubscriber","result","outerValue","outerIndex","destination","InnerSubscriber","closed","Observable_Observable","_isScalar","next","syncErrorThrowable","isArrayLike","len","setTimeout","iterator_iterator","iterator","item","done","observable_observable","obs","msg","combineLatest_combineLatest","observables","_i","project","scheduler","pop","isArray","ArrayObservable_ArrayObservable","lift","CombineLatestOperator","isNodeStyleEventEmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","FromEventObservable_toString","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","mergeMap","resultSelector","concurrent","Number","POSITIVE_INFINITY","source","MergeMapOperator","identity","mergeAll","merge","last","tap","DoOperator","filter","predicate","thisArg","FilterOperator","map","MapOperator","pairwise","PairwiseOperator","repeatWhen","notifier","RepeatWhenOperator","sample","sample_SampleOperator","refCount","RefCountOperator","multicast","subjectOrSubjectFactory","selector","subjectFactory","MulticastOperator","connectable","connectableObservableDescriptor","shareSubjectFactory","Subject_Subject","share","dispatchNext","arg","subscriber","dispatchError","getIterator","obj","IteratorObservable_StringIterator","undefined","IteratorObservable_ArrayIterator","toLength","isNaN","numberIsFinite","sign","Math","floor","abs","maxSafeInteger","isFinite","valueAsNumber","concatAll","from","of","startWith","array","ScalarObservable","EmptyObservable","switchMap","SwitchMapOperator","take","count","take_TakeOperator","takeUntil","TakeUntilOperator","timestamp","async_async","Timestamp","now","withLatestFrom","args","WithLatestFromOperator","createTween","easingFunction","b","observer","startTime","id","requestAnimationFrame","time","t","cancelAnimationFrame","easeOutSine","sin","PI","_toArray","arr","Array","calc__classCallCheck","calc__possibleConstructorReturn","calc__inherits","update__classCallCheck","update__possibleConstructorReturn","update__inherits","mapTo","MapToOperator","skipWhile","SkipWhileOperator","observables__classCallCheck","observables__possibleConstructorReturn","observables__inherits","setup__classCallCheck","setup__possibleConstructorReturn","setup__inherits","mixin__classCallCheck","mixin__possibleConstructorReturn","mixin__inherits","vanilla__classCallCheck","vanilla__possibleConstructorReturn","vanilla__inherits","_Set","Set","size","a","indexOf","has","add","push","delete","splice","clear","VanillaComponent","el","props","setupComponent","connectComponent","createCreateElement","createElement","createTextNode","appendChild","tagName","attributes","children","attr","setAttribute","copy","slice","forEach","document","bind","_createClass","defineProperties","target","descriptor","key","protoProps","staticProps","COMPONENT_FEATURE_TESTS","aSymbol","Symbol","sRoot","sState","process","env","Component","componentMixin","C","_C","_class","getPrototypeOf","state","defaults","assign","setupProperties","setupShadowDOM","eventName","data","componentName","event","CustomEvent","dispatchEvent","_this2","sideEffects","keys","sideEffect","setupProperty","_this3","set","oldValue","setInternalState","getRoot","getEl","__extends","__","_super","Error","toString","join","stack","message","Subscription__typeof","Subscription_Subscription","Subscription","unsubscribe","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","_a","index","remove","trial","sub","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","parent","for","Subscriber__typeof","Subscriber___extends","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","isStopped","Subscriber_SafeSubscriber","_next","_error","_complete","_unsubscribeAndRecycle","SafeSubscriber","_parentSubscriber","observerOrNext","context","_context","__tryOrSetError","__tryOrUnsub","_this","wrappedComplete","$$observable","observable","Observable","_subscribe","operator","sink","_trySubscribe","PromiseCtor","Rx","config","Promise","resolve","reject","pipe","operations","toPromise","ObjectUnsubscribedError___extends","ObjectUnsubscribedError","SubjectSubscription___extends","SubjectSubscription","subject","observers","subscriberIndex","Subject___extends","SubjectSubscriber","Subject","hasError","thrownError","Subject_AnonymousSubject","asObservable","AnonymousSubject","rxjs__createClass","_get","receiver","Function","desc","getOwnPropertyDescriptor","rxjs_rxjsMixin","opts","subjects","disconnect","adapt","types","array_array","trim","replace","split","stringify","array_of_arrayOf","type","f","r","a2","bool","attr2","number","oneOf","alts","regex","match","RegExp","string","ScalarObservable___extends","dispatch","EmptyObservable___extends","ArrayObservable___extends","ArrayObservable","OuterSubscriber___extends","OuterSubscriber","notifyNext","innerValue","innerIndex","innerSub","notifyError","notifyComplete","Set_1","Map_1","Map","getOwnPropertyNames","InnerSubscriber___extends","combineLatest___extends","none","combineLatest_CombineLatestSubscriber","CombineLatestSubscriber","active","values","toRespond","unused","oldVal","_tryProject","DeferObservable___extends","DeferObservable","observableFactory","DeferObservable_DeferSubscriber","DeferSubscriber","tryDefer","_callFactory","defer","FromEventObservable___extends","FromEventObservable_FromEventObservable","FromEventObservable","options","setupSubscription","handler","source_1","source_2","source_3","fromEvent","mergeMap___extends","mergeMap_MergeMapSubscriber","MergeMapSubscriber","hasCompleted","buffer","_tryNext","_innerSub","ish","_notifyResultSelector","shift","NeverObservable___extends","NeverObservable_NeverObservable","NeverObservable","never","tap___extends","tap_DoSubscriber","DoSubscriber","safeSubscriber","filter___extends","FilterSubscriber","map___extends","MapSubscriber","pairwise___extends","PairwiseSubscriber","hasPrev","repeatWhen___extends","repeatWhen_RepeatWhenSubscriber","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","retriesSubscription","subscribeToRetries","notifications","sample___extends","SampleOperator","sampleSubscriber","SampleSubscriber","hasValue","emitValue","refCount___extends","_refCount","refCounter","RefCountSubscriber","connection","connect","sharedConnection","_connection","ConnectableObservable___extends","ConnectableObservable_ConnectableObservable","ConnectableObservable","_isComplete","getSubject","_subject","ConnectableSubscriber","connectableProto","PromiseObservable___extends","PromiseObservable_PromiseObservable","PromiseObservable","promise","IteratorObservable___extends","IteratorObservable","return","StringIterator","str","idx","charAt","ArrayIterator","pow","ArrayLikeObservable___extends","ArrayLikeObservable_ArrayLikeObservable","ArrayLikeObservable","arrayLike","Notification_Notification","Notification","kind","observe","do","accept","toObservable","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","observeOn___extends","observeOn_ObserveOnSubscriber","ObserveOnSubscriber","delay","notification","scheduleMessage","ObserveOnMessage","FromObservable__typeof","FromObservable___extends","FromObservable_FromObservable","FromObservable","switchMap___extends","switchMap_SwitchMapSubscriber","SwitchMapSubscriber","innerSubscription","_tryNotifyNext","ArgumentOutOfRangeError___extends","ArgumentOutOfRangeError","take___extends","TakeOperator","total","TakeSubscriber","takeUntil___extends","takeUntil_TakeUntilSubscriber","TakeUntilSubscriber","Action___extends","Action","work","AsyncAction___extends","AsyncAction_AsyncAction","AsyncAction","pending","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","Scheduler","SchedulerAction","Date","AsyncScheduler___extends","AsyncScheduler","scheduled","action","withLatestFrom___extends","withLatestFrom_WithLatestFromSubscriber","WithLatestFromSubscriber","found","_slicedToArray","sliceIterator","_arr","_n","_d","_e","_s","operators_subscribeWhen","p$","operators_filterWhen","_len","others","_key","_ref","_ref3","_ref5","every","_ref7","calc__slicedToArray","calc__createClass","min","max","calc_calcMixin","clientX","opened","align","range","innerWidth","_ref2","endX","startX","translateX","drawerWidth","_ref4","velocity","startTranslateX","deltaX","parseFloat","getComputedStyle","contentEl","update__createClass","updateMixin","style","willChange","scrimEl","classList","fireEvent","pointerEvents","detail","inv","opacity","transform","mapTo___extends","MapToSubscriber","skipWhile___extends","SkipWhileSubscriber","skipping","tryCallPredicate","Boolean","observables__slicedToArray","observables__createClass","observables_baseObservablesMixin","mouseEvents","doc","touchstart$","passive","touches","start$","end$","preventDefault","_ref6","touchmove$","_ref8","touchend$","_ref9","changedTouches","move$","threshold","_ref10","_ref11","_ref11$","clientY","_ref11$2","startY","_ref12","_ref13","_ref13$","_ref13$2","_ref14","_ref15","_ref15$","_ref15$2","isSliding","setup__slicedToArray","setup__createClass","setup_setupObservablesMixin","_baseObservablesMixin","calcMovableDrawerWidth","active$","persistent","ref","getStartObservable","isScrimVisible$","translateX$","isInRange$","isScrimVisible","calcIsInRange","inRange","prepareInteraction","getEndObservable","getMoveObservable","isSliding$","getIsSlidingObservable","startTranslateX$","calcTranslateX","tween$","cleanupInteraction","velocity$","prevTime","prevX","willOpen$","calcIsSwipe","calcWillOpen","willOpen","tweenTrigger$","animateTo$","updateDOM","close","display","oldAlign","_ref16","_ref17","mixin__createClass","mixin__get","MIXIN_FEATURE_TESTS","arr2","VANILLA_FEATURE_TESTS","vanilla_HyDrawer","vanilla__createClass","_drawerMixin","HyDrawer","df","DocumentFragment","class","_setupObservablesMixi","sroot","querySelector","setupObservables","g","eval"],"mappings":"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","file":"index.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"hyDrawer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hyDrawer\"] = factory();\n\telse\n\t\troot[\"hyDrawer\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","/*!\n * Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"hyDrawer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hyDrawer\"] = factory();\n\telse\n\t\troot[\"hyDrawer\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return _root; });\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n/*@__PURE__*/(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n\n//# sourceMappingURL=root.js.map\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(2)))\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./node_modules/qd-set/esm/index.js\nvar _Set = typeof Set !== 'undefined' && new Set([1]).size === 1 ? Set : function () {\n  var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  a = a.filter(function (x, i) {\n    return i === a.indexOf(x);\n  });\n  a.size = a.length;\n  a.has = function (x) {\n    return a.indexOf(x) > -1;\n  };\n  a.add = function (x) {\n    if (!a.has(x)) {\n      a.size++;a.push(x);\n    }return a;\n  };\n  a.delete = function (x) {\n    var t = void 0;if (t = a.has(x)) {\n      a.size--;a.splice(a.indexOf(x), 1);\n    }return t;\n  };\n  a.clear = function () {\n    while (a.pop()) {}a.size = 0;\n  };\n  return a;\n};\n\n\n// CONCATENATED MODULE: ./node_modules/hy-component/src/vanilla.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// # src / vanilla.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n\n\n\n\nvar VanillaComponent = function VanillaComponent(el, props) {\n  _classCallCheck(this, VanillaComponent);\n\n  this.setupComponent(el, props);\n  this.connectComponent();\n};\n// CONCATENATED MODULE: ./node_modules/create-element-x/factory.js\nvar createCreateElement = function createCreateElement(createElement, createTextNode) {\n  function appendChild(c) {\n    if (typeof c === 'string') this.appendChild(createTextNode(c));else this.appendChild(c);\n  }\n\n  return function (tagName, attributes, children) {\n    var el = createElement(tagName);\n\n    for (var attr in attributes) {\n      el.setAttribute(attr, attributes[attr]);\n    }if (children) {\n      if (typeof children === 'string') {\n        el.appendChild(createTextNode(children));\n      } else if (children.length) {\n        var copy = Array.prototype.slice.call(children, 0);\n        Array.prototype.forEach.call(copy, appendChild, el);\n      } else {\n        el.appendChild(children);\n      }\n    }\n\n    return el;\n  };\n};\n\n/* harmony default export */ var factory = (createCreateElement);\n// CONCATENATED MODULE: ./node_modules/create-element-x/library.js\n\n\nvar createElement = createCreateElement(document.createElement.bind(document), document.createTextNode.bind(document));\n/* harmony default export */ var library = (createElement);\n// CONCATENATED MODULE: ./node_modules/hy-component/src/component.js\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction component__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// # src / component.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n// import 'core-js/fn/array/for-each';\n// import 'core-js/fn/object/assign';\n// import 'core-js/fn/object/define-property';\n// import 'core-js/fn/object/keys';\n\n\n\n\n\nvar COMPONENT_FEATURE_TESTS = new _Set([\"customevent\"]);\n\nvar aSymbol = Symbol || function (x) {\n  return \"_\" + x;\n};\nvar sRoot = aSymbol(\"sroot\");\nvar sState = aSymbol(\"state\");\n\nwindow.process = window.process || {};\nwindow.process.env = window.process.env || {};\n\nvar Component = function Component() {\n  component__classCallCheck(this, Component);\n};\n\nvar componentMixin = function componentMixin() {\n  var C = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Component;\n  return function (_C) {\n    _inherits(_class, _C);\n\n    function _class() {\n      component__classCallCheck(this, _class);\n\n      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    _createClass(_class, [{\n      key: \"setupComponent\",\n      value: function setupComponent(el, state) {\n        var defaults = this.constructor.defaults;\n\n\n        if (false) {\n          var _constructor = this.constructor,\n              componentName = _constructor.componentName,\n              sideEffects = _constructor.sideEffects;\n\n          if (!componentName) {\n            console.warn(\"Component needs to have a name, e.g. `my-tag`. To set a name, provide a static getter called `componentName`.\");\n          }\n          if (!defaults) {\n            console.warn(\"No default properties provided. Implement a static getter called `defaults`.\");\n          }\n          if (!sideEffects) {\n            console.warn(\"No side effects provided. Implement a static getter called `sideEffects`.\");\n          }\n        }\n\n        this[sState] = Object.assign({}, defaults, state);\n        this.setupProperties(this);\n        this[sRoot] = this.setupShadowDOM(el);\n      }\n    }, {\n      key: \"setupShadowDOM\",\n      value: function setupShadowDOM(el) {\n        return el;\n      }\n    }, {\n      key: \"connectComponent\",\n      value: function connectComponent() {}\n    }, {\n      key: \"disconnectComponent\",\n      value: function disconnectComponent() {}\n    }, {\n      key: \"adoptComponent\",\n      value: function adoptComponent() {}\n    }, {\n      key: \"getRoot\",\n      value: function getRoot() {\n        return this[sRoot];\n      }\n    }, {\n      key: \"getEl\",\n      value: function getEl() {\n        return this[sRoot];\n      }\n    }, {\n      key: \"fireEvent\",\n      value: function fireEvent(eventName, data) {\n        var componentName = this.constructor.componentName;\n\n        var event = new CustomEvent(componentName + \"-\" + eventName, data);\n        this.el.dispatchEvent(event);\n      }\n    }, {\n      key: \"setInternalState\",\n      value: function setInternalState(key, value) {\n        this[sState][key] = value;\n      }\n    }, {\n      key: \"setupProperties\",\n      value: function setupProperties() {\n        var _this2 = this;\n\n        var sideEffects = this.constructor.sideEffects;\n\n\n        Object.keys(this[sState]).forEach(function (key) {\n          var sideEffect = sideEffects[key];\n          _this2.setupProperty(key, sideEffect);\n        });\n      }\n    }, {\n      key: \"setupProperty\",\n      value: function setupProperty(key, sideEffect) {\n        var _this3 = this;\n\n        Object.defineProperty(this, key, {\n          get: function get() {\n            return _this3[sState][key];\n          },\n          set: function set(value) {\n            var oldValue = _this3[sState][key];\n            _this3.setInternalState(key, value);\n            if (sideEffect) sideEffect.call(_this3, value, oldValue);\n          },\n          enumerable: true,\n          configurable: true\n        });\n      }\n    }, {\n      key: \"sroot\",\n      get: function get() {\n        return this.getRoot();\n      }\n    }, {\n      key: \"el\",\n      get: function get() {\n        return this.getEl();\n      }\n    }]);\n\n    return _class;\n  }(C);\n};\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/util/root.js\nvar root = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/isFunction.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/isArray.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar isArray = Array.isArray || function (x) {\n  return x && typeof x.length === 'number';\n};\n//# sourceMappingURL=isArray.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/isObject.js\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction isObject(x) {\n    return x != null && (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object';\n}\n//# sourceMappingURL=isObject.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/errorObject.js\n// typeof any so that it we don't have to cast when comparing a result to the error object\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/tryCatch.js\n/** PURE_IMPORTS_START ._errorObject PURE_IMPORTS_END */\n\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    } catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n;\n//# sourceMappingURL=tryCatch.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/UnsubscriptionError.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ? errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) {\n            return i + 1 + \") \" + err.toString();\n        }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error);\n//# sourceMappingURL=UnsubscriptionError.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Subscription.js\nvar Subscription__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/** PURE_IMPORTS_START ._util_isArray,._util_isObject,._util_isFunction,._util_tryCatch,._util_errorObject,._util_UnsubscriptionError PURE_IMPORTS_END */\n\n\n\n\n\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription_Subscription = /*@__PURE__*/ /*@__PURE__*/function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this,\n            _parent = _a._parent,\n            _parents = _a._parents,\n            _unsubscribe = _a._unsubscribe,\n            _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            var trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        } else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || teardown === Subscription.EMPTY) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown === 'undefined' ? 'undefined' : Subscription__typeof(teardown)) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                } else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                        var tmp = subscription;\n                        subscription = new Subscription();\n                        subscription._subscriptions = [tmp];\n                    }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this,\n            _parent = _a._parent,\n            _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        } else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        } else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription());\n    return Subscription;\n}();\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) {\n        return errs.concat(err instanceof UnsubscriptionError ? err.errors : err);\n    }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Observer.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar empty = {\n    closed: true,\n    next: function next(value) {},\n    error: function error(err) {\n        throw err;\n    },\n    complete: function complete() {}\n};\n//# sourceMappingURL=Observer.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/symbol/rxSubscriber.js\n/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\n\nvar _Symbol = root[\"a\" /* root */].Symbol;\nvar rxSubscriber = typeof _Symbol === 'function' && typeof _Symbol.for === 'function' ?\n/*@__PURE__*/_Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nvar $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Subscriber.js\nvar Subscriber__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/** PURE_IMPORTS_START ._util_isFunction,._Subscription,._Observer,._symbol_rxSubscriber PURE_IMPORTS_END */\nvar Subscriber___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber_Subscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    Subscriber___extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = empty;\n                    break;\n                }\n                if ((typeof destinationOrNext === 'undefined' ? 'undefined' : Subscriber__typeof(destinationOrNext)) === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n                        this.destination = destinationOrNext;\n                        this.destination.add(this);\n                    } else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new Subscriber_SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new Subscriber_SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber] = function () {\n        return this;\n    };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this,\n            _parent = _a._parent,\n            _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_Subscription);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar Subscriber_SafeSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    Subscriber___extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        } else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                } else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            } else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            } else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function wrappedComplete() {\n                    return _this._complete.call(_this._context);\n                };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                } else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            } else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        } catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        } catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=Subscriber.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/toSubscriber.js\n/** PURE_IMPORTS_START .._Subscriber,.._symbol_rxSubscriber,.._Observer PURE_IMPORTS_END */\n\n\n\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber]) {\n            return nextOrObserver[rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_Subscriber(empty);\n    }\n    return new Subscriber_Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/symbol/observable.js\n/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\n\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var _Symbol = context.Symbol;\n    if (typeof _Symbol === 'function') {\n        if (_Symbol.observable) {\n            $$observable = _Symbol.observable;\n        } else {\n            $$observable = _Symbol('observable');\n            _Symbol.observable = $$observable;\n        }\n    } else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nvar observable_observable = /*@__PURE__*/getSymbolObservable(root[\"a\" /* root */]);\n/**\n * @deprecated use observable instead\n */\nvar $$observable = observable_observable;\n//# sourceMappingURL=observable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/noop.js\n/* tslint:disable:no-empty */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction noop() {}\n//# sourceMappingURL=noop.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/pipe.js\n/** PURE_IMPORTS_START ._noop PURE_IMPORTS_END */\n\n/* tslint:enable:max-line-length */\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\n/* @internal */\nfunction pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) {\n            return fn(prev);\n        }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Observable.js\n/** PURE_IMPORTS_START ._util_root,._util_toSubscriber,._symbol_observable,._util_pipe PURE_IMPORTS_END */\n\n\n\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable_Observable = /*@__PURE__*/ /*@__PURE__*/function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        } else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        } catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root[\"a\" /* root */].Rx && root[\"a\" /* root */].Rx.config && root[\"a\" /* root */].Rx.config.Promise) {\n                PromiseCtor = root[\"a\" /* root */].Rx.config.Promise;\n            } else if (root[\"a\" /* root */].Promise) {\n                PromiseCtor = root[\"a\" /* root */].Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    } catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                } else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root[\"a\" /* root */].Rx && root[\"a\" /* root */].Rx.config && root[\"a\" /* root */].Rx.config.Promise) {\n                PromiseCtor = root[\"a\" /* root */].Rx.config.Promise;\n            } else if (root[\"a\" /* root */].Promise) {\n                PromiseCtor = root[\"a\" /* root */].Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) {\n                return value = x;\n            }, function (err) {\n                return reject(err);\n            }, function () {\n                return resolve(value);\n            });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}();\n//# sourceMappingURL=Observable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/ObjectUnsubscribedError.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar ObjectUnsubscribedError___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ObjectUnsubscribedError___extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error);\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/SubjectSubscription.js\n/** PURE_IMPORTS_START ._Subscription PURE_IMPORTS_END */\nvar SubjectSubscription___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    SubjectSubscription___extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_Subscription);\n//# sourceMappingURL=SubjectSubscription.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Subject.js\n/** PURE_IMPORTS_START ._Observable,._Subscriber,._Subscription,._util_ObjectUnsubscribedError,._SubjectSubscription,._symbol_rxSubscriber PURE_IMPORTS_END */\nvar Subject___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n\n\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    Subject___extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber_Subscriber);\n/**\n * @class Subject<T>\n */\nvar Subject_Subject = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    Subject___extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new Subject_AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        } else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        } else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_Subscription.EMPTY;\n        } else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_Subscription.EMPTY;\n        } else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new Subject_AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_Observable);\n/**\n * @class AnonymousSubject<T>\n */\nvar Subject_AnonymousSubject = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    Subject___extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        } else {\n            return Subscription_Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject_Subject);\n//# sourceMappingURL=Subject.js.map\n// CONCATENATED MODULE: ./node_modules/hy-component/src/rxjs.js\nvar rxjs__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction rxjs__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction rxjs__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction rxjs__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// # src / rxjs.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n\n\nvar rxjs_rxjsMixin = function rxjsMixin(C) {\n  return function (_C) {\n    rxjs__inherits(_class, _C);\n\n    function _class() {\n      rxjs__classCallCheck(this, _class);\n\n      return rxjs__possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    rxjs__createClass(_class, [{\n      key: \"setupComponent\",\n      value: function setupComponent(el, opts) {\n        var _this2 = this;\n\n        this.subjects = {};\n        var sideEffects = {};\n\n        this.subjects.disconnect = new Subject_Subject();\n        this.subjects.adapt = new Subject_Subject();\n\n        var types = this.constructor.types;\n\n        Object.keys(types).map(function (key) {\n          _this2.subjects[key] = new Subject_Subject();\n          sideEffects[key] = function (x) {\n            return _this2.subjects[key].next(x);\n          };\n        });\n\n        Object.defineProperty(this.constructor, \"sideEffects\", {\n          get: function get() {\n            return sideEffects;\n          },\n          set: function set() {},\n          enumerable: true,\n          configurable: true\n        });\n\n        _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"setupComponent\", this).call(this, el, opts);\n      }\n    }, {\n      key: \"connectComponent\",\n      value: function connectComponent() {\n        var _this3 = this;\n\n        _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"connectComponent\", this).call(this);\n\n        this.subjects.adapt.next(document); // TODO: should rename to document?\n\n        var types = this.constructor.types;\n\n        Object.keys(types).map(function (key) {\n          _this3.subjects[key].next(_this3[key]);\n        });\n      }\n    }, {\n      key: \"disconnectComponent\",\n      value: function disconnectComponent() {\n        this.subjects.disconnect.next({});\n        _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"disconnectComponent\", this).call(this);\n      }\n    }, {\n      key: \"adaptComponent\",\n      value: function adaptComponent() {\n        this.subjects.adapt.next(document);\n        _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"adaptComponent\", this).call(this);\n      }\n    }], [{\n      key: \"sideEffects\",\n      get: function get() {}\n    }]);\n\n    return _class;\n  }(C);\n};\n// CONCATENATED MODULE: ./node_modules/attr-types/array.js\nvar array_array = function array(attr) {\n  if (attr == null) return null;\n\n  var str = attr.trim().replace(/^\\[?(.*?)\\]?$/, '$1').split(',').map(function (x) {\n    return x.trim();\n  });\n\n  return str || null;\n};\n\narray_array.stringify = function (a) {\n  return a && a.length > 0 ? a.join(',') : null;\n};\n\n/* harmony default export */ var attr_types_array = (array_array);\n// CONCATENATED MODULE: ./node_modules/attr-types/array-of.js\n\n\nvar array_of_arrayOf = function arrayOf(type) {\n  var f = function f(attr) {\n    if (attr == null) return null;\n    var a = array_array(attr).map(type);\n    if (a.reduce(function (r, x) {\n      return r && x !== null;\n    }, true)) {\n      return a;\n    }\n    return null;\n  };\n\n  f.stringify = function (a) {\n    var a2 = a && a.map && a.map(type.stringify);\n    if (a2 && a2.reduce(function (r, x) {\n      return r && x !== null;\n    }, true)) {\n      return array_array.stringify(a2);\n    }\n    return null;\n  };\n\n  return f;\n};\n\n/* harmony default export */ var array_of = (array_of_arrayOf);\n// CONCATENATED MODULE: ./node_modules/attr-types/bool.js\nvar bool = function bool(attr) {\n  if (attr == null) return false;\n  var attr2 = attr.trim && attr.trim() || attr;\n  return !(attr2 === 'false' || attr2 === 'null' || attr2 === 'undefined' || attr2 === '0' || attr2 === false);\n};\n\nbool.stringify = function (b) {\n  return b ? '' : null;\n};\n\n/* harmony default export */ var attr_types_bool = (bool);\n// CONCATENATED MODULE: ./node_modules/attr-types/number.js\nvar number = function number(attr) {\n  if (attr == null) return null;\n  return Number(attr);\n};\n\nnumber.stringify = function (n) {\n  if (n == null) return null;\n  return \"\" + n;\n};\n\n/* harmony default export */ var attr_types_number = (number);\n// CONCATENATED MODULE: ./node_modules/attr-types/one-of.js\nvar oneOf = function oneOf(alts) {\n  var f = function f(attr) {\n    if (attr == null) return null;\n\n    var i = alts.indexOf(attr);\n    if (false) {\n      console.warn('\\'' + attr + '\\' is not \\'oneOf\\': ' + alts.join(', '));\n    }\n\n    return i > -1 ? alts[i] : null;\n  };\n\n  f.stringify = function (o) {\n    return alts.indexOf(o) !== -1 ? o : null;\n  };\n\n  return f;\n};\n\n/* harmony default export */ var one_of = (oneOf);\n// CONCATENATED MODULE: ./node_modules/attr-types/regex.js\nvar regex = function regex(attr) {\n  if (attr == null) return null;\n  var attr2 = attr.trim && attr.trim() || attr;\n  var match = attr2.match(/^\\/?(.*?)(\\/([gimy]*))?$/);\n  return new RegExp(match[1], match[3]);\n};\n\nregex.stringify = function (r) {\n  return r && r.toString() || null;\n};\n\n/* harmony default export */ var attr_types_regex = (regex);\n// CONCATENATED MODULE: ./node_modules/attr-types/string.js\nvar string = function string(attr) {\n  return attr;\n};\n\nstring.stringify = function (s) {\n  return s;\n};\n\n/* harmony default export */ var attr_types_string = (string);\n// CONCATENATED MODULE: ./node_modules/attr-types/index.js\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var attr_types = ({\n  array: array_array, arrayOf: array_of_arrayOf, bool: bool, number: number, oneOf: oneOf, regex: regex, string: string\n});\n// CONCATENATED MODULE: ./node_modules/hy-component/src/types.js\n\n\n\n/* harmony default export */ var src_types = ({\n  array: array_array,\n  arrayOf: array_of_arrayOf,\n  bool: bool,\n  number: number,\n  oneOf: oneOf,\n  regex: regex,\n  string: string\n});\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/isScheduler.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/ScalarObservable.js\n/** PURE_IMPORTS_START .._Observable PURE_IMPORTS_END */\nvar ScalarObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ScalarObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ScalarObservable___extends(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        _super.call(this);\n        this.value = value;\n        this.scheduler = scheduler;\n        this._isScalar = true;\n        if (scheduler) {\n            this._isScalar = false;\n        }\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done,\n            value = state.value,\n            subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        } else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable_Observable);\n//# sourceMappingURL=ScalarObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/EmptyObservable.js\n/** PURE_IMPORTS_START .._Observable PURE_IMPORTS_END */\nvar EmptyObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar EmptyObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    EmptyObservable___extends(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following to the console:\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\n     * // x will occur every 1000ms\n     * // if x % 2 is equal to 1 print abc\n     * // if x % 2 is not equal to 1 nothing will be output\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        } else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable_Observable);\n//# sourceMappingURL=EmptyObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/ArrayObservable.js\n/** PURE_IMPORTS_START .._Observable,._ScalarObservable,._EmptyObservable,.._util_isScheduler PURE_IMPORTS_END */\nvar ArrayObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayObservable_ArrayObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ArrayObservable___extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler(scheduler)) {\n            array.pop();\n        } else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        } else if (len === 1) {\n            return new ScalarObservable(array[0], scheduler);\n        } else {\n            return new EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array,\n            index = state.index,\n            count = state.count,\n            subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        } else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable_Observable);\n//# sourceMappingURL=ArrayObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/OuterSubscriber.js\n/** PURE_IMPORTS_START ._Subscriber PURE_IMPORTS_END */\nvar OuterSubscriber___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    OuterSubscriber___extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=OuterSubscriber.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/isArrayLike.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar isArrayLike = function isArrayLike(x) {\n  return x && typeof x.length === 'number';\n};\n//# sourceMappingURL=isArrayLike.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/isPromise.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/symbol/iterator.js\n/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\n\nfunction symbolIteratorPonyfill(root) {\n    var _Symbol = root.Symbol;\n    if (typeof _Symbol === 'function') {\n        if (!_Symbol.iterator) {\n            _Symbol.iterator = _Symbol('iterator polyfill');\n        }\n        return _Symbol.iterator;\n    } else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nvar iterator_iterator = /*@__PURE__*/symbolIteratorPonyfill(root[\"a\" /* root */]);\n/**\n * @deprecated use iterator instead\n */\nvar $$iterator = iterator_iterator;\n//# sourceMappingURL=iterator.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/InnerSubscriber.js\n/** PURE_IMPORTS_START ._Subscriber PURE_IMPORTS_END */\nvar InnerSubscriber___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    InnerSubscriber___extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=InnerSubscriber.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/subscribeToResult.js\n/** PURE_IMPORTS_START ._root,._isArrayLike,._isPromise,._isObject,.._Observable,.._symbol_iterator,.._InnerSubscriber,.._symbol_observable PURE_IMPORTS_END */\n\n\n\n\n\n\n\n\nfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable_Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        } else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    } else if (isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    } else if (isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) {\n            return destination.error(err);\n        }).then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root[\"a\" /* root */].setTimeout(function () {\n                throw err;\n            });\n        });\n        return destination;\n    } else if (result && typeof result[iterator_iterator] === 'function') {\n        var iterator = result[iterator_iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    } else if (result && typeof result[observable_observable] === 'function') {\n        var obs = result[observable_observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        } else {\n            return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    } else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = \"You provided \" + value + \" where a stream was expected.\" + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\n//# sourceMappingURL=subscribeToResult.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/combineLatest.js\n/** PURE_IMPORTS_START .._observable_ArrayObservable,.._util_isArray,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar combineLatest___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\nvar none = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) {\n        return source.lift.call(new ArrayObservable_ArrayObservable([source].concat(observables)), new CombineLatestOperator(project));\n    };\n}\nvar CombineLatestOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new combineLatest_CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar combineLatest_CombineLatestSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    combineLatest___extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        _super.call(this, destination);\n        this.project = project;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(none);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        } else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond ? 0 : oldVal === none ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            } else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=combineLatest.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/combineLatest.js\n/** PURE_IMPORTS_START .._util_isScheduler,.._util_isArray,._ArrayObservable,.._operators_combineLatest PURE_IMPORTS_END */\n\n\n\n\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nfunction combineLatest_combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    var scheduler = null;\n    if (isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return new ArrayObservable_ArrayObservable(observables, scheduler).lift(new CombineLatestOperator(project));\n}\n//# sourceMappingURL=combineLatest.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/DeferObservable.js\n/** PURE_IMPORTS_START .._Observable,.._util_subscribeToResult,.._OuterSubscriber PURE_IMPORTS_END */\nvar DeferObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar DeferObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    DeferObservable___extends(DeferObservable, _super);\n    function DeferObservable(observableFactory) {\n        _super.call(this);\n        this.observableFactory = observableFactory;\n    }\n    /**\n     * Creates an Observable that, on subscribe, calls an Observable factory to\n     * make an Observable for each new Observer.\n     *\n     * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n     * is subscribed.\n     * </span>\n     *\n     * <img src=\"./img/defer.png\" width=\"100%\">\n     *\n     * `defer` allows you to create the Observable only when the Observer\n     * subscribes, and create a fresh Observable for each Observer. It waits until\n     * an Observer subscribes to it, and then it generates an Observable,\n     * typically with an Observable factory function. It does this afresh for each\n     * subscriber, so although each subscriber may think it is subscribing to the\n     * same Observable, in fact each subscriber gets its own individual\n     * Observable.\n     *\n     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n     * var clicksOrInterval = Rx.Observable.defer(function () {\n     *   if (Math.random() > 0.5) {\n     *     return Rx.Observable.fromEvent(document, 'click');\n     *   } else {\n     *     return Rx.Observable.interval(1000);\n     *   }\n     * });\n     * clicksOrInterval.subscribe(x => console.log(x));\n     *\n     * // Results in the following behavior:\n     * // If the result of Math.random() is greater than 0.5 it will listen\n     * // for clicks anywhere on the \"document\"; when document is clicked it\n     * // will log a MouseEvent object to the console. If the result is less\n     * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n     *\n     * @see {@link create}\n     *\n     * @param {function(): SubscribableOrPromise} observableFactory The Observable\n     * factory function to invoke for each Observer that subscribes to the output\n     * Observable. May also return a Promise, which will be converted on the fly\n     * to an Observable.\n     * @return {Observable} An Observable whose Observers' subscriptions trigger\n     * an invocation of the given Observable factory function.\n     * @static true\n     * @name defer\n     * @owner Observable\n     */\n    DeferObservable.create = function (observableFactory) {\n        return new DeferObservable(observableFactory);\n    };\n    DeferObservable.prototype._subscribe = function (subscriber) {\n        return new DeferObservable_DeferSubscriber(subscriber, this.observableFactory);\n    };\n    return DeferObservable;\n}(Observable_Observable);\nvar DeferObservable_DeferSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    DeferObservable___extends(DeferSubscriber, _super);\n    function DeferSubscriber(destination, factory) {\n        _super.call(this, destination);\n        this.factory = factory;\n        this.tryDefer();\n    }\n    DeferSubscriber.prototype.tryDefer = function () {\n        try {\n            this._callFactory();\n        } catch (err) {\n            this._error(err);\n        }\n    };\n    DeferSubscriber.prototype._callFactory = function () {\n        var result = this.factory();\n        if (result) {\n            this.add(subscribeToResult(this, result));\n        }\n    };\n    return DeferSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=DeferObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/defer.js\n/** PURE_IMPORTS_START ._DeferObservable PURE_IMPORTS_END */\n\nvar defer = DeferObservable.create;\n//# sourceMappingURL=defer.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/FromEventObservable.js\n/** PURE_IMPORTS_START .._Observable,.._util_tryCatch,.._util_isFunction,.._util_errorObject,.._Subscription PURE_IMPORTS_END */\nvar FromEventObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n\nvar FromEventObservable_toString = Object.prototype.toString;\nfunction isNodeStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isNodeList(sourceObj) {\n    return !!sourceObj && FromEventObservable_toString.call(sourceObj) === '[object NodeList]';\n}\nfunction isHTMLCollection(sourceObj) {\n    return !!sourceObj && FromEventObservable_toString.call(sourceObj) === '[object HTMLCollection]';\n}\nfunction isEventTarget(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventObservable_FromEventObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    FromEventObservable___extends(FromEventObservable, _super);\n    function FromEventObservable(sourceObj, eventName, selector, options) {\n        _super.call(this);\n        this.sourceObj = sourceObj;\n        this.eventName = eventName;\n        this.selector = selector;\n        this.options = options;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Creates an Observable that emits events of a specific type coming from the\n     * given event target.\n     *\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n     * EventEmitter events or others.</span>\n     *\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n     *\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\n     * for registering event handler functions. As a second argument it takes string that indicates\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n     * which are described in detail below. If your event target does not match any of the ones listed,\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n     * handler functions have different names, but they all accept a string describing event type\n     * and function itself, which will be called whenever said event happens.\n     *\n     * Every time resulting Observable is subscribed, event handler function will be registered\n     * to event target on given event type. When that event fires, value\n     * passed as a first argument to registered function will be emitted by output Observable.\n     * When Observable is unsubscribed, function will be unregistered from event target.\n     *\n     * Note that if event target calls registered function with more than one argument, second\n     * and following arguments will not appear in resulting stream. In order to get access to them,\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\n     * passed to event handler. Output Observable will then emit value returned by project function,\n     * instead of the usual value.\n     *\n     * Remember that event targets listed below are checked via duck typing. It means that\n     * no matter what kind of object you have and no matter what environment you work in,\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\n     * of course they behave as was described above). So for example if Node.js library exposes\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n     * a good choice.\n     *\n     * If the API you use is more callback then event handler oriented (subscribed\n     * callback function fires only once and thus there is no need to manually\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n     * instead.\n     *\n     * `fromEvent` supports following types of event targets:\n     *\n     * **DOM EventTarget**\n     *\n     * This is an object with `addEventListener` and `removeEventListener` methods.\n     *\n     * In the browser, `addEventListener` accepts - apart from event type string and event\n     * handler function arguments - optional third parameter, which is either an object or boolean,\n     * both used for additional configuration how and when passed function will be called. When\n     * `fromEvent` is used with event target of that type, you can provide this values\n     * as third parameter as well.\n     *\n     * **Node.js EventEmitter**\n     *\n     * An object with `addListener` and `removeListener` methods.\n     *\n     * **JQuery-style event target**\n     *\n     * An object with `on` and `off` methods\n     *\n     * **DOM NodeList**\n     *\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n     *\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n     * it contains and install event handler function in every of them. When returned Observable\n     * is unsubscribed, function will be removed from all Nodes.\n     *\n     * **DOM HtmlCollection**\n     *\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n     * installed and removed in each of elements.\n     *\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\n     * clicks.subscribe(x => console.log(x));\n     *\n     * // Results in:\n     * // MouseEvent object logged to console every time a click\n     * // occurs on the document.\n     *\n     *\n     * @example <caption>Use addEventListener with capture option</caption>\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n     *                                                                          // which will be passed to addEventListener\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n     *\n     * clicksInDocument.subscribe(() => console.log('document'));\n     * clicksInDiv.subscribe(() => console.log('div'));\n     *\n     * // By default events bubble UP in DOM tree, so normally\n     * // when we would click on div in document\n     * // \"div\" would be logged first and then \"document\".\n     * // Since we specified optional `capture` option, document\n     * // will catch event when it goes DOWN DOM tree, so console\n     * // will log \"document\" and then \"div\".\n     *\n     * @see {@link bindCallback}\n     * @see {@link bindNodeCallback}\n     * @see {@link fromEventPattern}\n     *\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n     * @param {string} eventName The event name of interest, being emitted by the\n     * `target`.\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEvent\n     * @owner Observable\n     */\n    FromEventObservable.create = function (target, eventName, options, selector) {\n        if (isFunction(options)) {\n            selector = options;\n            options = undefined;\n        }\n        return new FromEventObservable(target, eventName, selector, options);\n    };\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n        var unsubscribe;\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n            }\n        } else if (isEventTarget(sourceObj)) {\n            var source_1 = sourceObj;\n            sourceObj.addEventListener(eventName, handler, options);\n            unsubscribe = function unsubscribe() {\n                return source_1.removeEventListener(eventName, handler, options);\n            };\n        } else if (isJQueryStyleEventEmitter(sourceObj)) {\n            var source_2 = sourceObj;\n            sourceObj.on(eventName, handler);\n            unsubscribe = function unsubscribe() {\n                return source_2.off(eventName, handler);\n            };\n        } else if (isNodeStyleEventEmitter(sourceObj)) {\n            var source_3 = sourceObj;\n            sourceObj.addListener(eventName, handler);\n            unsubscribe = function unsubscribe() {\n                return source_3.removeListener(eventName, handler);\n            };\n        } else {\n            throw new TypeError('Invalid event target');\n        }\n        subscriber.add(new Subscription_Subscription(unsubscribe));\n    };\n    FromEventObservable.prototype._subscribe = function (subscriber) {\n        var sourceObj = this.sourceObj;\n        var eventName = this.eventName;\n        var options = this.options;\n        var selector = this.selector;\n        var handler = selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var result = tryCatch(selector).apply(void 0, args);\n            if (result === errorObject) {\n                subscriber.error(errorObject.e);\n            } else {\n                subscriber.next(result);\n            }\n        } : function (e) {\n            return subscriber.next(e);\n        };\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n    };\n    return FromEventObservable;\n}(Observable_Observable);\n//# sourceMappingURL=FromEventObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/fromEvent.js\n/** PURE_IMPORTS_START ._FromEventObservable PURE_IMPORTS_END */\n\nvar fromEvent = FromEventObservable_FromEventObservable.create;\n//# sourceMappingURL=fromEvent.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/mergeMap.js\n/** PURE_IMPORTS_START .._util_subscribeToResult,.._OuterSubscriber PURE_IMPORTS_END */\nvar mergeMap___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nvar MergeMapOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new mergeMap_MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar mergeMap_MergeMapSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    mergeMap___extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        } else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        } else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        } else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=mergeMap.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/identity.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/mergeAll.js\n/** PURE_IMPORTS_START ._mergeMap,.._util_identity PURE_IMPORTS_END */\n\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return mergeMap(identity, null, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/merge.js\n/** PURE_IMPORTS_START .._Observable,._ArrayObservable,.._util_isScheduler,.._operators_mergeAll PURE_IMPORTS_END */\n\n\n\n\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    } else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(new ArrayObservable_ArrayObservable(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/NeverObservable.js\n/** PURE_IMPORTS_START .._Observable,.._util_noop PURE_IMPORTS_END */\nvar NeverObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar NeverObservable_NeverObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    NeverObservable___extends(NeverObservable, _super);\n    function NeverObservable() {\n        _super.call(this);\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer.\n     *\n     * <span class=\"informal\">An Observable that never emits anything.</span>\n     *\n     * <img src=\"./img/never.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that emits\n     * neither values nor errors nor the completion notification. It can be used\n     * for testing purposes or for composing with other Observables. Please note\n     * that by never emitting a complete notification, this Observable keeps the\n     * subscription from being disposed automatically. Subscriptions need to be\n     * manually disposed.\n     *\n     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n     * function info() {\n     *   console.log('Will not be called');\n     * }\n     * var result = Rx.Observable.never().startWith(7);\n     * result.subscribe(x => console.log(x), info, info);\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @return {Observable} A \"never\" Observable: never emits anything.\n     * @static true\n     * @name never\n     * @owner Observable\n     */\n    NeverObservable.create = function () {\n        return new NeverObservable();\n    };\n    NeverObservable.prototype._subscribe = function (subscriber) {\n        noop();\n    };\n    return NeverObservable;\n}(Observable_Observable);\n//# sourceMappingURL=NeverObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/never.js\n/** PURE_IMPORTS_START ._NeverObservable PURE_IMPORTS_END */\n\nvar never = NeverObservable_NeverObservable.create;\n//# sourceMappingURL=never.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/tap.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar tap___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nfunction tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nvar DoOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new tap_DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar tap_DoSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    tap___extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        _super.call(this, destination);\n        var safeSubscriber = new Subscriber_Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        this.add(safeSubscriber);\n        this.safeSubscriber = safeSubscriber;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        } else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        } else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        } else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=tap.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/filter.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar filter___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nvar FilterOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    filter___extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=filter.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/map.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar map___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nvar MapOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    map___extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=map.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/pairwise.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar pairwise___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nfunction pairwise() {\n    return function (source) {\n        return source.lift(new PairwiseOperator());\n    };\n}\nvar PairwiseOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function PairwiseOperator() {}\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    pairwise___extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasPrev = false;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        } else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=pairwise.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/repeatWhen.js\n/** PURE_IMPORTS_START .._Subject,.._util_tryCatch,.._util_errorObject,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar repeatWhen___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return function (source) {\n        return source.lift(new RepeatWhenOperator(notifier));\n    };\n}\nvar RepeatWhenOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new repeatWhen_RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar repeatWhen_RepeatWhenSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    repeatWhen___extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            } else if (this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this,\n            notifications = _a.notifications,\n            retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this,\n            notifications = _a.notifications,\n            retries = _a.retries,\n            retriesSubscription = _a.retriesSubscription;\n        this.notifications = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this.notifications = notifications;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject_Subject();\n        var retries = tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=repeatWhen.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/sample.js\n/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar sample___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n    return function (source) {\n        return source.lift(new sample_SampleOperator(notifier));\n    };\n}\nvar sample_SampleOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    sample___extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        _super.apply(this, arguments);\n        this.hasValue = false;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=sample.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/refCount.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar refCount___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nfunction refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}();\nvar RefCountSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    refCount___extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=refCount.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/ConnectableObservable.js\n/** PURE_IMPORTS_START .._Subject,.._Observable,.._Subscriber,.._Subscription,.._operators_refCount PURE_IMPORTS_END */\nvar ConnectableObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable_ConnectableObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ConnectableObservable___extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription_Subscription();\n            connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription_Subscription.EMPTY;\n            } else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return refCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable_Observable);\nvar connectableProto = ConnectableObservable_ConnectableObservable.prototype;\nvar connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ConnectableObservable___extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber);\nvar ConnectableObservable_RefCountOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new ConnectableObservable_RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}();\nvar ConnectableObservable_RefCountSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ConnectableObservable___extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=ConnectableObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/multicast.js\n/** PURE_IMPORTS_START .._observable_ConnectableObservable PURE_IMPORTS_END */\n\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        } else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nvar MulticastOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}();\n//# sourceMappingURL=multicast.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/share.js\n/** PURE_IMPORTS_START ._multicast,._refCount,.._Subject PURE_IMPORTS_END */\n\n\n\nfunction shareSubjectFactory() {\n    return new Subject_Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return function (source) {\n        return refCount()(multicast(shareSubjectFactory)(source));\n    };\n}\n;\n//# sourceMappingURL=share.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/of.js\n/** PURE_IMPORTS_START ._ArrayObservable PURE_IMPORTS_END */\n\nvar of = ArrayObservable_ArrayObservable.of;\n//# sourceMappingURL=of.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/PromiseObservable.js\n/** PURE_IMPORTS_START .._util_root,.._Observable PURE_IMPORTS_END */\nvar PromiseObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PromiseObservable_PromiseObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    PromiseObservable___extends(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        _super.call(this);\n        this.promise = promise;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {PromiseLike<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            } else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                }).then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root[\"a\" /* root */].setTimeout(function () {\n                        throw err;\n                    });\n                });\n            }\n        } else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            } else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                }).then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root[\"a\" /* root */].setTimeout(function () {\n                        throw err;\n                    });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable_Observable);\nfunction dispatchNext(arg) {\n    var value = arg.value,\n        subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err,\n        subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n//# sourceMappingURL=PromiseObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/IteratorObservable.js\n/** PURE_IMPORTS_START .._util_root,.._Observable,.._symbol_iterator PURE_IMPORTS_END */\nvar IteratorObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IteratorObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    IteratorObservable___extends(IteratorObservable, _super);\n    function IteratorObservable(iterator, scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n        if (iterator == null) {\n            throw new Error('iterator cannot be null.');\n        }\n        this.iterator = getIterator(iterator);\n    }\n    IteratorObservable.create = function (iterator, scheduler) {\n        return new IteratorObservable(iterator, scheduler);\n    };\n    IteratorObservable.dispatch = function (state) {\n        var index = state.index,\n            hasError = state.hasError,\n            iterator = state.iterator,\n            subscriber = state.subscriber;\n        if (hasError) {\n            subscriber.error(state.error);\n            return;\n        }\n        var result = iterator.next();\n        if (result.done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(result.value);\n        state.index = index + 1;\n        if (subscriber.closed) {\n            if (typeof iterator.return === 'function') {\n                iterator.return();\n            }\n            return;\n        }\n        this.schedule(state);\n    };\n    IteratorObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this,\n            iterator = _a.iterator,\n            scheduler = _a.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n                index: index, iterator: iterator, subscriber: subscriber\n            });\n        } else {\n            do {\n                var result = iterator.next();\n                if (result.done) {\n                    subscriber.complete();\n                    break;\n                } else {\n                    subscriber.next(result.value);\n                }\n                if (subscriber.closed) {\n                    if (typeof iterator.return === 'function') {\n                        iterator.return();\n                    }\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return IteratorObservable;\n}(Observable_Observable);\nvar IteratorObservable_StringIterator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function StringIterator(str, idx, len) {\n        if (idx === void 0) {\n            idx = 0;\n        }\n        if (len === void 0) {\n            len = str.length;\n        }\n        this.str = str;\n        this.idx = idx;\n        this.len = len;\n    }\n    StringIterator.prototype[iterator_iterator] = function () {\n        return this;\n    };\n    StringIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.str.charAt(this.idx++)\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return StringIterator;\n}();\nvar IteratorObservable_ArrayIterator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function ArrayIterator(arr, idx, len) {\n        if (idx === void 0) {\n            idx = 0;\n        }\n        if (len === void 0) {\n            len = toLength(arr);\n        }\n        this.arr = arr;\n        this.idx = idx;\n        this.len = len;\n    }\n    ArrayIterator.prototype[iterator_iterator] = function () {\n        return this;\n    };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return ArrayIterator;\n}();\nfunction getIterator(obj) {\n    var i = obj[iterator_iterator];\n    if (!i && typeof obj === 'string') {\n        return new IteratorObservable_StringIterator(obj);\n    }\n    if (!i && obj.length !== undefined) {\n        return new IteratorObservable_ArrayIterator(obj);\n    }\n    if (!i) {\n        throw new TypeError('object is not iterable');\n    }\n    return obj[iterator_iterator]();\n}\nvar maxSafeInteger = /*@__PURE__*/Math.pow(2, 53) - 1;\nfunction toLength(o) {\n    var len = +o.length;\n    if (isNaN(len)) {\n        return 0;\n    }\n    if (len === 0 || !numberIsFinite(len)) {\n        return len;\n    }\n    len = sign(len) * Math.floor(Math.abs(len));\n    if (len <= 0) {\n        return 0;\n    }\n    if (len > maxSafeInteger) {\n        return maxSafeInteger;\n    }\n    return len;\n}\nfunction numberIsFinite(value) {\n    return typeof value === 'number' && root[\"a\" /* root */].isFinite(value);\n}\nfunction sign(value) {\n    var valueAsNumber = +value;\n    if (valueAsNumber === 0) {\n        return valueAsNumber;\n    }\n    if (isNaN(valueAsNumber)) {\n        return valueAsNumber;\n    }\n    return valueAsNumber < 0 ? -1 : 1;\n}\n//# sourceMappingURL=IteratorObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/ArrayLikeObservable.js\n/** PURE_IMPORTS_START .._Observable,._ScalarObservable,._EmptyObservable PURE_IMPORTS_END */\nvar ArrayLikeObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayLikeObservable_ArrayLikeObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ArrayLikeObservable___extends(ArrayLikeObservable, _super);\n    function ArrayLikeObservable(arrayLike, scheduler) {\n        _super.call(this);\n        this.arrayLike = arrayLike;\n        this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            this._isScalar = true;\n            this.value = arrayLike[0];\n        }\n    }\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n        var length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable();\n        } else if (length === 1) {\n            return new ScalarObservable(arrayLike[0], scheduler);\n        } else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    };\n    ArrayLikeObservable.dispatch = function (state) {\n        var arrayLike = state.arrayLike,\n            index = state.index,\n            length = state.length,\n            subscriber = state.subscriber;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this,\n            arrayLike = _a.arrayLike,\n            scheduler = _a.scheduler;\n        var length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n            });\n        } else {\n            for (var i = 0; i < length && !subscriber.closed; i++) {\n                subscriber.next(arrayLike[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayLikeObservable;\n}(Observable_Observable);\n//# sourceMappingURL=ArrayLikeObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Notification.js\n/** PURE_IMPORTS_START ._Observable PURE_IMPORTS_END */\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification_Notification = /*@__PURE__*/ /*@__PURE__*/function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        } else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable_Observable.of(this.value);\n            case 'E':\n                return Observable_Observable.throw(this.error);\n            case 'C':\n                return Observable_Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}();\n//# sourceMappingURL=Notification.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/observeOn.js\n/** PURE_IMPORTS_START .._Subscriber,.._Notification PURE_IMPORTS_END */\nvar observeOn___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) {\n        delay = 0;\n    }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nvar ObserveOnOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new observeOn_ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar observeOn_ObserveOnSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    observeOn___extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification,\n            destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification_Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification_Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification_Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber_Subscriber);\nvar ObserveOnMessage = /*@__PURE__*/ /*@__PURE__*/function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}();\n//# sourceMappingURL=observeOn.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/FromObservable.js\nvar FromObservable__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/** PURE_IMPORTS_START .._util_isArray,.._util_isArrayLike,.._util_isPromise,._PromiseObservable,._IteratorObservable,._ArrayObservable,._ArrayLikeObservable,.._symbol_iterator,.._Observable,.._operators_observeOn,.._symbol_observable PURE_IMPORTS_END */\nvar FromObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n\n\n\n\n\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromObservable_FromObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    FromObservable___extends(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        _super.call(this, null);\n        this.ish = ish;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 10 20 30\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 3 6 12 24 48 96 192 384 768 1536\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[observable_observable] === 'function') {\n                if (ish instanceof Observable_Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            } else if (isArray(ish)) {\n                return new ArrayObservable_ArrayObservable(ish, scheduler);\n            } else if (isPromise(ish)) {\n                return new PromiseObservable_PromiseObservable(ish, scheduler);\n            } else if (typeof ish[iterator_iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable(ish, scheduler);\n            } else if (isArrayLike(ish)) {\n                return new ArrayLikeObservable_ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && (typeof ish === 'undefined' ? 'undefined' : FromObservable__typeof(ish)) || ish) + ' is not observable');\n    };\n    FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[observable_observable]().subscribe(subscriber);\n        } else {\n            return ish[observable_observable]().subscribe(new observeOn_ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable_Observable);\n//# sourceMappingURL=FromObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/from.js\n/** PURE_IMPORTS_START ._FromObservable PURE_IMPORTS_END */\n\nvar from = FromObservable_FromObservable.create;\n//# sourceMappingURL=from.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/concatAll.js\n/** PURE_IMPORTS_START ._mergeAll PURE_IMPORTS_END */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n  return mergeAll(1);\n}\n//# sourceMappingURL=concatAll.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/concat.js\n/** PURE_IMPORTS_START .._util_isScheduler,._of,._from,.._operators_concatAll PURE_IMPORTS_END */\n\n\n\n\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    if (observables.length === 1 || observables.length === 2 && isScheduler(observables[1])) {\n        return from(observables[0]);\n    }\n    return concatAll()(of.apply(void 0, observables));\n}\n//# sourceMappingURL=concat.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/startWith.js\n/** PURE_IMPORTS_START .._observable_ArrayObservable,.._observable_ScalarObservable,.._observable_EmptyObservable,.._observable_concat,.._util_isScheduler PURE_IMPORTS_END */\n\n\n\n\n\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var scheduler = array[array.length - 1];\n        if (isScheduler(scheduler)) {\n            array.pop();\n        } else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len === 1) {\n            return concat(new ScalarObservable(array[0], scheduler), source);\n        } else if (len > 1) {\n            return concat(new ArrayObservable_ArrayObservable(array, scheduler), source);\n        } else {\n            return concat(new EmptyObservable(scheduler), source);\n        }\n    };\n}\n//# sourceMappingURL=startWith.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/switchMap.js\n/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar switchMap___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return function switchMapOperatorFunction(source) {\n        return source.lift(new SwitchMapOperator(project, resultSelector));\n    };\n}\nvar SwitchMapOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function SwitchMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new switchMap_SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchMapOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar switchMap_SwitchMapSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    switchMap___extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        } catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n        } else {\n            this.destination.next(innerValue);\n        }\n    };\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=switchMap.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/ArgumentOutOfRangeError.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar ArgumentOutOfRangeError___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nvar ArgumentOutOfRangeError = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ArgumentOutOfRangeError___extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var err = _super.call(this, 'argument out of range');\n        this.name = err.name = 'ArgumentOutOfRangeError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ArgumentOutOfRangeError;\n}(Error);\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/take.js\n/** PURE_IMPORTS_START .._Subscriber,.._util_ArgumentOutOfRangeError,.._observable_EmptyObservable PURE_IMPORTS_END */\nvar take___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nfunction take(count) {\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable();\n        } else {\n            return source.lift(new take_TakeOperator(count));\n        }\n    };\n}\nvar take_TakeOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError();\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    take___extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=take.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/takeUntil.js\n/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar takeUntil___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return function (source) {\n        return source.lift(new TakeUntilOperator(notifier));\n    };\n}\nvar TakeUntilOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new takeUntil_TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar takeUntil_TakeUntilSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    takeUntil___extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.add(subscribeToResult(this, notifier));\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=takeUntil.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/scheduler/Action.js\n/** PURE_IMPORTS_START .._Subscription PURE_IMPORTS_END */\nvar Action___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    Action___extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return this;\n    };\n    return Action;\n}(Subscription_Subscription);\n//# sourceMappingURL=Action.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/scheduler/AsyncAction.js\n/** PURE_IMPORTS_START .._util_root,._Action PURE_IMPORTS_END */\nvar AsyncAction___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction_AsyncAction = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    AsyncAction___extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return root[\"a\" /* root */].setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root[\"a\" /* root */].clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        } else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        } catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action);\n//# sourceMappingURL=AsyncAction.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Scheduler.js\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = /*@__PURE__*/ /*@__PURE__*/function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) {\n            now = Scheduler.now;\n        }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () {\n        return +new Date();\n    };\n    return Scheduler;\n}();\n//# sourceMappingURL=Scheduler.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/scheduler/AsyncScheduler.js\n/** PURE_IMPORTS_START .._Scheduler PURE_IMPORTS_END */\nvar AsyncScheduler___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar AsyncScheduler = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    AsyncScheduler___extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler);\n//# sourceMappingURL=AsyncScheduler.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/scheduler/async.js\n/** PURE_IMPORTS_START ._AsyncAction,._AsyncScheduler PURE_IMPORTS_END */\n\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nvar async_async = /*@__PURE__*/new AsyncScheduler(AsyncAction_AsyncAction);\n//# sourceMappingURL=async.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/timestamp.js\n/** PURE_IMPORTS_START .._scheduler_async,._map PURE_IMPORTS_END */\n\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nfunction timestamp(scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async_async;\n    }\n    return map(function (value) {\n        return new Timestamp(value, scheduler.now());\n    });\n    // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\nvar Timestamp = /*@__PURE__*/ /*@__PURE__*/function () {\n    function Timestamp(value, timestamp) {\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n    return Timestamp;\n}();\n;\n//# sourceMappingURL=timestamp.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/withLatestFrom.js\n/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar withLatestFrom___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nvar WithLatestFromOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new withLatestFrom_WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar withLatestFrom_WithLatestFromSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    withLatestFrom___extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        _super.call(this, destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        var len = observables.length;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            this.add(subscribeToResult(this, observable, observable, i));\n        }\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            } else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=withLatestFrom.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs-create-tween/esm/index.js\n // eslint-disable-line\n\n/**\n * Creates an observable that emits samples from an easing function on every animation frame\n * for a duration `d` ms.\n *\n * The first value will be emitted on the next animation frame,\n * and is the value of the easing function at `t = 0`.\n * The final value is guaranteed to be the easing function at `t = d`.\n * The observable completes one frame after the final value was emitted.\n *\n * @param {function(t: number, b: number, c: number, d: number, [s]: number): number} easingFunction\n * - the easing fuction to sample from; can use any of Robert Penner's easing functions\n     (without the `x` paramter)\n * @param {number} b - beginning value and 2nd parameter of the easing function\n * @param {number} c - change in value (or end value) and 3rd parameter of the easing function\n * @param {number} d - total duration of the tween in ms and 4th parameter of the easing function\n * @param {number} [s] - 5th parameter of the easing function (optional)\n * @return {Observable<number>} - an observable emitting samples of the easing function on\n *   animation frames for `d` ms.\n */\nfunction createTween(easingFunction, b, c, d, s) {\n  return Observable_Observable.create(function (observer) {\n    var startTime = void 0;\n    var id = requestAnimationFrame(function sample(time) {\n      startTime = startTime || time;\n      var t = time - startTime;\n      if (t < d) {\n        observer.next(easingFunction(t, b, c, d, s));\n        id = requestAnimationFrame(sample);\n      } else {\n        observer.next(easingFunction(d, b, c, d, s));\n        id = requestAnimationFrame(function () {\n          return observer.complete();\n        });\n      }\n    });\n    return function () {\n      if (id) {\n        cancelAnimationFrame(id);\n      }\n    };\n  });\n}\n\n/* harmony default export */ var esm = (createTween);\n// CONCATENATED MODULE: ./src/common.js\n// # src / common.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nfunction easeOutSine(t, b, c, d) {\n  return c * Math.sin(t / d * (Math.PI / 2)) + b; // eslint-disable-line\n}\n// CONCATENATED MODULE: ./src/mixin/constants.js\n// # src / mixin / constants.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// The base duration of the fling animation.\nvar BASE_DURATION = 200;\n\n// We adjust the duration of the animation using the width of the drawer.\n// There is no physics to this, but we know from testing that the animation starts to feel bad\n// when the drawer increases in size.\n// From testing we know that, if we increase the duration as a fraction of the drawer width,\n// the animation stays smooth across common display sizes.\nvar WIDTH_CONTRIBUTION = 0.15;\n\n// Minimum velocity of the drawer (in px/ms) when releasing to make it fling to opened/closed state.\nvar VELOCITY_THRESHOLD = 0.15;\n// CONCATENATED MODULE: ./src/mixin/operators.js\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\n// # src / mixin / operators.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n\n\n\n\n\n\n// ### Observable extensions\n// #### Subscribe when\n// This operator is like `filterWhen`, but it will unsubscribe from the source observable\n// when the input observable emits `false`, and re-subscribe when it emits `true`.\nvar operators_subscribeWhen = function subscribeWhen(p$) {\n  return function (source) {\n    if (false) throw Error();\n    return p$.pipe(switchMap(function (p) {\n      return p ? source : never();\n    }));\n  };\n};\n\n// #### Filter when\n// This operator is like `filter`, but it takes an observable of booleans as input,\n// instead of a predicate function.\nvar operators_filterWhen = function filterWhen(p$) {\n  for (var _len = arguments.length, others = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    others[_key - 1] = arguments[_key];\n  }\n\n  return function (source) {\n    if (false) throw Error();else if (others.length === 0) {\n      return source.pipe(withLatestFrom(p$), filter(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            p = _ref2[1];\n\n        return p;\n      }), map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n            x = _ref4[0];\n\n        return x;\n      }));\n\n      // When providing more than one observable, the result observable will only emit values\n      // when `every` input observable has emitted a truthy value.\n    } else {\n      return source.pipe(withLatestFrom.apply(undefined, [p$].concat(others)), filter(function (_ref5) {\n        var _ref6 = _toArray(_ref5),\n            ps = _ref6.slice(1);\n\n        return ps.every(function (p) {\n          return p;\n        });\n      }), map(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 1),\n            x = _ref8[0];\n\n        return x;\n      }));\n    }\n  };\n};\n// CONCATENATED MODULE: ./src/mixin/calc.js\nvar calc__slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar calc__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction calc__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction calc__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction calc__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// # src / mixin / calc.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n\n// Using shorthands for common functions\nvar min = Math.min.bind(Math);\nvar max = Math.max.bind(Math);\n\nvar calc_calcMixin = function calcMixin(C) {\n  return function (_C) {\n    calc__inherits(_class, _C);\n\n    function _class() {\n      calc__classCallCheck(this, _class);\n\n      return calc__possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    calc__createClass(_class, [{\n      key: \"calcIsInRange\",\n\n      // #### Is in range?\n      // Given a x-coordinate, `isInRange` will  determine whether it is within range from where\n      // to pull the drawer. The x-coordinate *must* be larger than the lower bound,\n      // but when the drawer is opened it may be anywhere on the screen.\n      // Otherwise it must be below the upper bound.\n      value: function calcIsInRange(clientX, opened) {\n        switch (this.align) {\n          case \"left\":\n            return clientX > this.range[0] && (opened || clientX < this.range[1]);\n          case \"right\":\n            return clientX < window.innerWidth - this.range[0] && (opened || clientX > window.innerWidth - this.range[1]);\n          default:\n            throw Error();\n        }\n      }\n\n      // #### Calculate 'Is swipe?'\n      // If the start and end position are not the same x-coordinate, we call it a 'swipe'.\n      // However, if a tap occures during an animation (i.e. `translateX` not in a resting position)\n      // we treat it as a swipe as well. The reasons for this are pretty complex:\n      // Basically, we want users the be able to stop the animation by putting a finger on the screen.\n      // However, if they lift the finger again without swiping, the animation would not continue,\n      // because it would not pass the condition below, unless we introduce the second term.\n      // TODO: reuse isSlidign observable?\n\n    }, {\n      key: \"calcIsSwipe\",\n      value: function calcIsSwipe(_ref) {\n        var _ref2 = calc__slicedToArray(_ref, 3),\n            endX = _ref2[0].clientX,\n            startX = _ref2[1].clientX,\n            translateX = _ref2[2];\n\n        return endX !== startX || translateX > 0 && translateX < this.drawerWidth;\n      }\n\n      // #### Calculate 'Will open?'\n      // Based on current velocity and position of the drawer,\n      // should the drawer slide open, or snap back?\n      // TODO: could incorporate the current open state of the drawer.\n\n    }, {\n      key: \"calcWillOpen\",\n      value: function calcWillOpen(_ref3) {\n        var _ref4 = calc__slicedToArray(_ref3, 4),\n            translateX = _ref4[2],\n            velocity = _ref4[3];\n\n        switch (this.align) {\n          case \"left\":\n            {\n              if (velocity > VELOCITY_THRESHOLD) return true;else if (velocity < -VELOCITY_THRESHOLD) return false;else if (translateX >= this.drawerWidth / 2) return true;else return false;\n            }\n          case \"right\":\n            {\n              if (-velocity > VELOCITY_THRESHOLD) return true;else if (-velocity < -VELOCITY_THRESHOLD) return false;else if (translateX <= -this.drawerWidth / 2) return true;else return false;\n            }\n          default:\n            throw Error();\n        }\n      }\n\n      // #### Calculate translate X\n      // Calcuate the current position of the drawer,\n      // by taking the difference between the current and starting postion of the finger,\n      // then adding that difference to the starting position of the drawer.\n      // This way, we avoid the drawer jumping to the finger, when \"catching\" it during an animation.\n      // The function will also clip the position at 0 and the width of the drawer.\n\n    }, {\n      key: \"calcTranslateX\",\n      value: function calcTranslateX(clientX, startX, startTranslateX) {\n        switch (this.align) {\n          case \"left\":\n            {\n              var deltaX = clientX - startX;\n              var translateX = startTranslateX + deltaX;\n              return max(0, min(this.drawerWidth, translateX));\n            }\n          case \"right\":\n            {\n              var _deltaX = clientX - startX;\n              var _translateX = startTranslateX + _deltaX;\n              return min(0, max(-this.drawerWidth, _translateX));\n            }\n          default:\n            throw Error();\n        }\n      }\n\n      // #### Get movable drawer width\n      // One feature of hy-drawer is to allow the drawer to \"peek\" over the edge.\n      // This effect is achieved by setting a smaller negative `left` (`right`) CSS property,\n      // than is the width of the drawer,\n      // The 'moveable' part of the drawer, then, is equal to that the inverse of that property.\n      // See [Styling](../../styling.md) for more.\n\n    }, {\n      key: \"calcMovableDrawerWidth\",\n      value: function calcMovableDrawerWidth() {\n        return -parseFloat(getComputedStyle(this.contentEl)[this.align]);\n      }\n    }]);\n\n    return _class;\n  }(C);\n};\n// CONCATENATED MODULE: ./src/mixin/update.js\nvar update__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction update__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction update__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction update__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// # src / mixin / update.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nvar updateMixin = function updateMixin(C) {\n  return function (_C) {\n    update__inherits(_class, _C);\n\n    function _class() {\n      update__classCallCheck(this, _class);\n\n      return update__possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    update__createClass(_class, [{\n      key: \"histId\",\n      value: function histId() {\n        return this.el.id || this.constructor.componentName;\n      }\n\n      // #### Prepare and cleanup interaction\n      // `prepareInteraction` causes various side effects before sliding the drawer.\n      //\n      // Note that the drawer receives the `hy-drawer-opened` CSS class when it is opened.\n      // This class makes the drawer appear open by setting the CSS `left` (`right`) property, instead\n      // of an absoulte `transform` value.\n      // This way, the drawer's width can change while it is open without having to\n      // recalculate `translateX` on every `resize`.\n      // However, it has to be removed before we move the drawer via `translateX` again.\n\n    }, {\n      key: \"prepareInteraction\",\n      value: function prepareInteraction() {\n        this.contentEl.style.willChange = \"transform\";\n        this.scrimEl.style.willChange = \"opacity\";\n        this.contentEl.classList.remove(\"hy-drawer-opened\");\n        this.fireEvent(\"prepare\");\n      }\n\n      // Cleanup code after a completed interaction.\n      // Will add/remove the beforementioned `hy-drawer-opened` class.\n\n    }, {\n      key: \"cleanupInteraction\",\n      value: function cleanupInteraction(opened) {\n        this.scrimEl.style.willChange = \"\";\n        this.contentEl.style.willChange = \"\";\n\n        if (opened) {\n          this.scrimEl.style.pointerEvents = \"all\";\n          this.contentEl.classList.add(\"hy-drawer-opened\");\n        } else {\n          this.scrimEl.style.pointerEvents = \"\";\n          this.contentEl.classList.remove(\"hy-drawer-opened\");\n        }\n\n        // If the experimental back button feature is enabled we hack the history API,\n        // so that it matches the state of the drawer...\n        /*\n        if (this._backButton) {\n          const id = histId.call(this);\n          const hash = `#${id}--opened`;\n           if (opened && window.location.hash !== hash) {\n            window.history.pushState({ [id]: true }, document.title, hash);\n          }\n           if (!opened\n              && (window.history.state && window.history.state[histId.call(this)])\n              && window.location.hash !== '') {\n            window.history.back();\n          }\n        }\n        */\n\n        // Once we're finished cleaning up, we fire the `transitioned` event.\n        this.fireEvent(\"transitioned\", { detail: opened });\n      }\n      // #### Update DOM\n      // In the end, we only modify two properties: The x-coordinate of the drawer,\n      // and the opacity of the scrim, which is handled by `updateDOM`.\n\n    }, {\n      key: \"updateDOM\",\n      value: function updateDOM(translateX) {\n        this.translateX = translateX;\n\n        var inv = this.align === \"left\" ? 1 : -1;\n        var opacity = this.opacity = translateX / this.drawerWidth * inv;\n\n        this.contentEl.style.transform = \"translateX(\" + translateX + \"px)\";\n        this.scrimEl.style.opacity = this.opacity;\n\n        this.fireEvent(\"move\", { detail: { translateX: translateX, opacity: opacity } });\n      }\n    }]);\n\n    return _class;\n  }(C);\n};\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/mapTo.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar mapTo___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nfunction mapTo(value) {\n    return function (source) {\n        return source.lift(new MapToOperator(value));\n    };\n}\nvar MapToOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    mapTo___extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        _super.call(this, destination);\n        this.value = value;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=mapTo.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/skipWhile.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar skipWhile___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nfunction skipWhile(predicate) {\n    return function (source) {\n        return source.lift(new SkipWhileOperator(predicate));\n    };\n}\nvar SkipWhileOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    skipWhile___extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.skipping = true;\n        this.index = 0;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        } catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=skipWhile.js.map\n// CONCATENATED MODULE: ./src/mixin/observables.js\nvar observables__slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar observables__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction observables__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction observables__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction observables__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// # src / mixin / observables.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Using shorthands for common functions\nvar abs = Math.abs.bind(Math);\n\n// #### Get start observable\n// The following function returns an observable of all \"start\" events.\n// Usually, that's just `touchstart` event of the first finger touching the screen,\n// however since the compontent also supports mouse events,\n// we may listen for `mousedown` events.\nvar observables_baseObservablesMixin = function baseObservablesMixin(C) {\n  return function (_C) {\n    observables__inherits(_class, _C);\n\n    function _class() {\n      observables__classCallCheck(this, _class);\n\n      return observables__possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    observables__createClass(_class, [{\n      key: \"getStartObservable\",\n      value: function getStartObservable() {\n        // Since the `mouseEvents` option may change at any point, we `switchMap` to reflect the changes.\n        return combineLatest_combineLatest(this.subjects.adapt, this.subjects.mouseEvents).pipe(switchMap(function (_ref) {\n          var _ref2 = observables__slicedToArray(_ref, 2),\n              doc = _ref2[0],\n              mouseEvents = _ref2[1];\n\n          // The touchstart observable is passive since we won't be calling `preventDefault`.\n          // Also, we're only interested in the first `touchstart`.\n          var touchstart$ = fromEvent(doc, \"touchstart\", {\n            passive: true\n          }).pipe(filter(function (_ref3) {\n            var touches = _ref3.touches;\n            return touches.length === 1;\n          }), map(function (_ref4) {\n            var touches = _ref4.touches;\n            return touches[0];\n          }));\n\n          // If mouse events aren't enabled, we're done here.\n          if (!mouseEvents) return touchstart$;\n\n          // Otherwise we also include `mousedown` events in the output.\n          var mousedown$ = fromEvent(doc, \"mousedown\").pipe(tap(function (event) {\n            return Object.assign(event, { event: event });\n          }));\n\n          return merge(touchstart$, mousedown$);\n        }));\n      }\n\n      // #### Get move observable\n      // This function returns an observable of all move events. Usually that's just `touchmove`,\n      // but may also include `mousemove` events while the mouse button is down.\n\n    }, {\n      key: \"getMoveObservable\",\n      value: function getMoveObservable(start$, end$) {\n        // Since the `mouseEvents` or `preventDefault` option may change at any point,\n        // we `switchMap` to reflect the changes.\n        // Nice: `combineLatest` provides us with the functionality of emitting\n        // when either of the inputs change, but not before all inputs have their first value set.\n        var input$ = combineLatest_combineLatest(this.subjects.adapt, this.subjects.mouseEvents, this.subjects.preventDefault);\n        return input$.pipe(switchMap(function (_ref5) {\n          var _ref6 = observables__slicedToArray(_ref5, 3),\n              doc = _ref6[0],\n              mouseEvents = _ref6[1],\n              preventDefault = _ref6[2];\n\n          // We're only keeping track of the first finger.\n          // Should the user remove the finger that started the interaction, we use the next instead.\n          // Note that this doesn't occur under normal circumstances,\n          // and exists primarliy to ensure that the interaction continues without hiccups.\n          // Note that the event listener is only passive when the `preventDefault` option is falsy.\n          var s = { passive: !preventDefault };\n          var touchmove$ = fromEvent(doc, \"touchmove\", s).pipe(map(function (e) {\n            return Object.assign(e.touches[0], { event: e });\n          }));\n\n          // If mouse events aren't enabled, we're done here.\n          if (!mouseEvents) return touchmove$;\n\n          // Otherwise we listen for `mousemove` events,\n          // but only those between a `start` and `end` event, i.e. while the user is sliding.\n          // We unsubscribe form the source observable outside of those contraints.\n          // Again, the listener is only marked as passive when the `preventDefault` option is falsy.\n          var mousemove$ = fromEvent(doc, \"mousemove\", {\n            passive: !preventDefault\n          }).pipe(operators_subscribeWhen(merge(start$.pipe(mapTo(true)), end$.pipe(mapTo(false)))), map(function (event) {\n            return Object.assign(event, { event: event });\n          }));\n\n          return merge(touchmove$, mousemove$);\n        }));\n      }\n\n      // #### Get end observable\n      // This function returns an observable of end events.\n      // Usually, this is the `touchend` event of the last finger, but may also include `mouseup` events,\n      // when the `mouseEvents` option is enabled.\n\n    }, {\n      key: \"getEndObservable\",\n      value: function getEndObservable() {\n        // Since the `mouseEvents` option may change at any point, we `switchMap` to reflect the changes.\n        return combineLatest_combineLatest(this.subjects.adapt, this.subjects.mouseEvents).pipe(switchMap(function (_ref7) {\n          var _ref8 = observables__slicedToArray(_ref7, 2),\n              doc = _ref8[0],\n              mouseEvents = _ref8[1];\n\n          // We're only interested in the last `touchend`.\n          // Otherwise there's at least one finger left on the screen,\n          // that can be used to slide the drawer.\n          var touchend$ = fromEvent(doc, \"touchend\", { passive: true }).pipe(filter(function (_ref9) {\n            var touches = _ref9.touches;\n            return touches.length === 0;\n          }), map(function (event) {\n            return event.changedTouches[0];\n          }));\n\n          // If mouse events aren't enabled, we're done here.\n          if (!mouseEvents) return touchend$;\n\n          // Otherwise we include `mouseup` events.\n          var mouseup$ = fromEvent(doc, \"mouseup\", { passive: true });\n          return merge(touchend$, mouseup$);\n        }));\n      }\n\n      // #### Get \"Is sliding?\" observable\n      // An observable that emits `true` when the user is *sliding* the drawer,\n      // (i.e. moving the finger along the x-axis), or `false` when *scrolling* the page\n      // (i.e. moving the finger along the y-axis).\n\n    }, {\n      key: \"getIsSlidingObservable\",\n      value: function getIsSlidingObservable(move$, start$) {\n        var _this2 = this;\n\n        // If the threshold options is set, we delay the decision until\n        // the finger has moved at least `threshold` pixels in either direction.\n        if (this.threshold) {\n          return move$.pipe(withLatestFrom(start$), skipWhile(function (_ref10) {\n            var _ref11 = observables__slicedToArray(_ref10, 2),\n                _ref11$ = _ref11[0],\n                clientX = _ref11$.clientX,\n                clientY = _ref11$.clientY,\n                _ref11$2 = _ref11[1],\n                startX = _ref11$2.clientX,\n                startY = _ref11$2.clientY;\n\n            return abs(startY - clientY) < _this2.threshold && abs(startX - clientX) < _this2.threshold;\n          }), map(function (_ref12) {\n            var _ref13 = observables__slicedToArray(_ref12, 2),\n                _ref13$ = _ref13[0],\n                clientX = _ref13$.clientX,\n                clientY = _ref13$.clientY,\n                _ref13$2 = _ref13[1],\n                startX = _ref13$2.clientX,\n                startY = _ref13$2.clientY;\n\n            return abs(startX - clientX) >= abs(startY - clientY);\n          }));\n\n          // If the threshold option is set to `0` (or `false`) we make a decision immediately.\n          // This is intended for Safari and possibly other browsers that have a built-in threshold.\n          // Additionally, Safari ignores all calls to `preventDefault`, except on the first move event\n          // after a start event, so that we *have to* make a decision immediately.\n        } else {\n          return move$.pipe(withLatestFrom(start$), map(function (_ref14) {\n            var _ref15 = observables__slicedToArray(_ref14, 2),\n                _ref15$ = _ref15[0],\n                clientX = _ref15$.clientX,\n                clientY = _ref15$.clientY,\n                event = _ref15$.event,\n                _ref15$2 = _ref15[1],\n                startX = _ref15$2.clientX,\n                startY = _ref15$2.clientY;\n\n            var isSliding = abs(startX - clientX) >= abs(startY - clientY);\n            if (_this2.preventDefault && isSliding) event.preventDefault();\n            return isSliding;\n          }));\n        }\n      }\n    }]);\n\n    return _class;\n  }(C);\n};\n// CONCATENATED MODULE: ./src/mixin/setup.js\nvar setup__slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar setup__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction setup__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction setup__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction setup__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// # src / mixin / setup.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// As mentioned before, we only import the RxJS function that we need.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// ### Setup observables\n// This function sets up the observable \"pipeline\".\nvar setup_setupObservablesMixin = function setupObservablesMixin(C) {\n  return function (_baseObservablesMixin) {\n    setup__inherits(_class, _baseObservablesMixin);\n\n    function _class() {\n      setup__classCallCheck(this, _class);\n\n      return setup__possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    setup__createClass(_class, [{\n      key: \"setupObservables\",\n      value: function setupObservables() {\n        var _this2 = this;\n\n        // An observable of resize events.\n        var resize$ = fromEvent(window, \"resize\", { passive: true }).pipe(takeUntil(this.subjects.disconnect),\n        /* debounceTime(100), */\n        share(), startWith({}));\n\n        // Keep measurements up-to-date.\n        // Note that we need to temporarily remove the opened class to get the correct measures.\n        resize$.pipe(takeUntil(this.subjects.disconnect)).subscribe(function () {\n          if (_this2.opened) _this2.contentEl.classList.remove(\"hy-drawer-opened\");\n          _this2.drawerWidth = _this2.calcMovableDrawerWidth();\n          if (_this2.opened) _this2.contentEl.classList.add(\"hy-drawer-opened\");\n        });\n\n        // Emitts a value every time you change the `persistent` property of the drawer.\n        // Interally, we invert it and call it `active`.\n        var active$ = this.subjects.persistent.pipe(takeUntil(this.subjects.disconnect), map(function (x) {\n          return !x;\n        }), share());\n\n        // We use this to get references to observables that aren't defined yet.\n        var ref = {};\n\n        // #### Start observable\n        // Emits a value every time a start event *could* intiate an interaction.\n        // Each emitted value is a hash containing a `clientX` and `clientY` key.\n        var start$ = this.getStartObservable().pipe(takeUntil(this.subjects.disconnect), operators_filterWhen(active$), share());\n\n        // An observable that emits `true`, as long as the drawer isn't fully closed\n        // (as long as the scrim is visible the user can still \"catch\" the drawer).\n        // It references the yet-to-be-defined `translateX` obsevable, so we wrap it inside a `defer`.\n        var isScrimVisible$ = defer(function () {\n          return ref.translateX$.pipe(map(function (translateX) {\n            return _this2.align === \"left\" ? translateX > 0 : translateX < _this2.drawerWidth;\n          }));\n        });\n\n        // TODO: ...\n        var isInRange$ = start$.pipe(withLatestFrom(isScrimVisible$), map(function (_ref) {\n          var _ref2 = setup__slicedToArray(_ref, 2),\n              clientX = _ref2[0].clientX,\n              isScrimVisible = _ref2[1];\n\n          return _this2.calcIsInRange(clientX, isScrimVisible);\n        }), tap(function (inRange) {\n          if (inRange) {\n            if (_this2.mouseEvents) _this2.contentEl.classList.add(\"hy-drawer-grabbing\");\n            _this2.prepareInteraction();\n          }\n        }), share());\n\n        // #### End observable\n        // The observable of all relevant \"end\" events, i.e. the last `touchend` (or `mouseup`),\n        var end$ = this.getEndObservable().pipe(takeUntil(this.subjects.disconnect), operators_filterWhen(active$, isInRange$), share());\n\n        // #### Move observable\n        // The observable of all relevant \"move\" events.\n        var move$ = this.getMoveObservable(start$, end$).pipe(takeUntil(this.subjects.disconnect), operators_filterWhen(active$, isInRange$), share());\n\n        // #### 'Is sliding?' observable\n        // An observable that emits `true` when the user is *sliding* the drawer,\n        // (i.e. moving the finger along the x-axis), or `false` when *scrolling* the page\n        // (i.e. moving the finger along the y-axis), and `undefined` while we aren't sure yet.\n        //\n        // See [`getIsSlidingObservable`](./observables.md#get-is-sliding-observable).\n        var isSliding$ = this.getIsSlidingObservable(move$, start$).pipe(take(1), startWith(undefined), repeatWhen(function () {\n          return end$;\n        }),\n\n        // When the user is sliding, fire the `slidestart` event.\n        tap(function (isSliding) {\n          if (isSliding) _this2.fireEvent(\"slidestart\", { detail: _this2.opened });\n        }));\n\n        // #### Translate X observable\n        // The `translateX` observable is the central observable of this component.\n        // It emits the current x-coordinate of the drawer, which\n        // can be modified by either of 3 incoming observables:\n        //\n        // 1. The move observable (the user's finger/mouse moving across the screen),\n        // 2. the animation/tween observable, and\n        // 3. direct modifications of the `opened` state.\n        //\n        // It is wrapped in a `defer` because it depends on previous values of itself.\n        ref.translateX$ = defer(function () {\n          return merge(\n          // 1)\n          // We only let move events modify the drawer's position when we are sure\n          // that the user is sliding. In case the `preventDefault` option is enabled,\n          // this is also when we're sure to call `preventDefault`.\n          move$.pipe(operators_filterWhen(isSliding$), tap(function (_ref3) {\n            var event = _ref3.event;\n\n            if (_this2.preventDefault) event.preventDefault();\n          }),\n\n          // Finally, we take the start position of the finger, the start position of the drawer,\n          // and the current position of the finger to calculate the next `translateX` value.\n          withLatestFrom(start$, ref.startTranslateX$), map(function (_ref4) {\n            var _ref5 = setup__slicedToArray(_ref4, 3),\n                clientX = _ref5[0].clientX,\n                startX = _ref5[1].clientX,\n                startTranslateX = _ref5[2];\n\n            return _this2.calcTranslateX(clientX, startX, startTranslateX);\n          })),\n\n          // 2)\n          // The tween observable can be used unmodified (see below),\n          // but isn't defined yet, because it depends on previous values of `translateX$`.\n          ref.tween$,\n\n          // 3)\n          // When the `opened` state changes, we \"jump\" to the new position,\n          // which is either 0 (when closed) or the width of the drawer (when open).\n          // We also want to jump when `align` chagnes, in this case to the other side of the viewport.\n          combineLatest_combineLatest(_this2.subjects.opened, _this2.subjects.align).pipe(\n          // Usually the cleanup code would run at the end of the fling animation,\n          // but since there is no animation in this case, we call it directly.\n          tap(function (_ref6) {\n            var _ref7 = setup__slicedToArray(_ref6, 1),\n                opened = _ref7[0];\n\n            return _this2.cleanupInteraction(opened);\n          }), map(function (_ref8) {\n            var _ref9 = setup__slicedToArray(_ref8, 2),\n                opened = _ref9[0],\n                align = _ref9[1];\n\n            return !opened ? 0 : _this2.drawerWidth * (align === \"left\" ? 1 : -1);\n          })));\n        })\n        // `share`ing the observable between many subscribers:\n        .pipe(takeUntil(this.subjects.disconnect), share());\n\n        // The `translateX` value at the start of an interaction.\n        // Typically this would be either 0 or `drawerWidth`, but since the user can initiate\n        // an interaction *during the animation*, it could also be any value inbetween.\n        // We obtain it by sampling the translate-x observable at the beginning of each interaction.\n        ref.startTranslateX$ = ref.translateX$.pipe(sample(start$));\n\n        // #### Tween observable\n        // For the tween animations we first need an observable that tracks\n        // the current velocity of the drawer,\n        // which we will use to determine whether the drawer should flinging in its direction,\n        // or snap back into place.\n        var velocity$ = ref.translateX$.pipe(timestamp(), pairwise(),\n        // Since we are at the mercy of the browser firing move events,\n        // we make sure that some time has passed since the last move event.\n        filter(function (_ref10) {\n          var _ref11 = setup__slicedToArray(_ref10, 2),\n              prevTime = _ref11[0].timestamp,\n              time = _ref11[1].timestamp;\n\n          return time - prevTime > 0;\n        }),\n        // Now we are save to calculate the current velocity without divide by zero errors.\n        map(function (_ref12) {\n          var _ref13 = setup__slicedToArray(_ref12, 2),\n              _ref13$ = _ref13[0],\n              prevX = _ref13$.value,\n              prevTime = _ref13$.timestamp,\n              _ref13$2 = _ref13[1],\n              x = _ref13$2.value,\n              time = _ref13$2.timestamp;\n\n          return (x - prevX) / (time - prevTime);\n        }),\n        // The initial velocity is zero.\n        startWith(0));\n\n        // TODO\n        var willOpen$ = end$.pipe(tap(function () {\n          _this2.contentEl.classList.remove(\"hy-drawer-grabbing\");\n        }), withLatestFrom(start$, ref.translateX$, velocity$), filter(this.calcIsSwipe.bind(this)), map(this.calcWillOpen.bind(this)),\n        // TODO: only fire `slideend` event when slidestart fired as well?\n        tap(function (willOpen) {\n          return _this2.fireEvent(\"slideend\", { detail: willOpen });\n        }));\n\n        // There are 2 things that can trigger an animation:\n        // 1. The end of an interaction, i.e. the user releases the finger/mouse while moving the slider.\n        // 2. A call to a method like `open` or `close` (represented by a value on the animate observable)\n        //    Note that we call `prepareInteraction` manually here, because it wasn't triggered by a\n        //    prior `touchdown`/`mousedown` event in this case.\n        var tweenTrigger$ = merge(willOpen$, this.animateTo$.pipe(tap(this.prepareInteraction.bind(this))));\n\n        // We silently set the new `opened` state here,\n        // so that the next interaction will do the right thing even while the animation is\n        // still playing, e.g. a call to `toggle` will cancel the current animation\n        // and initiate an animation to the opposite state.\n        ref.tween$ = tweenTrigger$.pipe(tap(function (willOpen) {\n          _this2.setInternalState(\"opened\", willOpen);\n        }),\n        // By using `switchMap` we ensure that subsequent events that trigger an animation\n        // don't cause more than one animation to be played at a time.\n        withLatestFrom(ref.translateX$), switchMap(function (_ref14) {\n          var _ref15 = setup__slicedToArray(_ref14, 2),\n              opened = _ref15[0],\n              translateX = _ref15[1];\n\n          // We return a tween observable that runs cleanup code when it completes\n          // --- unless a new interaction is initiated, in which case it is canceled.\n          var inv = _this2.align === \"left\" ? 1 : -1;\n          var endTranslateX = opened ? _this2.drawerWidth * inv : 0;\n          var diffTranslateX = endTranslateX - translateX;\n          var duration = BASE_DURATION + _this2.drawerWidth * WIDTH_CONTRIBUTION;\n\n          return createTween(easeOutSine, translateX, diffTranslateX, duration).pipe(tap({ complete: function complete() {\n              return _this2.subjects.opened.next(opened);\n            } }), takeUntil(start$), takeUntil(_this2.subjects.align));\n        }));\n\n        // #### Subscriptions\n        // Now we are ready to cause some side effects.\n        //\n        // The end result is always to update the (shadow) DOM, which happens here.\n        // Note that the call to subscribe sets the whole process in motion,\n        // and causes the code inside the above `defer` observables to run.\n        ref.translateX$.subscribe(this.updateDOM.bind(this));\n\n        // A click on the scrim should close the drawer.\n        fromEvent(this.scrimEl, \"click\").pipe(takeUntil(this.subjects.disconnect)).subscribe(function () {\n          return _this2.close();\n        });\n\n        // Other than preventing sliding, setting `persistent` will also hide the scrim.\n        active$.pipe(takeUntil(this.subjects.disconnect)).subscribe(function (active) {\n          _this2.scrimEl.style.display = active ? \"block\" : \"none\";\n        });\n\n        // Whenever the alignment of the drawer changes, update the CSS classes.\n        this.subjects.align.pipe(takeUntil(this.subjects.disconnect)).subscribe(function (align) {\n          var oldAlign = align === \"left\" ? \"right\" : \"left\";\n          _this2.contentEl.classList.remove(\"hy-drawer-\" + oldAlign);\n          _this2.contentEl.classList.add(\"hy-drawer-\" + align);\n        });\n\n        // If the experimental back button feature is enabled, handle popstate events...\n        /*\n        fromEvent(window, 'popstate')\n          .pipe(\n            takeUntil(this.subjects.disconnect),\n            subscribeWhen(this.backButton$),\n          )\n          .subscribe(() => {\n            const hash = `#${histId.call(this)}--opened`;\n            const willOpen = window.location.hash === hash;\n            if (willOpen !== this.opened) this.animateTo$.next(willOpen);\n          });\n        */\n\n        // When drawing with mouse is enabled, we add the grab cursor to the drawer.\n        // We also want to call `preventDefault` when `mousedown` is within the drawer range\n        // to prevent text selection while sliding.\n        this.subjects.mouseEvents.pipe(takeUntil(this.subjects.disconnect), switchMap(function (mouseEvents) {\n          if (mouseEvents) _this2.contentEl.classList.add(\"hy-drawer-grab\");else _this2.contentEl.classList.remove(\"hy-drawer-grab\");\n\n          return mouseEvents ? start$.pipe(withLatestFrom(isInRange$)) : never();\n        })).subscribe(function (_ref16) {\n          var _ref17 = setup__slicedToArray(_ref16, 2),\n              event = _ref17[0].event,\n              isInRange = _ref17[1];\n\n          if (isInRange && event) event.preventDefault();\n        });\n\n        // Now we set the initial opend state.\n        // If the experimental back button feature is enabled, we check the location hash...\n        /*\n        if (this._backButton) {\n          const hash = `#${histId.call(this)}--opened`;\n          if (window.location.hash === hash) this.setInternalState('opened', true);\n        }\n        */\n\n        // Putting initial values on the side-effect--observables:\n        // this.document$.next(document);\n\n        /*\n        this.opened$.next(this.opened);\n        this.align$.next(this.align);\n        this.persitent$.next(this.persistent);\n        this.preventDefault$.next(this.preventDefault);\n        this.mouseEvents$.next(this.mouseEvents);\n        */\n        /* this.backButton$.next(this._backButton); */\n      }\n    }]);\n\n    return _class;\n  }(observables_baseObservablesMixin(updateMixin(calc_calcMixin(C))));\n};\n// CONCATENATED MODULE: ./src/mixin/index.js\nvar mixin__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar mixin__get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction mixin__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction mixin__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction mixin__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n// # src / mixin / index.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// ## Overview\n// This component is written in [RxJS] and reading its code requires some basic understanding\n// of how RxJS works. It may also serve as an example of how to use RxJS.\n//\n// Other than RxJS, you should be familiar with [ES6 Mixin][esmixins],\n// which is a clever way of using the ES6 class syntax to achieve inheritance-based mixins.\n// The mixin in the main export of this file.\n\n// ## Imports\n// ES6+ functions that we use.\n// import 'core-js/fn/array/from';\n// import 'core-js/fn/function/bind';\n// import 'core-js/fn/object/assign';\n\n// Importing the hy-compontent base libary,\n// which helps with making multiple versions of the component (Vanilla JS, WebComponent, etc...).\n\n\n\n\n\n\n// TODO\n\n\n// A set of [Modernizr] tests that are required for this component to work.\nvar MIXIN_FEATURE_TESTS = new _Set([].concat(_toConsumableArray(COMPONENT_FEATURE_TESTS), [\"eventlistener\", \"queryselector\", \"requestanimationframe\", \"classlist\", \"opacity\", \"csstransforms\", \"csspointerevents\"]));\n\n\n\n// ## Drawer Mixin\nvar mixin_drawerMixin = function drawerMixin(C) {\n  return function (_setupObservablesMixi) {\n    mixin__inherits(_class, _setupObservablesMixi);\n\n    function _class() {\n      mixin__classCallCheck(this, _class);\n\n      return mixin__possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    mixin__createClass(_class, [{\n      key: \"setupComponent\",\n\n\n      // ### Setup\n      // Overriding the setup function.\n      value: function setupComponent(el, props) {\n        mixin__get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"setupComponent\", this).call(this, el, props);\n\n        this.animateTo$ = new Subject_Subject();\n\n        // Cache DOM elements.\n        this.scrimEl = this.sroot.querySelector(\".hy-drawer-scrim\");\n        this.contentEl = this.sroot.querySelector(\".hy-drawer-content\");\n\n        // Set the initial alignment class.\n        this.contentEl.classList.add(\"hy-drawer-\" + this.align);\n      }\n\n      // Calling the [setup observables function](./setup.md) function.\n\n    }, {\n      key: \"connectComponent\",\n      value: function connectComponent() {\n        this.setupObservables();\n        mixin__get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"connectComponent\", this).call(this);\n\n        // Firing an event to let the outside world know the drawer is ready.\n        this.fireEvent(\"init\", { detail: this.opened });\n      }\n\n      // ### Methods\n      // Public methods of this component. See [Methods](../../methods.md) for more.\n\n    }, {\n      key: \"open\",\n      value: function open() {\n        var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        if (animated) this.animateTo$.next(true);else this.opened = true;\n      }\n    }, {\n      key: \"close\",\n      value: function close() {\n        var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        if (animated) this.animateTo$.next(false);else this.opened = false;\n      }\n    }, {\n      key: \"toggle\",\n      value: function toggle() {\n        var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        if (animated) this.animateTo$.next(!this.opened);else this.opened = !this.opened;\n      }\n    }], [{\n      key: \"componentName\",\n\n      // The name of the component (required by hy-component)\n      get: function get() {\n        return \"hy-drawer\";\n      }\n\n      // ### Options\n      // The default values (and types) of the configuration options (required by hy-component)\n      // See [Options](../../options.md) for usage information.\n\n    }, {\n      key: \"types\",\n      get: function get() {\n        return {\n          opened: bool,\n          align: oneOf([\"left\", \"right\"]),\n          persistent: bool,\n          range: array_of_arrayOf(number),\n          threshold: number,\n          preventDefault: bool,\n          mouseEvents: bool\n        };\n      }\n    }, {\n      key: \"defaults\",\n      get: function get() {\n        return {\n          opened: false,\n          align: \"left\",\n          persistent: false,\n          range: [0, 100],\n          threshold: 10,\n          preventDefault: false,\n          mouseEvents: false\n        };\n      }\n    }]);\n\n    return _class;\n  }(setup_setupObservablesMixin(rxjs_rxjsMixin(componentMixin(C))));\n};\n\n// [rxjs]: https://github.com/ReactiveX/rxjs\n// [esmixins]: http://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/\n// [modernizr]: https://modernizr.com/\n// CONCATENATED MODULE: ./src/vanilla/index.js\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"VANILLA_FEATURE_TESTS\", function() { return VANILLA_FEATURE_TESTS; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HyDrawer\", function() { return vanilla_HyDrawer; });\n/* concated harmony reexport */__webpack_require__.d(__webpack_exports__, \"Set\", function() { return _Set; });\nvar vanilla__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction vanilla__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction vanilla__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction vanilla__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// # src / vanilla / index.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// import 'core-js/fn/array/from';\n\n\n\n\n\n\n\nvar VANILLA_FEATURE_TESTS = MIXIN_FEATURE_TESTS;\n\n\n\nvar vanilla_HyDrawer = function (_drawerMixin) {\n  vanilla__inherits(HyDrawer, _drawerMixin);\n\n  function HyDrawer() {\n    vanilla__classCallCheck(this, HyDrawer);\n\n    return vanilla__possibleConstructorReturn(this, (HyDrawer.__proto__ || Object.getPrototypeOf(HyDrawer)).apply(this, arguments));\n  }\n\n  vanilla__createClass(HyDrawer, [{\n    key: \"setupShadowDOM\",\n    value: function setupShadowDOM(el) {\n      if (!el) throw Error(\"No element provided\");\n\n      var df = new DocumentFragment();\n      df.appendChild(createElement(\"div\", { class: \"hy-drawer-scrim\" }));\n      df.appendChild(createElement(\"div\", { class: \"hy-drawer-content\" }, el.children));\n\n      el.appendChild(df);\n\n      return el;\n    }\n  }]);\n\n  return HyDrawer;\n}(mixin_drawerMixin(VanillaComponent));\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar g;\n\n// This works in non-strict mode\ng = function () {\n\treturn this;\n}();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 8532581930d141475160","// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n/*@__PURE__*/ (function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\nexport { _root as root };\n//# sourceMappingURL=root.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/root.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/isFunction.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isObject(x) {\n    return x != null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/isObject.js","/** PURE_IMPORTS_START ._errorObject PURE_IMPORTS_END */\nimport { errorObject } from './errorObject';\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nexport function tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n;\n//# sourceMappingURL=tryCatch.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/tryCatch.js","/** PURE_IMPORTS_START ._util_isArray,._util_isObject,._util_isFunction,._util_tryCatch,._util_errorObject,._util_UnsubscriptionError PURE_IMPORTS_END */\nimport { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport var Subscription = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            var trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Subscription.js","/** PURE_IMPORTS_START .._Subscriber,.._symbol_rxSubscriber,.._Observer PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/toSubscriber.js","/* tslint:disable:no-empty */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function noop() { }\n//# sourceMappingURL=noop.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/noop.js","/** PURE_IMPORTS_START ._noop PURE_IMPORTS_END */\nimport { noop } from './noop';\n/* tslint:enable:max-line-length */\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\n/* @internal */\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/pipe.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/isScheduler.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/isPromise.js","/** PURE_IMPORTS_START ._root,._isArrayLike,._isPromise,._isObject,.._Observable,.._symbol_iterator,.._InnerSubscriber,.._symbol_observable PURE_IMPORTS_END */\nimport { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        }\n        else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    }\n    else if (isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    }\n    else if (isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) { return destination.error(err); })\n            .then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root.setTimeout(function () { throw err; });\n        });\n        return destination;\n    }\n    else if (result && typeof result[Symbol_iterator] === 'function') {\n        var iterator = result[Symbol_iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    }\n    else if (result && typeof result[Symbol_observable] === 'function') {\n        var obs = result[Symbol_observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = (\"You provided \" + value + \" where a stream was expected.\")\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\n//# sourceMappingURL=subscribeToResult.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/subscribeToResult.js","/** PURE_IMPORTS_START .._util_isScheduler,.._util_isArray,._ArrayObservable,.._operators_combineLatest PURE_IMPORTS_END */\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from './ArrayObservable';\nimport { CombineLatestOperator } from '../operators/combineLatest';\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    var scheduler = null;\n    if (isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator(project));\n}\n//# sourceMappingURL=combineLatest.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/combineLatest.js","/** PURE_IMPORTS_START .._Observable,.._util_tryCatch,.._util_isFunction,.._util_errorObject,.._Subscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nvar toString = Object.prototype.toString;\nfunction isNodeStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isNodeList(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\nfunction isHTMLCollection(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\nfunction isEventTarget(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var FromEventObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(FromEventObservable, _super);\n    function FromEventObservable(sourceObj, eventName, selector, options) {\n        _super.call(this);\n        this.sourceObj = sourceObj;\n        this.eventName = eventName;\n        this.selector = selector;\n        this.options = options;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Creates an Observable that emits events of a specific type coming from the\n     * given event target.\n     *\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n     * EventEmitter events or others.</span>\n     *\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n     *\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\n     * for registering event handler functions. As a second argument it takes string that indicates\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n     * which are described in detail below. If your event target does not match any of the ones listed,\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n     * handler functions have different names, but they all accept a string describing event type\n     * and function itself, which will be called whenever said event happens.\n     *\n     * Every time resulting Observable is subscribed, event handler function will be registered\n     * to event target on given event type. When that event fires, value\n     * passed as a first argument to registered function will be emitted by output Observable.\n     * When Observable is unsubscribed, function will be unregistered from event target.\n     *\n     * Note that if event target calls registered function with more than one argument, second\n     * and following arguments will not appear in resulting stream. In order to get access to them,\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\n     * passed to event handler. Output Observable will then emit value returned by project function,\n     * instead of the usual value.\n     *\n     * Remember that event targets listed below are checked via duck typing. It means that\n     * no matter what kind of object you have and no matter what environment you work in,\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\n     * of course they behave as was described above). So for example if Node.js library exposes\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n     * a good choice.\n     *\n     * If the API you use is more callback then event handler oriented (subscribed\n     * callback function fires only once and thus there is no need to manually\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n     * instead.\n     *\n     * `fromEvent` supports following types of event targets:\n     *\n     * **DOM EventTarget**\n     *\n     * This is an object with `addEventListener` and `removeEventListener` methods.\n     *\n     * In the browser, `addEventListener` accepts - apart from event type string and event\n     * handler function arguments - optional third parameter, which is either an object or boolean,\n     * both used for additional configuration how and when passed function will be called. When\n     * `fromEvent` is used with event target of that type, you can provide this values\n     * as third parameter as well.\n     *\n     * **Node.js EventEmitter**\n     *\n     * An object with `addListener` and `removeListener` methods.\n     *\n     * **JQuery-style event target**\n     *\n     * An object with `on` and `off` methods\n     *\n     * **DOM NodeList**\n     *\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n     *\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n     * it contains and install event handler function in every of them. When returned Observable\n     * is unsubscribed, function will be removed from all Nodes.\n     *\n     * **DOM HtmlCollection**\n     *\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n     * installed and removed in each of elements.\n     *\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\n     * clicks.subscribe(x => console.log(x));\n     *\n     * // Results in:\n     * // MouseEvent object logged to console every time a click\n     * // occurs on the document.\n     *\n     *\n     * @example <caption>Use addEventListener with capture option</caption>\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n     *                                                                          // which will be passed to addEventListener\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n     *\n     * clicksInDocument.subscribe(() => console.log('document'));\n     * clicksInDiv.subscribe(() => console.log('div'));\n     *\n     * // By default events bubble UP in DOM tree, so normally\n     * // when we would click on div in document\n     * // \"div\" would be logged first and then \"document\".\n     * // Since we specified optional `capture` option, document\n     * // will catch event when it goes DOWN DOM tree, so console\n     * // will log \"document\" and then \"div\".\n     *\n     * @see {@link bindCallback}\n     * @see {@link bindNodeCallback}\n     * @see {@link fromEventPattern}\n     *\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n     * @param {string} eventName The event name of interest, being emitted by the\n     * `target`.\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEvent\n     * @owner Observable\n     */\n    FromEventObservable.create = function (target, eventName, options, selector) {\n        if (isFunction(options)) {\n            selector = options;\n            options = undefined;\n        }\n        return new FromEventObservable(target, eventName, selector, options);\n    };\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n        var unsubscribe;\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n            }\n        }\n        else if (isEventTarget(sourceObj)) {\n            var source_1 = sourceObj;\n            sourceObj.addEventListener(eventName, handler, options);\n            unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };\n        }\n        else if (isJQueryStyleEventEmitter(sourceObj)) {\n            var source_2 = sourceObj;\n            sourceObj.on(eventName, handler);\n            unsubscribe = function () { return source_2.off(eventName, handler); };\n        }\n        else if (isNodeStyleEventEmitter(sourceObj)) {\n            var source_3 = sourceObj;\n            sourceObj.addListener(eventName, handler);\n            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\n        }\n        else {\n            throw new TypeError('Invalid event target');\n        }\n        subscriber.add(new Subscription(unsubscribe));\n    };\n    FromEventObservable.prototype._subscribe = function (subscriber) {\n        var sourceObj = this.sourceObj;\n        var eventName = this.eventName;\n        var options = this.options;\n        var selector = this.selector;\n        var handler = selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var result = tryCatch(selector).apply(void 0, args);\n            if (result === errorObject) {\n                subscriber.error(errorObject.e);\n            }\n            else {\n                subscriber.next(result);\n            }\n        } : function (e) { return subscriber.next(e); };\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n    };\n    return FromEventObservable;\n}(Observable));\n//# sourceMappingURL=FromEventObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/FromEventObservable.js","/** PURE_IMPORTS_START .._util_subscribeToResult,.._OuterSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nexport var MergeMapOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var MergeMapSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=mergeMap.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/mergeMap.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/identity.js","/** PURE_IMPORTS_START ._mergeMap,.._util_identity PURE_IMPORTS_END */\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll(concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return mergeMap(identity, null, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/mergeAll.js","/** PURE_IMPORTS_START .._Observable,._ArrayObservable,.._util_isScheduler,.._operators_mergeAll PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(new ArrayObservable(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/merge.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nvar DoOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DoSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        _super.call(this, destination);\n        var safeSubscriber = new Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        this.add(safeSubscriber);\n        this.safeSubscriber = safeSubscriber;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber));\n//# sourceMappingURL=tap.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/tap.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nvar FilterOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber));\n//# sourceMappingURL=filter.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/filter.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexport var MapOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=map.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/map.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise() {\n    return function (source) { return source.lift(new PairwiseOperator()); };\n}\nvar PairwiseOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function PairwiseOperator() {\n    }\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasPrev = false;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber));\n//# sourceMappingURL=pairwise.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/pairwise.js","/** PURE_IMPORTS_START .._Subject,.._util_tryCatch,.._util_errorObject,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen(notifier) {\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\n}\nvar RepeatWhenOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatWhenSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            else if (this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.notifications = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this.notifications = notifications;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject();\n        var retries = tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=repeatWhen.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/repeatWhen.js","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample(notifier) {\n    return function (source) { return source.lift(new SampleOperator(notifier)); };\n}\nvar SampleOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        _super.apply(this, arguments);\n        this.hasValue = false;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=sample.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/sample.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=refCount.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/refCount.js","/** PURE_IMPORTS_START .._observable_ConnectableObservable PURE_IMPORTS_END */\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexport var MulticastOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\n//# sourceMappingURL=multicast.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/multicast.js","/** PURE_IMPORTS_START ._multicast,._refCount,.._Subject PURE_IMPORTS_END */\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\nfunction shareSubjectFactory() {\n    return new Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share() {\n    return function (source) { return refCount()(multicast(shareSubjectFactory)(source)); };\n}\n;\n//# sourceMappingURL=share.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/share.js","/** PURE_IMPORTS_START .._util_root,.._Observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { root } from '../util/root';\nimport { Observable } from '../Observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var PromiseObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        _super.call(this);\n        this.promise = promise;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {PromiseLike<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n        else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable));\nfunction dispatchNext(arg) {\n    var value = arg.value, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n//# sourceMappingURL=PromiseObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/PromiseObservable.js","/** PURE_IMPORTS_START .._util_root,.._Observable,.._symbol_iterator PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { root } from '../util/root';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var IteratorObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(IteratorObservable, _super);\n    function IteratorObservable(iterator, scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n        if (iterator == null) {\n            throw new Error('iterator cannot be null.');\n        }\n        this.iterator = getIterator(iterator);\n    }\n    IteratorObservable.create = function (iterator, scheduler) {\n        return new IteratorObservable(iterator, scheduler);\n    };\n    IteratorObservable.dispatch = function (state) {\n        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;\n        if (hasError) {\n            subscriber.error(state.error);\n            return;\n        }\n        var result = iterator.next();\n        if (result.done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(result.value);\n        state.index = index + 1;\n        if (subscriber.closed) {\n            if (typeof iterator.return === 'function') {\n                iterator.return();\n            }\n            return;\n        }\n        this.schedule(state);\n    };\n    IteratorObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n                index: index, iterator: iterator, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                var result = iterator.next();\n                if (result.done) {\n                    subscriber.complete();\n                    break;\n                }\n                else {\n                    subscriber.next(result.value);\n                }\n                if (subscriber.closed) {\n                    if (typeof iterator.return === 'function') {\n                        iterator.return();\n                    }\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return IteratorObservable;\n}(Observable));\nvar StringIterator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function StringIterator(str, idx, len) {\n        if (idx === void 0) {\n            idx = 0;\n        }\n        if (len === void 0) {\n            len = str.length;\n        }\n        this.str = str;\n        this.idx = idx;\n        this.len = len;\n    }\n    StringIterator.prototype[Symbol_iterator] = function () { return (this); };\n    StringIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.str.charAt(this.idx++)\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return StringIterator;\n}());\nvar ArrayIterator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ArrayIterator(arr, idx, len) {\n        if (idx === void 0) {\n            idx = 0;\n        }\n        if (len === void 0) {\n            len = toLength(arr);\n        }\n        this.arr = arr;\n        this.idx = idx;\n        this.len = len;\n    }\n    ArrayIterator.prototype[Symbol_iterator] = function () { return this; };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return ArrayIterator;\n}());\nfunction getIterator(obj) {\n    var i = obj[Symbol_iterator];\n    if (!i && typeof obj === 'string') {\n        return new StringIterator(obj);\n    }\n    if (!i && obj.length !== undefined) {\n        return new ArrayIterator(obj);\n    }\n    if (!i) {\n        throw new TypeError('object is not iterable');\n    }\n    return obj[Symbol_iterator]();\n}\nvar maxSafeInteger = /*@__PURE__*/ Math.pow(2, 53) - 1;\nfunction toLength(o) {\n    var len = +o.length;\n    if (isNaN(len)) {\n        return 0;\n    }\n    if (len === 0 || !numberIsFinite(len)) {\n        return len;\n    }\n    len = sign(len) * Math.floor(Math.abs(len));\n    if (len <= 0) {\n        return 0;\n    }\n    if (len > maxSafeInteger) {\n        return maxSafeInteger;\n    }\n    return len;\n}\nfunction numberIsFinite(value) {\n    return typeof value === 'number' && root.isFinite(value);\n}\nfunction sign(value) {\n    var valueAsNumber = +value;\n    if (valueAsNumber === 0) {\n        return valueAsNumber;\n    }\n    if (isNaN(valueAsNumber)) {\n        return valueAsNumber;\n    }\n    return valueAsNumber < 0 ? -1 : 1;\n}\n//# sourceMappingURL=IteratorObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/IteratorObservable.js","/** PURE_IMPORTS_START ._mergeAll PURE_IMPORTS_END */\nimport { mergeAll } from './mergeAll';\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll() {\n    return mergeAll(1);\n}\n//# sourceMappingURL=concatAll.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/concatAll.js","/** PURE_IMPORTS_START .._util_isScheduler,._of,._from,.._operators_concatAll PURE_IMPORTS_END */\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n        return from(observables[0]);\n    }\n    return concatAll()(of.apply(void 0, observables));\n}\n//# sourceMappingURL=concat.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/concat.js","/** PURE_IMPORTS_START .._observable_ArrayObservable,.._observable_ScalarObservable,.._observable_EmptyObservable,.._observable_concat,.._util_isScheduler PURE_IMPORTS_END */\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var scheduler = array[array.length - 1];\n        if (isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len === 1) {\n            return concatStatic(new ScalarObservable(array[0], scheduler), source);\n        }\n        else if (len > 1) {\n            return concatStatic(new ArrayObservable(array, scheduler), source);\n        }\n        else {\n            return concatStatic(new EmptyObservable(scheduler), source);\n        }\n    };\n}\n//# sourceMappingURL=startWith.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/startWith.js","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap(project, resultSelector) {\n    return function switchMapOperatorFunction(source) {\n        return source.lift(new SwitchMapOperator(project, resultSelector));\n    };\n}\nvar SwitchMapOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SwitchMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=switchMap.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/switchMap.js","/** PURE_IMPORTS_START .._Subscriber,.._util_ArgumentOutOfRangeError,.._observable_EmptyObservable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take(count) {\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nvar TakeOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=take.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/take.js","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nvar TakeUntilOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.add(subscribeToResult(this, notifier));\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=takeUntil.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/takeUntil.js","/** PURE_IMPORTS_START .._scheduler_async,._map PURE_IMPORTS_END */\nimport { async } from '../scheduler/async';\nimport { map } from './map';\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp(scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return map(function (value) { return new Timestamp(value, scheduler.now()); });\n    // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\nexport var Timestamp = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function Timestamp(value, timestamp) {\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n    return Timestamp;\n}());\n;\n//# sourceMappingURL=timestamp.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/timestamp.js","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nvar WithLatestFromOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        _super.call(this, destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        var len = observables.length;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            this.add(subscribeToResult(this, observable, observable, i));\n        }\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/withLatestFrom.js","import { Observable } from 'rxjs/_esm5/Observable'; // eslint-disable-line\n\n/**\n * Creates an observable that emits samples from an easing function on every animation frame\n * for a duration `d` ms.\n *\n * The first value will be emitted on the next animation frame,\n * and is the value of the easing function at `t = 0`.\n * The final value is guaranteed to be the easing function at `t = d`.\n * The observable completes one frame after the final value was emitted.\n *\n * @param {function(t: number, b: number, c: number, d: number, [s]: number): number} easingFunction\n * - the easing fuction to sample from; can use any of Robert Penner's easing functions\n     (without the `x` paramter)\n * @param {number} b - beginning value and 2nd parameter of the easing function\n * @param {number} c - change in value (or end value) and 3rd parameter of the easing function\n * @param {number} d - total duration of the tween in ms and 4th parameter of the easing function\n * @param {number} [s] - 5th parameter of the easing function (optional)\n * @return {Observable<number>} - an observable emitting samples of the easing function on\n *   animation frames for `d` ms.\n */\nexport function createTween(easingFunction, b, c, d, s) {\n  return Observable.create((observer) => {\n    let startTime;\n    let id = requestAnimationFrame(function sample(time) {\n      startTime = startTime || time;\n      const t = time - startTime;\n      if (t < d) {\n        observer.next(easingFunction(t, b, c, d, s));\n        id = requestAnimationFrame(sample);\n      } else {\n        observer.next(easingFunction(d, b, c, d, s));\n        id = requestAnimationFrame(() => observer.complete());\n      }\n    });\n    return () => { if (id) { cancelAnimationFrame(id); } };\n  });\n}\n\nexport default createTween;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs-create-tween/esm/index.js","// # src / common.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport function easeOutSine(t, b, c, d) {\n  return c * Math.sin(t / d * (Math.PI / 2)) + b; // eslint-disable-line\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/common.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo(value) {\n    return function (source) { return source.lift(new MapToOperator(value)); };\n}\nvar MapToOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        _super.call(this, destination);\n        this.value = value;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber));\n//# sourceMappingURL=mapTo.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/mapTo.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile(predicate) {\n    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };\n}\nvar SkipWhileOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.skipping = true;\n        this.index = 0;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skipWhile.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/skipWhile.js","var _Set = typeof Set !== 'undefined' && new Set([1]).size === 1 ? Set : function () {\n  var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  a = a.filter(function (x, i) {\n    return i === a.indexOf(x);\n  });\n  a.size = a.length;\n  a.has = function (x) {\n    return a.indexOf(x) > -1;\n  };\n  a.add = function (x) {\n    if (!a.has(x)) {\n      a.size++;a.push(x);\n    }return a;\n  };\n  a.delete = function (x) {\n    var t = void 0;if (t = a.has(x)) {\n      a.size--;a.splice(a.indexOf(x), 1);\n    }return t;\n  };\n  a.clear = function () {\n    while (a.pop()) {}a.size = 0;\n  };\n  return a;\n};\n\nexport { _Set as Set };\n\n\n// WEBPACK FOOTER //\n// ./node_modules/qd-set/esm/index.js","// # src / vanilla.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\nimport { Set } from \"qd-set\";\n\nexport { Set };\n\nexport class VanillaComponent {\n  constructor(el, props) {\n    this.setupComponent(el, props);\n    this.connectComponent();\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/hy-component/src/vanilla.js","export const createCreateElement = (createElement, createTextNode) => {\n  function appendChild(c) {\n    if (typeof c === 'string') this.appendChild(createTextNode(c));\n    else this.appendChild(c);\n  }\n\n  return (tagName, attributes, children) => {\n    const el = createElement(tagName);\n\n    for (const attr in attributes) el.setAttribute(attr, attributes[attr]);\n\n    if (children) {\n      if (typeof children === 'string') {\n        el.appendChild(createTextNode(children));\n      } else if (children.length) {\n        const copy = Array.prototype.slice.call(children, 0);\n        Array.prototype.forEach.call(copy, appendChild, el);\n      } else {\n        el.appendChild(children);\n      }\n    }\n\n    return el;\n  };\n};\n\nexport default createCreateElement;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/create-element-x/factory.js","import { createCreateElement } from './factory';\n\nexport const createElement = createCreateElement(\n  document.createElement.bind(document),\n  document.createTextNode.bind(document),\n);\nexport default createElement;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/create-element-x/library.js","// # src / component.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n// import 'core-js/fn/array/for-each';\n// import 'core-js/fn/object/assign';\n// import 'core-js/fn/object/define-property';\n// import 'core-js/fn/object/keys';\n\nimport { Set } from \"qd-set\";\n\nexport { Set };\n\nexport const COMPONENT_FEATURE_TESTS = new Set([\"customevent\"]);\n\nconst aSymbol = Symbol || (x => `_${x}`);\nconst sRoot = aSymbol(\"sroot\");\nconst sState = aSymbol(\"state\");\n\nwindow.process = window.process || {};\nwindow.process.env = window.process.env || {};\n\nclass Component {}\n\nexport const componentMixin = (C = Component) =>\n  class extends C {\n    get sroot() {\n      return this.getRoot();\n    }\n\n    get el() {\n      return this.getEl();\n    }\n\n    setupComponent(el, state) {\n      const { defaults } = this.constructor;\n\n      if (process.env.DEBUG) {\n        const { componentName, sideEffects } = this.constructor;\n        if (!componentName) {\n          console.warn(\n            \"Component needs to have a name, e.g. `my-tag`. To set a name, provide a static getter called `componentName`.\"\n          );\n        }\n        if (!defaults) {\n          console.warn(\n            \"No default properties provided. Implement a static getter called `defaults`.\"\n          );\n        }\n        if (!sideEffects) {\n          console.warn(\"No side effects provided. Implement a static getter called `sideEffects`.\");\n        }\n      }\n\n      this[sState] = Object.assign({}, defaults, state);\n      this.setupProperties(this);\n      this[sRoot] = this.setupShadowDOM(el);\n    }\n\n    setupShadowDOM(el) {\n      return el;\n    }\n\n    connectComponent() {}\n\n    disconnectComponent() {}\n\n    adoptComponent() {}\n\n    getRoot() {\n      return this[sRoot];\n    }\n\n    getEl() {\n      return this[sRoot];\n    }\n\n    fireEvent(eventName, data) {\n      const { componentName } = this.constructor;\n      const event = new CustomEvent(`${componentName}-${eventName}`, data);\n      this.el.dispatchEvent(event);\n    }\n\n    setInternalState(key, value) {\n      this[sState][key] = value;\n    }\n\n    setupProperties() {\n      const { sideEffects } = this.constructor;\n\n      Object.keys(this[sState]).forEach(key => {\n        const sideEffect = sideEffects[key];\n        this.setupProperty(key, sideEffect);\n      });\n    }\n\n    setupProperty(key, sideEffect) {\n      Object.defineProperty(this, key, {\n        get: () => this[sState][key],\n        set: value => {\n          const oldValue = this[sState][key];\n          this.setInternalState(key, value);\n          if (sideEffect) sideEffect.call(this, value, oldValue);\n        },\n        enumerable: true,\n        configurable: true\n      });\n    }\n  };\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/hy-component/src/component.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/isArray.js","// typeof any so that it we don't have to cast when comparing a result to the error object\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/errorObject.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport var UnsubscriptionError = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\n//# sourceMappingURL=UnsubscriptionError.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/UnsubscriptionError.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Observer.js","/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\nimport { root } from '../util/root';\nvar Symbol = root.Symbol;\nexport var rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    /*@__PURE__*/ Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexport var $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/symbol/rxSubscriber.js","/** PURE_IMPORTS_START ._util_isFunction,._Subscription,._Observer,._symbol_rxSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { isFunction } from './util/isFunction';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport var Subscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    if (destinationOrNext instanceof Subscriber) {\n                        this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n                        this.destination = destinationOrNext;\n                        this.destination.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriberSymbol] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=Subscriber.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Subscriber.js","/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\nimport { root } from '../util/root';\nexport function getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexport var observable = /*@__PURE__*/ getSymbolObservable(root);\n/**\n * @deprecated use observable instead\n */\nexport var $$observable = observable;\n//# sourceMappingURL=observable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/symbol/observable.js","/** PURE_IMPORTS_START ._util_root,._util_toSubscriber,._symbol_observable,._util_pipe PURE_IMPORTS_END */\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport var Observable = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n                PromiseCtor = root.Rx.config.Promise;\n            }\n            else if (root.Promise) {\n                PromiseCtor = root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n                PromiseCtor = root.Rx.config.Promise;\n            }\n            else if (root.Promise) {\n                PromiseCtor = root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\n//# sourceMappingURL=Observable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Observable.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport var ObjectUnsubscribedError = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/ObjectUnsubscribedError.js","/** PURE_IMPORTS_START ._Subscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscription } from './Subscription';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var SubjectSubscription = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription));\n//# sourceMappingURL=SubjectSubscription.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/SubjectSubscription.js","/** PURE_IMPORTS_START ._Observable,._Subscriber,._Subscription,._util_ObjectUnsubscribedError,._SubjectSubscription,._symbol_rxSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n/**\n * @class SubjectSubscriber<T>\n */\nexport var SubjectSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber));\n/**\n * @class Subject<T>\n */\nexport var Subject = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriberSymbol] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable));\n/**\n * @class AnonymousSubject<T>\n */\nexport var AnonymousSubject = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\n//# sourceMappingURL=Subject.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Subject.js","// # src / rxjs.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\nimport { Subject } from \"rxjs/_esm5/Subject\";\n\nexport const rxjsMixin = C =>\n  class extends C {\n    static get sideEffects() {}\n\n    setupComponent(el, opts) {\n      this.subjects = {};\n      const sideEffects = {};\n\n      this.subjects.disconnect = new Subject();\n      this.subjects.adapt = new Subject();\n\n      const { types } = this.constructor;\n      Object.keys(types).map(key => {\n        this.subjects[key] = new Subject();\n        sideEffects[key] = x => this.subjects[key].next(x);\n      });\n\n      Object.defineProperty(this.constructor, \"sideEffects\", {\n        get: () => sideEffects,\n        set: () => {},\n        enumerable: true,\n        configurable: true\n      });\n\n      super.setupComponent(el, opts);\n    }\n\n    connectComponent() {\n      super.connectComponent();\n\n      this.subjects.adapt.next(document); // TODO: should rename to document?\n\n      const { types } = this.constructor;\n      Object.keys(types).map(key => {\n        this.subjects[key].next(this[key]);\n      });\n    }\n\n    disconnectComponent() {\n      this.subjects.disconnect.next({});\n      super.disconnectComponent();\n    }\n\n    adaptComponent() {\n      this.subjects.adapt.next(document);\n      super.adaptComponent();\n    }\n  };\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/hy-component/src/rxjs.js","export const array = (attr) => {\n  if (attr == null) return null;\n\n  const str = attr.trim()\n    .replace(/^\\[?(.*?)\\]?$/, '$1')\n    .split(',')\n    .map(x => x.trim());\n\n  return str || null;\n};\n\narray.stringify = a => (a && a.length > 0 ? a.join(',') : null);\n\nexport default array;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/array.js","import { array } from './array';\n\nexport const arrayOf = (type) => {\n  const f = (attr) => {\n    if (attr == null) return null;\n    const a = array(attr).map(type);\n    if (a.reduce((r, x) => r && x !== null, true)) {\n      return a;\n    }\n    return null;\n  };\n\n  f.stringify = (a) => {\n    const a2 = a && a.map && a.map(type.stringify);\n    if (a2 && a2.reduce((r, x) => r && x !== null, true)) {\n      return array.stringify(a2);\n    }\n    return null;\n  };\n\n  return f;\n};\n\nexport default arrayOf;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/array-of.js","export const bool = (attr) => {\n  if (attr == null) return false;\n  const attr2 = (attr.trim && attr.trim()) || attr;\n  return !(\n    attr2 === 'false' ||\n    attr2 === 'null' ||\n    attr2 === 'undefined' ||\n    attr2 === '0' ||\n    attr2 === false\n  );\n};\n\nbool.stringify = b => (b ? '' : null);\n\nexport default bool;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/bool.js","export const number = (attr) => {\n  if (attr == null) return null;\n  return Number(attr);\n};\n\nnumber.stringify = (n) => {\n  if (n == null) return null;\n  return `${n}`;\n};\n\nexport default number;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/number.js","export const oneOf = (alts) => {\n  const f = (attr) => {\n    if (attr == null) return null;\n\n    const i = alts.indexOf(attr);\n    if (process.env.DEBUG && i === -1) {\n      console.warn(`'${attr}' is not 'oneOf': ${alts.join(', ')}`);\n    }\n\n    return i > -1 ? alts[i] : null;\n  };\n\n  f.stringify = o => (alts.indexOf(o) !== -1 ? o : null);\n\n  return f;\n};\n\nexport default oneOf;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/one-of.js","export const regex = (attr) => {\n  if (attr == null) return null;\n  const attr2 = (attr.trim && attr.trim()) || attr;\n  const match = attr2.match(/^\\/?(.*?)(\\/([gimy]*))?$/);\n  return new RegExp(match[1], match[3]);\n};\n\nregex.stringify = r => (r && r.toString()) || null;\n\nexport default regex;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/regex.js","export const string = attr => attr;\n\nstring.stringify = s => s;\n\nexport default string;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/string.js","/** PURE_IMPORTS_START .._Observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var ScalarObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        _super.call(this);\n        this.value = value;\n        this.scheduler = scheduler;\n        this._isScalar = true;\n        if (scheduler) {\n            this._isScalar = false;\n        }\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done, value = state.value, subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable));\n//# sourceMappingURL=ScalarObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/ScalarObservable.js","/** PURE_IMPORTS_START .._Observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var EmptyObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following to the console:\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\n     * // x will occur every 1000ms\n     * // if x % 2 is equal to 1 print abc\n     * // if x % 2 is not equal to 1 nothing will be output\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        }\n        else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable));\n//# sourceMappingURL=EmptyObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/EmptyObservable.js","/** PURE_IMPORTS_START .._Observable,._ScalarObservable,._EmptyObservable,.._util_isScheduler PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isScheduler } from '../util/isScheduler';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var ArrayObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable));\n//# sourceMappingURL=ArrayObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/ArrayObservable.js","/** PURE_IMPORTS_START ._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var OuterSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber));\n//# sourceMappingURL=OuterSubscriber.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/OuterSubscriber.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArrayLike.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/isArrayLike.js","/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\nimport { root } from '../util/root';\nexport function symbolIteratorPonyfill(root) {\n    var Symbol = root.Symbol;\n    if (typeof Symbol === 'function') {\n        if (!Symbol.iterator) {\n            Symbol.iterator = Symbol('iterator polyfill');\n        }\n        return Symbol.iterator;\n    }\n    else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nexport var iterator = /*@__PURE__*/ symbolIteratorPonyfill(root);\n/**\n * @deprecated use iterator instead\n */\nexport var $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/symbol/iterator.js","/** PURE_IMPORTS_START ._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var InnerSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber));\n//# sourceMappingURL=InnerSubscriber.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/InnerSubscriber.js","/** PURE_IMPORTS_START .._observable_ArrayObservable,.._util_isArray,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nvar none = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) { return source.lift.call(new ArrayObservable([source].concat(observables)), new CombineLatestOperator(project)); };\n}\nexport var CombineLatestOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var CombineLatestSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        _super.call(this, destination);\n        this.project = project;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(none);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === none ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=combineLatest.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/combineLatest.js","/** PURE_IMPORTS_START .._Observable,.._util_subscribeToResult,.._OuterSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var DeferObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DeferObservable, _super);\n    function DeferObservable(observableFactory) {\n        _super.call(this);\n        this.observableFactory = observableFactory;\n    }\n    /**\n     * Creates an Observable that, on subscribe, calls an Observable factory to\n     * make an Observable for each new Observer.\n     *\n     * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n     * is subscribed.\n     * </span>\n     *\n     * <img src=\"./img/defer.png\" width=\"100%\">\n     *\n     * `defer` allows you to create the Observable only when the Observer\n     * subscribes, and create a fresh Observable for each Observer. It waits until\n     * an Observer subscribes to it, and then it generates an Observable,\n     * typically with an Observable factory function. It does this afresh for each\n     * subscriber, so although each subscriber may think it is subscribing to the\n     * same Observable, in fact each subscriber gets its own individual\n     * Observable.\n     *\n     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n     * var clicksOrInterval = Rx.Observable.defer(function () {\n     *   if (Math.random() > 0.5) {\n     *     return Rx.Observable.fromEvent(document, 'click');\n     *   } else {\n     *     return Rx.Observable.interval(1000);\n     *   }\n     * });\n     * clicksOrInterval.subscribe(x => console.log(x));\n     *\n     * // Results in the following behavior:\n     * // If the result of Math.random() is greater than 0.5 it will listen\n     * // for clicks anywhere on the \"document\"; when document is clicked it\n     * // will log a MouseEvent object to the console. If the result is less\n     * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n     *\n     * @see {@link create}\n     *\n     * @param {function(): SubscribableOrPromise} observableFactory The Observable\n     * factory function to invoke for each Observer that subscribes to the output\n     * Observable. May also return a Promise, which will be converted on the fly\n     * to an Observable.\n     * @return {Observable} An Observable whose Observers' subscriptions trigger\n     * an invocation of the given Observable factory function.\n     * @static true\n     * @name defer\n     * @owner Observable\n     */\n    DeferObservable.create = function (observableFactory) {\n        return new DeferObservable(observableFactory);\n    };\n    DeferObservable.prototype._subscribe = function (subscriber) {\n        return new DeferSubscriber(subscriber, this.observableFactory);\n    };\n    return DeferObservable;\n}(Observable));\nvar DeferSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DeferSubscriber, _super);\n    function DeferSubscriber(destination, factory) {\n        _super.call(this, destination);\n        this.factory = factory;\n        this.tryDefer();\n    }\n    DeferSubscriber.prototype.tryDefer = function () {\n        try {\n            this._callFactory();\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    DeferSubscriber.prototype._callFactory = function () {\n        var result = this.factory();\n        if (result) {\n            this.add(subscribeToResult(this, result));\n        }\n    };\n    return DeferSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=DeferObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/DeferObservable.js","/** PURE_IMPORTS_START ._DeferObservable PURE_IMPORTS_END */\nimport { DeferObservable } from './DeferObservable';\nexport var defer = DeferObservable.create;\n//# sourceMappingURL=defer.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/defer.js","/** PURE_IMPORTS_START ._FromEventObservable PURE_IMPORTS_END */\nimport { FromEventObservable } from './FromEventObservable';\nexport var fromEvent = FromEventObservable.create;\n//# sourceMappingURL=fromEvent.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/fromEvent.js","/** PURE_IMPORTS_START .._Observable,.._util_noop PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { noop } from '../util/noop';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var NeverObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(NeverObservable, _super);\n    function NeverObservable() {\n        _super.call(this);\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer.\n     *\n     * <span class=\"informal\">An Observable that never emits anything.</span>\n     *\n     * <img src=\"./img/never.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that emits\n     * neither values nor errors nor the completion notification. It can be used\n     * for testing purposes or for composing with other Observables. Please note\n     * that by never emitting a complete notification, this Observable keeps the\n     * subscription from being disposed automatically. Subscriptions need to be\n     * manually disposed.\n     *\n     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n     * function info() {\n     *   console.log('Will not be called');\n     * }\n     * var result = Rx.Observable.never().startWith(7);\n     * result.subscribe(x => console.log(x), info, info);\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @return {Observable} A \"never\" Observable: never emits anything.\n     * @static true\n     * @name never\n     * @owner Observable\n     */\n    NeverObservable.create = function () {\n        return new NeverObservable();\n    };\n    NeverObservable.prototype._subscribe = function (subscriber) {\n        noop();\n    };\n    return NeverObservable;\n}(Observable));\n//# sourceMappingURL=NeverObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/NeverObservable.js","/** PURE_IMPORTS_START ._NeverObservable PURE_IMPORTS_END */\nimport { NeverObservable } from './NeverObservable';\nexport var never = NeverObservable.create;\n//# sourceMappingURL=never.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/never.js","/** PURE_IMPORTS_START .._Subject,.._Observable,.._Subscriber,.._Subscription,.._operators_refCount PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n/**\n * @class ConnectableObservable<T>\n */\nexport var ConnectableObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ConnectableObservable, _super);\n    function ConnectableObservable(source, subjectFactory) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._refCount = 0;\n        this._isComplete = false;\n    }\n    ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return higherOrderRefCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable));\nvar connectableProto = ConnectableObservable.prototype;\nexport var connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber));\nvar RefCountOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/ConnectableObservable.js","/** PURE_IMPORTS_START ._ArrayObservable PURE_IMPORTS_END */\nimport { ArrayObservable } from './ArrayObservable';\nexport var of = ArrayObservable.of;\n//# sourceMappingURL=of.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/of.js","/** PURE_IMPORTS_START .._Observable,._ScalarObservable,._EmptyObservable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var ArrayLikeObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ArrayLikeObservable, _super);\n    function ArrayLikeObservable(arrayLike, scheduler) {\n        _super.call(this);\n        this.arrayLike = arrayLike;\n        this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            this._isScalar = true;\n            this.value = arrayLike[0];\n        }\n    }\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n        var length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable();\n        }\n        else if (length === 1) {\n            return new ScalarObservable(arrayLike[0], scheduler);\n        }\n        else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    };\n    ArrayLikeObservable.dispatch = function (state) {\n        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;\n        var length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < length && !subscriber.closed; i++) {\n                subscriber.next(arrayLike[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayLikeObservable;\n}(Observable));\n//# sourceMappingURL=ArrayLikeObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/ArrayLikeObservable.js","/** PURE_IMPORTS_START ._Observable PURE_IMPORTS_END */\nimport { Observable } from './Observable';\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport var Notification = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable.of(this.value);\n            case 'E':\n                return Observable.throw(this.error);\n            case 'C':\n                return Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\n//# sourceMappingURL=Notification.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Notification.js","/** PURE_IMPORTS_START .._Subscriber,.._Notification PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn(scheduler, delay) {\n    if (delay === void 0) {\n        delay = 0;\n    }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nexport var ObserveOnOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var ObserveOnSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber));\nexport var ObserveOnMessage = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\n//# sourceMappingURL=observeOn.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/observeOn.js","/** PURE_IMPORTS_START .._util_isArray,.._util_isArrayLike,.._util_isPromise,._PromiseObservable,._IteratorObservable,._ArrayObservable,._ArrayLikeObservable,.._symbol_iterator,.._Observable,.._operators_observeOn,.._symbol_observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from './IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable } from '../Observable';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var FromObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        _super.call(this, null);\n        this.ish = ish;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 10 20 30\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 3 6 12 24 48 96 192 384 768 1536\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[Symbol_observable] === 'function') {\n                if (ish instanceof Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            }\n            else if (isArray(ish)) {\n                return new ArrayObservable(ish, scheduler);\n            }\n            else if (isPromise(ish)) {\n                return new PromiseObservable(ish, scheduler);\n            }\n            else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable(ish, scheduler);\n            }\n            else if (isArrayLike(ish)) {\n                return new ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n    };\n    FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[Symbol_observable]().subscribe(subscriber);\n        }\n        else {\n            return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable));\n//# sourceMappingURL=FromObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/FromObservable.js","/** PURE_IMPORTS_START ._FromObservable PURE_IMPORTS_END */\nimport { FromObservable } from './FromObservable';\nexport var from = FromObservable.create;\n//# sourceMappingURL=from.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/from.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport var ArgumentOutOfRangeError = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var err = _super.call(this, 'argument out of range');\n        this.name = err.name = 'ArgumentOutOfRangeError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ArgumentOutOfRangeError;\n}(Error));\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/ArgumentOutOfRangeError.js","/** PURE_IMPORTS_START .._Subscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscription } from '../Subscription';\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport var Action = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return this;\n    };\n    return Action;\n}(Subscription));\n//# sourceMappingURL=Action.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/scheduler/Action.js","/** PURE_IMPORTS_START .._util_root,._Action PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { root } from '../util/root';\nimport { Action } from './Action';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var AsyncAction = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action));\n//# sourceMappingURL=AsyncAction.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/scheduler/AsyncAction.js","/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport var Scheduler = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) {\n            now = Scheduler.now;\n        }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\n//# sourceMappingURL=Scheduler.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Scheduler.js","/** PURE_IMPORTS_START .._Scheduler PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Scheduler } from '../Scheduler';\nexport var AsyncScheduler = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler));\n//# sourceMappingURL=AsyncScheduler.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/scheduler/AsyncScheduler.js","/** PURE_IMPORTS_START ._AsyncAction,._AsyncScheduler PURE_IMPORTS_END */\nimport { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexport var async = /*@__PURE__*/ new AsyncScheduler(AsyncAction);\n//# sourceMappingURL=async.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/scheduler/async.js","// # src / mixin / operators.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { never } from \"rxjs/_esm5/observable/never\";\n\nimport { filter } from \"rxjs/_esm5/operators/filter\";\nimport { map } from \"rxjs/_esm5/operators/map\";\nimport { switchMap } from \"rxjs/_esm5/operators/switchMap\";\nimport { withLatestFrom } from \"rxjs/_esm5/operators/withLatestFrom\";\n\n// ### Observable extensions\n// #### Subscribe when\n// This operator is like `filterWhen`, but it will unsubscribe from the source observable\n// when the input observable emits `false`, and re-subscribe when it emits `true`.\nexport const subscribeWhen = p$ => source => {\n  if (process.env.DEBUG && !p$) throw Error();\n  return p$.pipe(switchMap(p => (p ? source : never())));\n};\n\n// #### Filter when\n// This operator is like `filter`, but it takes an observable of booleans as input,\n// instead of a predicate function.\nexport const filterWhen = (p$, ...others) => source => {\n  if (process.env.DEBUG && !p$) throw Error();\n  else if (others.length === 0) {\n    return source.pipe(withLatestFrom(p$), filter(([, p]) => p), map(([x]) => x));\n\n    // When providing more than one observable, the result observable will only emit values\n    // when `every` input observable has emitted a truthy value.\n  } else {\n    return source.pipe(\n      withLatestFrom(p$, ...others),\n      filter(([, ...ps]) => ps.every(p => p)),\n      map(([x]) => x)\n    );\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixin/operators.js","// # src / mixin / calc.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { VELOCITY_THRESHOLD } from \"./constants\";\n\n// Using shorthands for common functions\nconst min = Math.min.bind(Math);\nconst max = Math.max.bind(Math);\n\nexport const calcMixin = C =>\n  class extends C {\n    // #### Is in range?\n    // Given a x-coordinate, `isInRange` will  determine whether it is within range from where\n    // to pull the drawer. The x-coordinate *must* be larger than the lower bound,\n    // but when the drawer is opened it may be anywhere on the screen.\n    // Otherwise it must be below the upper bound.\n    calcIsInRange(clientX, opened) {\n      switch (this.align) {\n        case \"left\":\n          return clientX > this.range[0] && (opened || clientX < this.range[1]);\n        case \"right\":\n          return (\n            clientX < window.innerWidth - this.range[0] &&\n            (opened || clientX > window.innerWidth - this.range[1])\n          );\n        default:\n          throw Error();\n      }\n    }\n\n    // #### Calculate 'Is swipe?'\n    // If the start and end position are not the same x-coordinate, we call it a 'swipe'.\n    // However, if a tap occures during an animation (i.e. `translateX` not in a resting position)\n    // we treat it as a swipe as well. The reasons for this are pretty complex:\n    // Basically, we want users the be able to stop the animation by putting a finger on the screen.\n    // However, if they lift the finger again without swiping, the animation would not continue,\n    // because it would not pass the condition below, unless we introduce the second term.\n    // TODO: reuse isSlidign observable?\n    calcIsSwipe([{ clientX: endX }, { clientX: startX }, translateX]) {\n      return endX !== startX || (translateX > 0 && translateX < this.drawerWidth);\n    }\n\n    // #### Calculate 'Will open?'\n    // Based on current velocity and position of the drawer,\n    // should the drawer slide open, or snap back?\n    // TODO: could incorporate the current open state of the drawer.\n    calcWillOpen([, , translateX, velocity]) {\n      switch (this.align) {\n        case \"left\": {\n          if (velocity > VELOCITY_THRESHOLD) return true;\n          else if (velocity < -VELOCITY_THRESHOLD) return false;\n          else if (translateX >= this.drawerWidth / 2) return true;\n          else return false;\n        }\n        case \"right\": {\n          if (-velocity > VELOCITY_THRESHOLD) return true;\n          else if (-velocity < -VELOCITY_THRESHOLD) return false;\n          else if (translateX <= -this.drawerWidth / 2) return true;\n          else return false;\n        }\n        default:\n          throw Error();\n      }\n    }\n\n    // #### Calculate translate X\n    // Calcuate the current position of the drawer,\n    // by taking the difference between the current and starting postion of the finger,\n    // then adding that difference to the starting position of the drawer.\n    // This way, we avoid the drawer jumping to the finger, when \"catching\" it during an animation.\n    // The function will also clip the position at 0 and the width of the drawer.\n    calcTranslateX(clientX, startX, startTranslateX) {\n      switch (this.align) {\n        case \"left\": {\n          const deltaX = clientX - startX;\n          const translateX = startTranslateX + deltaX;\n          return max(0, min(this.drawerWidth, translateX));\n        }\n        case \"right\": {\n          const deltaX = clientX - startX;\n          const translateX = startTranslateX + deltaX;\n          return min(0, max(-this.drawerWidth, translateX));\n        }\n        default:\n          throw Error();\n      }\n    }\n\n    // #### Get movable drawer width\n    // One feature of hy-drawer is to allow the drawer to \"peek\" over the edge.\n    // This effect is achieved by setting a smaller negative `left` (`right`) CSS property,\n    // than is the width of the drawer,\n    // The 'moveable' part of the drawer, then, is equal to that the inverse of that property.\n    // See [Styling](../../styling.md) for more.\n    calcMovableDrawerWidth() {\n      return -parseFloat(getComputedStyle(this.contentEl)[this.align]);\n    }\n  };\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixin/calc.js","// # src / mixin / constants.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// The base duration of the fling animation.\nexport const BASE_DURATION = 200;\n\n// We adjust the duration of the animation using the width of the drawer.\n// There is no physics to this, but we know from testing that the animation starts to feel bad\n// when the drawer increases in size.\n// From testing we know that, if we increase the duration as a fraction of the drawer width,\n// the animation stays smooth across common display sizes.\nexport const WIDTH_CONTRIBUTION = 0.15;\n\n// Minimum velocity of the drawer (in px/ms) when releasing to make it fling to opened/closed state.\nexport const VELOCITY_THRESHOLD = 0.15;\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixin/constants.js","// # src / mixin / update.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport const updateMixin = C =>\n  class extends C {\n    histId() {\n      return this.el.id || this.constructor.componentName;\n    }\n\n    // #### Prepare and cleanup interaction\n    // `prepareInteraction` causes various side effects before sliding the drawer.\n    //\n    // Note that the drawer receives the `hy-drawer-opened` CSS class when it is opened.\n    // This class makes the drawer appear open by setting the CSS `left` (`right`) property, instead\n    // of an absoulte `transform` value.\n    // This way, the drawer's width can change while it is open without having to\n    // recalculate `translateX` on every `resize`.\n    // However, it has to be removed before we move the drawer via `translateX` again.\n    prepareInteraction() {\n      this.contentEl.style.willChange = \"transform\";\n      this.scrimEl.style.willChange = \"opacity\";\n      this.contentEl.classList.remove(\"hy-drawer-opened\");\n      this.fireEvent(\"prepare\");\n    }\n\n    // Cleanup code after a completed interaction.\n    // Will add/remove the beforementioned `hy-drawer-opened` class.\n    cleanupInteraction(opened) {\n      this.scrimEl.style.willChange = \"\";\n      this.contentEl.style.willChange = \"\";\n\n      if (opened) {\n        this.scrimEl.style.pointerEvents = \"all\";\n        this.contentEl.classList.add(\"hy-drawer-opened\");\n      } else {\n        this.scrimEl.style.pointerEvents = \"\";\n        this.contentEl.classList.remove(\"hy-drawer-opened\");\n      }\n\n      // If the experimental back button feature is enabled we hack the history API,\n      // so that it matches the state of the drawer...\n      /*\n      if (this._backButton) {\n        const id = histId.call(this);\n        const hash = `#${id}--opened`;\n\n        if (opened && window.location.hash !== hash) {\n          window.history.pushState({ [id]: true }, document.title, hash);\n        }\n\n        if (!opened\n            && (window.history.state && window.history.state[histId.call(this)])\n            && window.location.hash !== '') {\n          window.history.back();\n        }\n      }\n      */\n\n      // Once we're finished cleaning up, we fire the `transitioned` event.\n      this.fireEvent(\"transitioned\", { detail: opened });\n    }\n    // #### Update DOM\n    // In the end, we only modify two properties: The x-coordinate of the drawer,\n    // and the opacity of the scrim, which is handled by `updateDOM`.\n    updateDOM(translateX) {\n      this.translateX = translateX;\n\n      const inv = this.align === \"left\" ? 1 : -1;\n      const opacity = (this.opacity = translateX / this.drawerWidth * inv);\n\n      this.contentEl.style.transform = `translateX(${translateX}px)`;\n      this.scrimEl.style.opacity = this.opacity;\n\n      this.fireEvent(\"move\", { detail: { translateX, opacity } });\n    }\n  };\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixin/update.js","// # src / mixin / observables.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { combineLatest } from \"rxjs/_esm5/observable/combineLatest\";\nimport { fromEvent } from \"rxjs/_esm5/observable/fromEvent\";\nimport { merge } from \"rxjs/_esm5/observable/merge\";\n\nimport { tap } from \"rxjs/_esm5/operators/tap\";\nimport { filter } from \"rxjs/_esm5/operators/filter\";\nimport { map } from \"rxjs/_esm5/operators/map\";\nimport { mapTo } from \"rxjs/_esm5/operators/mapTo\";\nimport { skipWhile } from \"rxjs/_esm5/operators/skipWhile\";\nimport { switchMap } from \"rxjs/_esm5/operators/switchMap\";\nimport { withLatestFrom } from \"rxjs/_esm5/operators/withLatestFrom\";\n\nimport { subscribeWhen } from \"./operators\";\n\n// Using shorthands for common functions\nconst abs = Math.abs.bind(Math);\n\n// #### Get start observable\n// The following function returns an observable of all \"start\" events.\n// Usually, that's just `touchstart` event of the first finger touching the screen,\n// however since the compontent also supports mouse events,\n// we may listen for `mousedown` events.\nexport const baseObservablesMixin = C =>\n  class extends C {\n    getStartObservable() {\n      // Since the `mouseEvents` option may change at any point, we `switchMap` to reflect the changes.\n      return combineLatest(this.subjects.adapt, this.subjects.mouseEvents).pipe(\n        switchMap(([doc, mouseEvents]) => {\n          // The touchstart observable is passive since we won't be calling `preventDefault`.\n          // Also, we're only interested in the first `touchstart`.\n          const touchstart$ = fromEvent(doc, \"touchstart\", {\n            passive: true\n          }).pipe(filter(({ touches }) => touches.length === 1), map(({ touches }) => touches[0]));\n\n          // If mouse events aren't enabled, we're done here.\n          if (!mouseEvents) return touchstart$;\n\n          // Otherwise we also include `mousedown` events in the output.\n          const mousedown$ = fromEvent(doc, \"mousedown\").pipe(\n            tap(event => Object.assign(event, { event }))\n          );\n\n          return merge(touchstart$, mousedown$);\n        })\n      );\n    }\n\n    // #### Get move observable\n    // This function returns an observable of all move events. Usually that's just `touchmove`,\n    // but may also include `mousemove` events while the mouse button is down.\n    getMoveObservable(start$, end$) {\n      // Since the `mouseEvents` or `preventDefault` option may change at any point,\n      // we `switchMap` to reflect the changes.\n      // Nice: `combineLatest` provides us with the functionality of emitting\n      // when either of the inputs change, but not before all inputs have their first value set.\n      const input$ = combineLatest(\n        this.subjects.adapt,\n        this.subjects.mouseEvents,\n        this.subjects.preventDefault\n      );\n      return input$.pipe(\n        switchMap(([doc, mouseEvents, preventDefault]) => {\n          // We're only keeping track of the first finger.\n          // Should the user remove the finger that started the interaction, we use the next instead.\n          // Note that this doesn't occur under normal circumstances,\n          // and exists primarliy to ensure that the interaction continues without hiccups.\n          // Note that the event listener is only passive when the `preventDefault` option is falsy.\n          const s = { passive: !preventDefault };\n          const touchmove$ = fromEvent(doc, \"touchmove\", s).pipe(\n            map(e => Object.assign(e.touches[0], { event: e }))\n          );\n\n          // If mouse events aren't enabled, we're done here.\n          if (!mouseEvents) return touchmove$;\n\n          // Otherwise we listen for `mousemove` events,\n          // but only those between a `start` and `end` event, i.e. while the user is sliding.\n          // We unsubscribe form the source observable outside of those contraints.\n          // Again, the listener is only marked as passive when the `preventDefault` option is falsy.\n          const mousemove$ = fromEvent(doc, \"mousemove\", {\n            passive: !preventDefault\n          }).pipe(\n            subscribeWhen(merge(start$.pipe(mapTo(true)), end$.pipe(mapTo(false)))),\n            map(event => Object.assign(event, { event }))\n          );\n\n          return merge(touchmove$, mousemove$);\n        })\n      );\n    }\n\n    // #### Get end observable\n    // This function returns an observable of end events.\n    // Usually, this is the `touchend` event of the last finger, but may also include `mouseup` events,\n    // when the `mouseEvents` option is enabled.\n    getEndObservable() {\n      // Since the `mouseEvents` option may change at any point, we `switchMap` to reflect the changes.\n      return combineLatest(this.subjects.adapt, this.subjects.mouseEvents).pipe(\n        switchMap(([doc, mouseEvents]) => {\n          // We're only interested in the last `touchend`.\n          // Otherwise there's at least one finger left on the screen,\n          // that can be used to slide the drawer.\n          const touchend$ = fromEvent(doc, \"touchend\", { passive: true }).pipe(\n            filter(({ touches }) => touches.length === 0),\n            map(event => event.changedTouches[0])\n          );\n\n          // If mouse events aren't enabled, we're done here.\n          if (!mouseEvents) return touchend$;\n\n          // Otherwise we include `mouseup` events.\n          const mouseup$ = fromEvent(doc, \"mouseup\", { passive: true });\n          return merge(touchend$, mouseup$);\n        })\n      );\n    }\n\n    // #### Get \"Is sliding?\" observable\n    // An observable that emits `true` when the user is *sliding* the drawer,\n    // (i.e. moving the finger along the x-axis), or `false` when *scrolling* the page\n    // (i.e. moving the finger along the y-axis).\n    getIsSlidingObservable(move$, start$) {\n      // If the threshold options is set, we delay the decision until\n      // the finger has moved at least `threshold` pixels in either direction.\n      if (this.threshold) {\n        return move$.pipe(\n          withLatestFrom(start$),\n          skipWhile(\n            ([{ clientX, clientY }, { clientX: startX, clientY: startY }]) =>\n              abs(startY - clientY) < this.threshold && abs(startX - clientX) < this.threshold\n          ),\n          map(\n            ([{ clientX, clientY }, { clientX: startX, clientY: startY }]) =>\n              abs(startX - clientX) >= abs(startY - clientY)\n          )\n        );\n\n        // If the threshold option is set to `0` (or `false`) we make a decision immediately.\n        // This is intended for Safari and possibly other browsers that have a built-in threshold.\n        // Additionally, Safari ignores all calls to `preventDefault`, except on the first move event\n        // after a start event, so that we *have to* make a decision immediately.\n      } else {\n        return move$.pipe(\n          withLatestFrom(start$),\n          map(([{ clientX, clientY, event }, { clientX: startX, clientY: startY }]) => {\n            const isSliding = abs(startX - clientX) >= abs(startY - clientY);\n            if (this.preventDefault && isSliding) event.preventDefault();\n            return isSliding;\n          })\n        );\n      }\n    }\n  };\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixin/observables.js","// # src / mixin / setup.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// As mentioned before, we only import the RxJS function that we need.\nimport { combineLatest } from \"rxjs/_esm5/observable/combineLatest\";\nimport { defer } from \"rxjs/_esm5/observable/defer\";\nimport { fromEvent } from \"rxjs/_esm5/observable/fromEvent\";\nimport { merge } from \"rxjs/_esm5/observable/merge\";\nimport { never } from \"rxjs/_esm5/observable/never\";\n\nimport { tap } from \"rxjs/_esm5/operators/tap\";\nimport { filter } from \"rxjs/_esm5/operators/filter\";\nimport { map } from \"rxjs/_esm5/operators/map\";\nimport { pairwise } from \"rxjs/_esm5/operators/pairwise\";\nimport { repeatWhen } from \"rxjs/_esm5/operators/repeatWhen\";\nimport { sample } from \"rxjs/_esm5/operators/sample\";\nimport { share } from \"rxjs/_esm5/operators/share\";\nimport { startWith } from \"rxjs/_esm5/operators/startWith\";\nimport { switchMap } from \"rxjs/_esm5/operators/switchMap\";\nimport { take } from \"rxjs/_esm5/operators/take\";\nimport { takeUntil } from \"rxjs/_esm5/operators/takeUntil\";\nimport { timestamp } from \"rxjs/_esm5/operators/timestamp\";\nimport { withLatestFrom } from \"rxjs/_esm5/operators/withLatestFrom\";\n\nimport { createTween } from \"rxjs-create-tween\";\n\nimport { easeOutSine } from \"../common\";\n\nimport { BASE_DURATION, WIDTH_CONTRIBUTION } from \"./constants\";\n\nimport { filterWhen /* , subscribeWhen */ } from \"./operators\";\n\nimport { calcMixin } from \"./calc\";\nimport { updateMixin } from \"./update\";\nimport { baseObservablesMixin } from \"./observables\";\n\n// ### Setup observables\n// This function sets up the observable \"pipeline\".\nexport const setupObservablesMixin = C =>\n  class extends baseObservablesMixin(updateMixin(calcMixin(C))) {\n    setupObservables() {\n      // An observable of resize events.\n      const resize$ = fromEvent(window, \"resize\", { passive: true }).pipe(\n        takeUntil(this.subjects.disconnect),\n        /* debounceTime(100), */\n        share(),\n        startWith({})\n      );\n\n      // Keep measurements up-to-date.\n      // Note that we need to temporarily remove the opened class to get the correct measures.\n      resize$.pipe(takeUntil(this.subjects.disconnect)).subscribe(() => {\n        if (this.opened) this.contentEl.classList.remove(\"hy-drawer-opened\");\n        this.drawerWidth = this.calcMovableDrawerWidth();\n        if (this.opened) this.contentEl.classList.add(\"hy-drawer-opened\");\n      });\n\n      // Emitts a value every time you change the `persistent` property of the drawer.\n      // Interally, we invert it and call it `active`.\n      const active$ = this.subjects.persistent.pipe(\n        takeUntil(this.subjects.disconnect),\n        map(x => !x),\n        share()\n      );\n\n      // We use this to get references to observables that aren't defined yet.\n      const ref = {};\n\n      // #### Start observable\n      // Emits a value every time a start event *could* intiate an interaction.\n      // Each emitted value is a hash containing a `clientX` and `clientY` key.\n      const start$ = this.getStartObservable().pipe(\n        takeUntil(this.subjects.disconnect),\n        filterWhen(active$),\n        share()\n      );\n\n      // An observable that emits `true`, as long as the drawer isn't fully closed\n      // (as long as the scrim is visible the user can still \"catch\" the drawer).\n      // It references the yet-to-be-defined `translateX` obsevable, so we wrap it inside a `defer`.\n      const isScrimVisible$ = defer(() =>\n        ref.translateX$.pipe(\n          map(\n            translateX => (this.align === \"left\" ? translateX > 0 : translateX < this.drawerWidth)\n          )\n        )\n      );\n\n      // TODO: ...\n      const isInRange$ = start$.pipe(\n        withLatestFrom(isScrimVisible$),\n        map(([{ clientX }, isScrimVisible]) => this.calcIsInRange(clientX, isScrimVisible)),\n        tap(inRange => {\n          if (inRange) {\n            if (this.mouseEvents) this.contentEl.classList.add(\"hy-drawer-grabbing\");\n            this.prepareInteraction();\n          }\n        }),\n        share()\n      );\n\n      // #### End observable\n      // The observable of all relevant \"end\" events, i.e. the last `touchend` (or `mouseup`),\n      const end$ = this.getEndObservable().pipe(\n        takeUntil(this.subjects.disconnect),\n        filterWhen(active$, isInRange$),\n        share()\n      );\n\n      // #### Move observable\n      // The observable of all relevant \"move\" events.\n      const move$ = this.getMoveObservable(start$, end$).pipe(\n        takeUntil(this.subjects.disconnect),\n        filterWhen(active$, isInRange$),\n        share()\n      );\n\n      // #### 'Is sliding?' observable\n      // An observable that emits `true` when the user is *sliding* the drawer,\n      // (i.e. moving the finger along the x-axis), or `false` when *scrolling* the page\n      // (i.e. moving the finger along the y-axis), and `undefined` while we aren't sure yet.\n      //\n      // See [`getIsSlidingObservable`](./observables.md#get-is-sliding-observable).\n      const isSliding$ = this.getIsSlidingObservable(move$, start$).pipe(\n        take(1),\n        startWith(undefined),\n        repeatWhen(() => end$),\n\n        // When the user is sliding, fire the `slidestart` event.\n        tap(isSliding => {\n          if (isSliding) this.fireEvent(\"slidestart\", { detail: this.opened });\n        })\n      );\n\n      // #### Translate X observable\n      // The `translateX` observable is the central observable of this component.\n      // It emits the current x-coordinate of the drawer, which\n      // can be modified by either of 3 incoming observables:\n      //\n      // 1. The move observable (the user's finger/mouse moving across the screen),\n      // 2. the animation/tween observable, and\n      // 3. direct modifications of the `opened` state.\n      //\n      // It is wrapped in a `defer` because it depends on previous values of itself.\n      ref.translateX$ = defer(() =>\n        merge(\n          // 1)\n          // We only let move events modify the drawer's position when we are sure\n          // that the user is sliding. In case the `preventDefault` option is enabled,\n          // this is also when we're sure to call `preventDefault`.\n          move$.pipe(\n            filterWhen(isSliding$),\n            tap(({ event }) => {\n              if (this.preventDefault) event.preventDefault();\n            }),\n\n            // Finally, we take the start position of the finger, the start position of the drawer,\n            // and the current position of the finger to calculate the next `translateX` value.\n            withLatestFrom(start$, ref.startTranslateX$),\n            map(([{ clientX }, { clientX: startX }, startTranslateX]) =>\n              this.calcTranslateX(clientX, startX, startTranslateX)\n            )\n          ),\n\n          // 2)\n          // The tween observable can be used unmodified (see below),\n          // but isn't defined yet, because it depends on previous values of `translateX$`.\n          ref.tween$,\n\n          // 3)\n          // When the `opened` state changes, we \"jump\" to the new position,\n          // which is either 0 (when closed) or the width of the drawer (when open).\n          // We also want to jump when `align` chagnes, in this case to the other side of the viewport.\n          combineLatest(this.subjects.opened, this.subjects.align).pipe(\n            // Usually the cleanup code would run at the end of the fling animation,\n            // but since there is no animation in this case, we call it directly.\n            tap(([opened]) => this.cleanupInteraction(opened)),\n            map(([opened, align]) => (!opened ? 0 : this.drawerWidth * (align === \"left\" ? 1 : -1)))\n          )\n        )\n      )\n        // `share`ing the observable between many subscribers:\n        .pipe(takeUntil(this.subjects.disconnect), share());\n\n      // The `translateX` value at the start of an interaction.\n      // Typically this would be either 0 or `drawerWidth`, but since the user can initiate\n      // an interaction *during the animation*, it could also be any value inbetween.\n      // We obtain it by sampling the translate-x observable at the beginning of each interaction.\n      ref.startTranslateX$ = ref.translateX$.pipe(sample(start$));\n\n      // #### Tween observable\n      // For the tween animations we first need an observable that tracks\n      // the current velocity of the drawer,\n      // which we will use to determine whether the drawer should flinging in its direction,\n      // or snap back into place.\n      const velocity$ = ref.translateX$.pipe(\n        timestamp(),\n        pairwise(),\n        // Since we are at the mercy of the browser firing move events,\n        // we make sure that some time has passed since the last move event.\n        filter(([{ timestamp: prevTime }, { timestamp: time }]) => time - prevTime > 0),\n        // Now we are save to calculate the current velocity without divide by zero errors.\n        map(\n          ([{ value: prevX, timestamp: prevTime }, { value: x, timestamp: time }]) =>\n            (x - prevX) / (time - prevTime)\n        ),\n        // The initial velocity is zero.\n        startWith(0)\n      );\n\n      // TODO\n      const willOpen$ = end$.pipe(\n        tap(() => {\n          this.contentEl.classList.remove(\"hy-drawer-grabbing\");\n        }),\n        withLatestFrom(start$, ref.translateX$, velocity$),\n        filter(this.calcIsSwipe.bind(this)),\n        map(this.calcWillOpen.bind(this)),\n        // TODO: only fire `slideend` event when slidestart fired as well?\n        tap(willOpen => this.fireEvent(\"slideend\", { detail: willOpen }))\n      );\n\n      // There are 2 things that can trigger an animation:\n      // 1. The end of an interaction, i.e. the user releases the finger/mouse while moving the slider.\n      // 2. A call to a method like `open` or `close` (represented by a value on the animate observable)\n      //    Note that we call `prepareInteraction` manually here, because it wasn't triggered by a\n      //    prior `touchdown`/`mousedown` event in this case.\n      const tweenTrigger$ = merge(\n        willOpen$,\n        this.animateTo$.pipe(tap(this.prepareInteraction.bind(this)))\n      );\n\n      // We silently set the new `opened` state here,\n      // so that the next interaction will do the right thing even while the animation is\n      // still playing, e.g. a call to `toggle` will cancel the current animation\n      // and initiate an animation to the opposite state.\n      ref.tween$ = tweenTrigger$.pipe(\n        tap(willOpen => {\n          this.setInternalState(\"opened\", willOpen);\n        }),\n        // By using `switchMap` we ensure that subsequent events that trigger an animation\n        // don't cause more than one animation to be played at a time.\n        withLatestFrom(ref.translateX$),\n        switchMap(([opened, translateX]) => {\n          // We return a tween observable that runs cleanup code when it completes\n          // --- unless a new interaction is initiated, in which case it is canceled.\n          const inv = this.align === \"left\" ? 1 : -1;\n          const endTranslateX = opened ? this.drawerWidth * inv : 0;\n          const diffTranslateX = endTranslateX - translateX;\n          const duration = BASE_DURATION + this.drawerWidth * WIDTH_CONTRIBUTION;\n\n          return createTween(easeOutSine, translateX, diffTranslateX, duration).pipe(\n            tap({ complete: () => this.subjects.opened.next(opened) }),\n            takeUntil(start$),\n            takeUntil(this.subjects.align)\n          );\n        })\n      );\n\n      // #### Subscriptions\n      // Now we are ready to cause some side effects.\n      //\n      // The end result is always to update the (shadow) DOM, which happens here.\n      // Note that the call to subscribe sets the whole process in motion,\n      // and causes the code inside the above `defer` observables to run.\n      ref.translateX$.subscribe(this.updateDOM.bind(this));\n\n      // A click on the scrim should close the drawer.\n      fromEvent(this.scrimEl, \"click\")\n        .pipe(takeUntil(this.subjects.disconnect))\n        .subscribe(() => this.close());\n\n      // Other than preventing sliding, setting `persistent` will also hide the scrim.\n      active$.pipe(takeUntil(this.subjects.disconnect)).subscribe(active => {\n        this.scrimEl.style.display = active ? \"block\" : \"none\";\n      });\n\n      // Whenever the alignment of the drawer changes, update the CSS classes.\n      this.subjects.align.pipe(takeUntil(this.subjects.disconnect)).subscribe(align => {\n        const oldAlign = align === \"left\" ? \"right\" : \"left\";\n        this.contentEl.classList.remove(`hy-drawer-${oldAlign}`);\n        this.contentEl.classList.add(`hy-drawer-${align}`);\n      });\n\n      // If the experimental back button feature is enabled, handle popstate events...\n      /*\n      fromEvent(window, 'popstate')\n        .pipe(\n          takeUntil(this.subjects.disconnect),\n          subscribeWhen(this.backButton$),\n        )\n        .subscribe(() => {\n          const hash = `#${histId.call(this)}--opened`;\n          const willOpen = window.location.hash === hash;\n          if (willOpen !== this.opened) this.animateTo$.next(willOpen);\n        });\n      */\n\n      // When drawing with mouse is enabled, we add the grab cursor to the drawer.\n      // We also want to call `preventDefault` when `mousedown` is within the drawer range\n      // to prevent text selection while sliding.\n      this.subjects.mouseEvents\n        .pipe(\n          takeUntil(this.subjects.disconnect),\n          switchMap(mouseEvents => {\n            if (mouseEvents) this.contentEl.classList.add(\"hy-drawer-grab\");\n            else this.contentEl.classList.remove(\"hy-drawer-grab\");\n\n            return mouseEvents ? start$.pipe(withLatestFrom(isInRange$)) : never();\n          })\n        )\n        .subscribe(([{ event }, isInRange]) => {\n          if (isInRange && event) event.preventDefault();\n        });\n\n      // Now we set the initial opend state.\n      // If the experimental back button feature is enabled, we check the location hash...\n      /*\n      if (this._backButton) {\n        const hash = `#${histId.call(this)}--opened`;\n        if (window.location.hash === hash) this.setInternalState('opened', true);\n      }\n      */\n\n      // Putting initial values on the side-effect--observables:\n      // this.document$.next(document);\n\n      /*\n      this.opened$.next(this.opened);\n      this.align$.next(this.align);\n      this.persitent$.next(this.persistent);\n      this.preventDefault$.next(this.preventDefault);\n      this.mouseEvents$.next(this.mouseEvents);\n      */\n      /* this.backButton$.next(this._backButton); */\n    }\n  };\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixin/setup.js","// # src / mixin / index.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// ## Overview\n// This component is written in [RxJS] and reading its code requires some basic understanding\n// of how RxJS works. It may also serve as an example of how to use RxJS.\n//\n// Other than RxJS, you should be familiar with [ES6 Mixin][esmixins],\n// which is a clever way of using the ES6 class syntax to achieve inheritance-based mixins.\n// The mixin in the main export of this file.\n\n// ## Imports\n// ES6+ functions that we use.\n// import 'core-js/fn/array/from';\n// import 'core-js/fn/function/bind';\n// import 'core-js/fn/object/assign';\n\n// Importing the hy-compontent base libary,\n// which helps with making multiple versions of the component (Vanilla JS, WebComponent, etc...).\nimport { componentMixin, COMPONENT_FEATURE_TESTS, Set } from \"hy-component/src/component\";\nimport { rxjsMixin } from \"hy-component/src/rxjs\";\nimport { arrayOf, bool, number, oneOf } from \"hy-component/src/types\";\n\nimport { Subject } from \"rxjs/_esm5/Subject\";\n\n// TODO\nimport { setupObservablesMixin } from \"./setup\";\n\n// A set of [Modernizr] tests that are required for this component to work.\nexport const MIXIN_FEATURE_TESTS = new Set([\n  ...COMPONENT_FEATURE_TESTS,\n  \"eventlistener\",\n  \"queryselector\",\n  \"requestanimationframe\",\n  \"classlist\",\n  \"opacity\",\n  \"csstransforms\",\n  \"csspointerevents\"\n]);\n\nexport { Set };\n\n// ## Drawer Mixin\nexport const drawerMixin = C =>\n  class extends setupObservablesMixin(rxjsMixin(componentMixin(C))) {\n    // The name of the component (required by hy-component)\n    static get componentName() {\n      return \"hy-drawer\";\n    }\n\n    // ### Options\n    // The default values (and types) of the configuration options (required by hy-component)\n    // See [Options](../../options.md) for usage information.\n    static get types() {\n      return {\n        opened: bool,\n        align: oneOf([\"left\", \"right\"]),\n        persistent: bool,\n        range: arrayOf(number),\n        threshold: number,\n        preventDefault: bool,\n        mouseEvents: bool\n      };\n    }\n\n    static get defaults() {\n      return {\n        opened: false,\n        align: \"left\",\n        persistent: false,\n        range: [0, 100],\n        threshold: 10,\n        preventDefault: false,\n        mouseEvents: false\n      };\n    }\n\n    // ### Setup\n    // Overriding the setup function.\n    setupComponent(el, props) {\n      super.setupComponent(el, props);\n\n      this.animateTo$ = new Subject();\n\n      // Cache DOM elements.\n      this.scrimEl = this.sroot.querySelector(\".hy-drawer-scrim\");\n      this.contentEl = this.sroot.querySelector(\".hy-drawer-content\");\n\n      // Set the initial alignment class.\n      this.contentEl.classList.add(`hy-drawer-${this.align}`);\n    }\n\n    // Calling the [setup observables function](./setup.md) function.\n    connectComponent() {\n      this.setupObservables();\n      super.connectComponent();\n\n      // Firing an event to let the outside world know the drawer is ready.\n      this.fireEvent(\"init\", { detail: this.opened });\n    }\n\n    // ### Methods\n    // Public methods of this component. See [Methods](../../methods.md) for more.\n    open(animated = true) {\n      if (animated) this.animateTo$.next(true);\n      else this.opened = true;\n    }\n\n    close(animated = true) {\n      if (animated) this.animateTo$.next(false);\n      else this.opened = false;\n    }\n\n    toggle(animated = true) {\n      if (animated) this.animateTo$.next(!this.opened);\n      else this.opened = !this.opened;\n    }\n  };\n\n// [rxjs]: https://github.com/ReactiveX/rxjs\n// [esmixins]: http://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/\n// [modernizr]: https://modernizr.com/\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixin/index.js","// # src / vanilla / index.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// import 'core-js/fn/array/from';\n\nimport { VanillaComponent, Set } from \"hy-component/src/vanilla\";\n\nimport { createElement } from \"create-element-x/library\";\n\nimport { drawerMixin, MIXIN_FEATURE_TESTS } from \"../mixin\";\n\nexport const VANILLA_FEATURE_TESTS = MIXIN_FEATURE_TESTS;\n\nexport { Set };\n\nexport class HyDrawer extends drawerMixin(VanillaComponent) {\n  setupShadowDOM(el) {\n    if (!el) throw Error(\"No element provided\");\n\n    const df = new DocumentFragment();\n    df.appendChild(createElement(\"div\", { class: \"hy-drawer-scrim\" }));\n    df.appendChild(createElement(\"div\", { class: \"hy-drawer-content\" }, el.children));\n\n    el.appendChild(df);\n\n    return el;\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/vanilla/index.js","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n// WEBPACK FOOTER //\n// (webpack)/buildin/global.js"],"sourceRoot":""}
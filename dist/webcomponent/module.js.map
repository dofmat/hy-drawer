{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///module.js","webpack:///webpack/bootstrap b77eec88bcc783bcbc0f","webpack:///./node_modules/rxjs/_esm5/util/root.js","webpack:///./node_modules/hy-component/src/common.js","webpack:///./node_modules/hy-component/src/custom-element.js","webpack:///./node_modules/rxjs/_esm5/util/isFunction.js","webpack:///./node_modules/rxjs/_esm5/util/isObject.js","webpack:///./node_modules/rxjs/_esm5/util/tryCatch.js","webpack:///./node_modules/rxjs/_esm5/Subscription.js","webpack:///./node_modules/rxjs/_esm5/Subscriber.js","webpack:///./node_modules/rxjs/_esm5/util/toSubscriber.js","webpack:///./node_modules/rxjs/_esm5/util/noop.js","webpack:///./node_modules/rxjs/_esm5/util/pipe.js","webpack:///./node_modules/rxjs/_esm5/util/isScheduler.js","webpack:///./node_modules/rxjs/_esm5/util/isPromise.js","webpack:///./node_modules/rxjs/_esm5/util/subscribeToResult.js","webpack:///./node_modules/rxjs/_esm5/observable/combineLatest.js","webpack:///./node_modules/rxjs/_esm5/observable/FromEventObservable.js","webpack:///./node_modules/rxjs/_esm5/operators/mergeMap.js","webpack:///./node_modules/rxjs/_esm5/util/identity.js","webpack:///./node_modules/rxjs/_esm5/operators/mergeAll.js","webpack:///./node_modules/rxjs/_esm5/observable/merge.js","webpack:///./node_modules/rxjs/_esm5/operators/tap.js","webpack:///./node_modules/rxjs/_esm5/operators/filter.js","webpack:///./node_modules/rxjs/_esm5/operators/map.js","webpack:///./node_modules/rxjs/_esm5/operators/pairwise.js","webpack:///./node_modules/rxjs/_esm5/operators/repeatWhen.js","webpack:///./node_modules/rxjs/_esm5/operators/sample.js","webpack:///./node_modules/rxjs/_esm5/operators/refCount.js","webpack:///./node_modules/rxjs/_esm5/operators/multicast.js","webpack:///./node_modules/rxjs/_esm5/operators/share.js","webpack:///./node_modules/rxjs/_esm5/operators/skip.js","webpack:///./node_modules/rxjs/_esm5/observable/PromiseObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/IteratorObservable.js","webpack:///./node_modules/rxjs/_esm5/operators/concatAll.js","webpack:///./node_modules/rxjs/_esm5/observable/concat.js","webpack:///./node_modules/rxjs/_esm5/operators/startWith.js","webpack:///./node_modules/rxjs/_esm5/operators/switchMap.js","webpack:///./node_modules/rxjs/_esm5/operators/take.js","webpack:///./node_modules/rxjs/_esm5/operators/takeUntil.js","webpack:///./node_modules/rxjs/_esm5/operators/timestamp.js","webpack:///./node_modules/rxjs/_esm5/operators/withLatestFrom.js","webpack:///./node_modules/rxjs-create-tween/esm/index.js","webpack:///./src/common.js","webpack:///./node_modules/rxjs/_esm5/operators/mapTo.js","webpack:///./node_modules/rxjs/_esm5/operators/skipWhile.js","webpack:///./node_modules/qd-set/esm/index.js","webpack:///./node_modules/hy-component/src/component.js","webpack:///./node_modules/rxjs/_esm5/util/isArray.js","webpack:///./node_modules/rxjs/_esm5/util/errorObject.js","webpack:///./node_modules/rxjs/_esm5/util/UnsubscriptionError.js","webpack:///./node_modules/rxjs/_esm5/Observer.js","webpack:///./node_modules/rxjs/_esm5/symbol/rxSubscriber.js","webpack:///./node_modules/rxjs/_esm5/symbol/observable.js","webpack:///./node_modules/rxjs/_esm5/Observable.js","webpack:///./node_modules/rxjs/_esm5/util/ObjectUnsubscribedError.js","webpack:///./node_modules/rxjs/_esm5/SubjectSubscription.js","webpack:///./node_modules/rxjs/_esm5/Subject.js","webpack:///./node_modules/rxjs/_esm5/scheduler/Action.js","webpack:///./node_modules/rxjs/_esm5/scheduler/AsyncAction.js","webpack:///./node_modules/rxjs/_esm5/scheduler/QueueAction.js","webpack:///./node_modules/rxjs/_esm5/Scheduler.js","webpack:///./node_modules/rxjs/_esm5/scheduler/AsyncScheduler.js","webpack:///./node_modules/rxjs/_esm5/scheduler/QueueScheduler.js","webpack:///./node_modules/rxjs/_esm5/scheduler/queue.js","webpack:///./node_modules/rxjs/_esm5/Notification.js","webpack:///./node_modules/rxjs/_esm5/operators/observeOn.js","webpack:///./node_modules/rxjs/_esm5/ReplaySubject.js","webpack:///./node_modules/hy-component/src/rxjs.js","webpack:///./node_modules/attr-types/array.js","webpack:///./node_modules/attr-types/array-of.js","webpack:///./node_modules/attr-types/bool.js","webpack:///./node_modules/attr-types/number.js","webpack:///./node_modules/attr-types/one-of.js","webpack:///./node_modules/attr-types/regex.js","webpack:///./node_modules/attr-types/string.js","webpack:///./node_modules/rxjs/_esm5/observable/ScalarObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/EmptyObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/ArrayObservable.js","webpack:///./node_modules/rxjs/_esm5/OuterSubscriber.js","webpack:///./node_modules/rxjs/_esm5/util/isArrayLike.js","webpack:///./node_modules/rxjs/_esm5/symbol/iterator.js","webpack:///./node_modules/rxjs/_esm5/InnerSubscriber.js","webpack:///./node_modules/rxjs/_esm5/operators/combineLatest.js","webpack:///./node_modules/rxjs/_esm5/observable/DeferObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/defer.js","webpack:///./node_modules/rxjs/_esm5/observable/fromEvent.js","webpack:///./node_modules/rxjs/_esm5/observable/NeverObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/never.js","webpack:///./node_modules/rxjs/_esm5/observable/ConnectableObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/of.js","webpack:///./node_modules/rxjs/_esm5/observable/ArrayLikeObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/FromObservable.js","webpack:///./node_modules/rxjs/_esm5/observable/from.js","webpack:///./node_modules/rxjs/_esm5/util/ArgumentOutOfRangeError.js","webpack:///./node_modules/rxjs/_esm5/scheduler/async.js","webpack:///./src/mixin/operators.js","webpack:///./src/mixin/calc.js","webpack:///./src/mixin/constants.js","webpack:///./src/mixin/update.js","webpack:///./src/mixin/observables.js","webpack:///./src/mixin/setup.js","webpack:///./src/mixin/index.js","webpack:///./src/webcomponent/index.js","webpack:///./src/webcomponent/template.js","webpack:///./src/webcomponent/module.js","webpack:///(webpack)/buildin/global.js"],"names":["root","factory","exports","module","define","amd","self","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__webpack_exports__","global","_root","__window","window","__self","WorkerGlobalScope","__global","parseType","type","attr","decamelize","str","sep","arguments","length","undefined","replace","toLowerCase","preserveCamelCase","strarg","isLastCharLower","isLastCharUpper","isLastLastCharUpper","charAt","test","toUpperCase","substr","camelCase","_len","args","Array","_key","map","x","trim","filter","join","p1","_possibleConstructorReturn","ReferenceError","_inherits","subClass","superClass","TypeError","create","constructor","value","writable","setPrototypeOf","__proto__","_classCallCheck","instance","Constructor","custom_element__classCallCheck","custom_element__possibleConstructorReturn","custom_element__inherits","CustomElement","HTMLElement","Reflect","construct","fragmentFromString","strHTML","document","createRange","createContextualFragment","isFunction","isObject","_typeof","tryCatcher","tryCatchTarget","apply","e","errorObject","tryCatch","fn","flattenUnsubscriptionErrors","errors","reduce","errs","err","concat","UnsubscriptionError","isTrustedSubscriber","obj","Subscriber_Subscriber","rxSubscriber","toSubscriber","nextOrObserver","error","complete","empty","noop","pipeFromArray","fns","input","prev","rxjs__classCallCheck","rxjs__possibleConstructorReturn","rxjs__inherits","isScheduler","schedule","isPromise","subscribe","then","subscribeToResult","outerSubscriber","result","outerValue","outerIndex","destination","InnerSubscriber","closed","Observable_Observable","_isScalar","next","syncErrorThrowable","isArrayLike","len","setTimeout","iterator_iterator","iterator","item","done","observable_observable","obs","msg","combineLatest_combineLatest","observables","_i","project","scheduler","pop","isArray","ArrayObservable_ArrayObservable","lift","CombineLatestOperator","isNodeStyleEventEmitter","sourceObj","addListener","removeListener","isJQueryStyleEventEmitter","on","off","isNodeList","FromEventObservable_toString","isHTMLCollection","isEventTarget","addEventListener","removeEventListener","mergeMap","resultSelector","concurrent","Number","POSITIVE_INFINITY","source","MergeMapOperator","identity","mergeAll","merge","last","tap","DoOperator","predicate","thisArg","FilterOperator","MapOperator","pairwise","PairwiseOperator","repeatWhen","notifier","RepeatWhenOperator","sample","sample_SampleOperator","refCount","RefCountOperator","multicast","subjectOrSubjectFactory","selector","subjectFactory","MulticastOperator","connectable","connectableObservableDescriptor","shareSubjectFactory","Subject_Subject","share","skip","count","SkipOperator","dispatchNext","arg","subscriber","dispatchError","getIterator","IteratorObservable_StringIterator","IteratorObservable_ArrayIterator","toLength","isNaN","numberIsFinite","sign","Math","floor","abs","maxSafeInteger","isFinite","valueAsNumber","concatAll","from","of","startWith","array","ScalarObservable","EmptyObservable","switchMap","SwitchMapOperator","take","take_TakeOperator","takeUntil","TakeUntilOperator","timestamp","async_async","Timestamp","now","withLatestFrom","WithLatestFromOperator","createTween","easingFunction","b","observer","startTime","id","requestAnimationFrame","time","t","cancelAnimationFrame","easeOutSine","sin","PI","_toArray","arr","calc__classCallCheck","calc__possibleConstructorReturn","calc__inherits","update__classCallCheck","update__possibleConstructorReturn","update__inherits","mapTo","MapToOperator","skipWhile","SkipWhileOperator","observables__classCallCheck","observables__possibleConstructorReturn","observables__inherits","setup__classCallCheck","setup__possibleConstructorReturn","setup__inherits","mixin__classCallCheck","mixin__possibleConstructorReturn","mixin__inherits","webcomponent__classCallCheck","webcomponent__possibleConstructorReturn","webcomponent__inherits","webcomponent__toConsumableArray","arr2","_Set","Set","size","a","indexOf","has","add","push","delete","splice","clear","_createClass","defineProperties","target","props","descriptor","key","protoProps","staticProps","COMPONENT_FEATURE_TESTS","aSymbol","Symbol","sRoot","sState","process","env","requestIdleCallback","f","cancelIdleCallback","clearTimeout","Component","componentMixin","C","_C","_class","getPrototypeOf","el","state","defaults","assign","setupProperties","setupShadowDOM","eventName","data","componentName","event","CustomEvent","dispatchEvent","_this2","sideEffects","keys","forEach","sideEffect","setupProperty","_this3","set","oldValue","setInternalState","getRoot","getEl","_get","receiver","Function","desc","getOwnPropertyDescriptor","parent","custom_element__createClass","CUSTOM_ELEMENT_FEATURE_TESTS","circutBreaker","__extends","__","_super","Error","toString","stack","message","Subscription__typeof","Subscription_Subscription","Subscription","unsubscribe","_parent","_parents","_subscriptions","_unsubscribe","hasErrors","_a","index","remove","trial","sub","teardown","EMPTY","subscription","_addParent","tmp","subscriptions","subscriptionIndex","for","Subscriber__typeof","Subscriber___extends","Subscriber","destinationOrNext","syncErrorValue","syncErrorThrown","isStopped","trustedSubscriber","Subscriber_SafeSubscriber","_next","_error","_complete","_unsubscribeAndRecycle","SafeSubscriber","_parentSubscriber","observerOrNext","context","bind","_context","__tryOrSetError","__tryOrUnsub","_this","wrappedComplete","$$observable","observable","Observable","_subscribe","operator","sink","_trySubscribe","PromiseCtor","Rx","config","Promise","resolve","reject","pipe","operations","toPromise","ObjectUnsubscribedError___extends","ObjectUnsubscribedError","SubjectSubscription___extends","SubjectSubscription","subject","observers","subscriberIndex","Subject___extends","SubjectSubscriber","Subject","hasError","thrownError","Subject_AnonymousSubject","copy","slice","asObservable","AnonymousSubject","Action___extends","Action","work","delay","AsyncAction___extends","AsyncAction_AsyncAction","AsyncAction","pending","recycleAsyncId","requestAsyncId","setInterval","flush","clearInterval","execute","_execute","errored","errorValue","actions","QueueAction___extends","QueueAction","Scheduler","SchedulerAction","Date","AsyncScheduler___extends","AsyncScheduler","active","scheduled","action","shift","QueueScheduler___extends","QueueScheduler","queue","Notification_Notification","Notification","kind","hasValue","observe","do","accept","toObservable","throw","createNext","undefinedValueNotification","createError","createComplete","completeNotification","observeOn___extends","observeOn_ObserveOnSubscriber","ObserveOnSubscriber","dispatch","notification","scheduleMessage","ObserveOnMessage","ReplaySubject___extends","ReplaySubject_ReplaySubject","ReplaySubject","bufferSize","windowTime","_events","_bufferSize","_windowTime","_getNow","ReplayEvent","_trimBufferThenGetEvents","eventsCount","spliceCount","max","rxjs__createClass","rxjs__get","rxjs_rxjsMixin","opts","subjects","disconnect","types","array_array","split","stringify","array_of_arrayOf","r","a2","bool","attr2","number","oneOf","alts","regex","match","RegExp","string","ScalarObservable___extends","EmptyObservable___extends","ArrayObservable___extends","ArrayObservable","OuterSubscriber___extends","OuterSubscriber","notifyNext","innerValue","innerIndex","innerSub","notifyError","notifyComplete","Set_1","Map_1","Map","getOwnPropertyNames","InnerSubscriber___extends","combineLatest___extends","none","combineLatest_CombineLatestSubscriber","CombineLatestSubscriber","values","toRespond","unused","oldVal","_tryProject","DeferObservable___extends","DeferObservable","observableFactory","DeferObservable_DeferSubscriber","DeferSubscriber","tryDefer","_callFactory","defer","FromEventObservable___extends","FromEventObservable_FromEventObservable","FromEventObservable","options","setupSubscription","handler","source_1","source_2","source_3","fromEvent","mergeMap___extends","mergeMap_MergeMapSubscriber","MergeMapSubscriber","hasCompleted","buffer","_tryNext","_innerSub","ish","_notifyResultSelector","NeverObservable___extends","NeverObservable_NeverObservable","NeverObservable","never","tap___extends","tap_DoSubscriber","DoSubscriber","safeSubscriber","filter___extends","FilterSubscriber","map___extends","MapSubscriber","pairwise___extends","PairwiseSubscriber","hasPrev","repeatWhen___extends","repeatWhen_RepeatWhenSubscriber","RepeatWhenSubscriber","sourceIsBeingSubscribedTo","retries","subscribeToRetries","retriesSubscription","notifications","sample___extends","SampleOperator","sampleSubscriber","SampleSubscriber","emitValue","refCount___extends","_refCount","refCounter","RefCountSubscriber","connection","connect","sharedConnection","_connection","ConnectableObservable___extends","ConnectableObservable_ConnectableObservable","ConnectableObservable","_isComplete","getSubject","_subject","ConnectableSubscriber","connectableProto","skip___extends","total","SkipSubscriber","PromiseObservable___extends","PromiseObservable_PromiseObservable","PromiseObservable","promise","IteratorObservable___extends","IteratorObservable","return","StringIterator","idx","ArrayIterator","pow","ArrayLikeObservable___extends","ArrayLikeObservable_ArrayLikeObservable","ArrayLikeObservable","arrayLike","FromObservable__typeof","FromObservable___extends","FromObservable_FromObservable","FromObservable","switchMap___extends","switchMap_SwitchMapSubscriber","SwitchMapSubscriber","innerSubscription","_tryNotifyNext","ArgumentOutOfRangeError___extends","ArgumentOutOfRangeError","take___extends","TakeOperator","TakeSubscriber","takeUntil___extends","takeUntil_TakeUntilSubscriber","TakeUntilSubscriber","withLatestFrom___extends","withLatestFrom_WithLatestFromSubscriber","WithLatestFromSubscriber","found","_slicedToArray","sliceIterator","_arr","_n","_d","_e","_s","operators_subscribeWhen","p$","operators_filterWhen","others","_ref","_ref3","_ref5","every","_ref7","calc__slicedToArray","calc__createClass","min","calc_calcMixin","clientX","opened","align","range","innerWidth","_ref2","endX","startX","translateX","drawerWidth","_ref4","velocity","startTranslateX","deltaX","parseFloat","getComputedStyle","contentEl","update__createClass","hasCSSOM","Element","CSS","updateMixin","attributeStyleMap","scrimEl","style","willChange","classList","fireEvent","CSSKeywordValue","pointerEvents","detail","inv","opacity","CSSTransformValue","CSSTranslate","px","transform","mapTo___extends","MapToSubscriber","skipWhile___extends","SkipWhileSubscriber","skipping","tryCallPredicate","Boolean","observables__slicedToArray","observables__createClass","observables_baseObservablesMixin","mouseEvents","doc","touchstart$","passive","touches","start$","end$","preventDefault","_ref6","touchmove$","_ref8","touchend$","_ref9","changedTouches","move$","threshold","_ref10","_ref11","_ref11$","clientY","_ref11$2","startY","_ref12","_ref13","_ref13$","_ref13$2","_ref14","_ref15","_ref15$","_ref15$2","isSliding","setup__slicedToArray","setup__createClass","setup_setupObservablesMixin","_baseObservablesMixin","calcMovableDrawerWidth","active$","persistent","getStartObservable","isScrimVisible$","translateX$","isInRange$","isScrimVisible","calcIsInRange","inRange","prepareInteraction","getEndObservable","getMoveObservable","isSliding$","getIsSlidingObservable","tween$","startTranslateX$","calcTranslateX","cleanupInteraction","velocity$","prevTime","prevX","willOpen$","calcIsSwipe","calcWillOpen","willOpen","tweenTrigger$","animateTo$","updateDOM","close","display","_ref16","_ref17","mixin__createClass","mixin__get","MIXIN_FEATURE_TESTS","webcomponent__createClass","webcomponent_HyDrawerElement","_customElementMixin","HyDrawerElement","template","getObservedAttributes","setupComponent","getStateFromAttributes","val","silent","attrName","removeAttribute","setAttribute","hasAttribute","getAttribute","connectComponent","disconnectComponent","adoptComponent","oldAttr","reflectAttribute","getTemplate","attachShadow","mode","shadowRoot","appendChild","querySelector","import","content","cloneNode","_setupObservablesMixi","sroot","setupObservables","module_define","customElements","WebComponents","ready","g","eval"],"mappings":"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","file":"module.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"hyDrawer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hyDrawer\"] = factory();\n\telse\n\t\troot[\"hyDrawer\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","/*!\n * Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n * \n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n * \n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n * \n */\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"hyDrawer\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hyDrawer\"] = factory();\n\telse\n\t\troot[\"hyDrawer\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\n/* WEBPACK VAR INJECTION */(function(global) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return _root; });\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' && self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n/*@__PURE__*/(function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\n\n//# sourceMappingURL=root.js.map\n/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(2)))\n\n/***/ }),\n/* 1 */\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n\n// CONCATENATED MODULE: ./node_modules/qd-set/esm/index.js\nvar _Set = typeof Set !== 'undefined' && new Set([1]).size === 1 ? Set : function () {\n  var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  a = a.filter(function (x, i) {\n    return i === a.indexOf(x);\n  });\n  a.size = a.length;\n  a.has = function (x) {\n    return a.indexOf(x) > -1;\n  };\n  a.add = function (x) {\n    if (!a.has(x)) {\n      a.size++;a.push(x);\n    }return a;\n  };\n  a.delete = function (x) {\n    var t = void 0;if (t = a.has(x)) {\n      a.size--;a.splice(a.indexOf(x), 1);\n    }return t;\n  };\n  a.clear = function () {\n    while (a.pop()) {}a.size = 0;\n  };\n  return a;\n};\n\n\n// CONCATENATED MODULE: ./node_modules/hy-component/src/common.js\n// # src / common.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n/* eslint-disable no-plusplus */\n\nfunction parseType(type, attr) {\n  if (false) {\n    return console.warn(\"No type provided for attribute \" + attr + \".\");\n  }\n  return type ? type(attr) : attr;\n}\n\nfunction decamelize(str) {\n  var sep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"-\";\n\n  return str.replace(/([a-z\\d])([A-Z])/g, \"$1\" + sep + \"$2\").replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, \"$1\" + sep + \"$2\").toLowerCase();\n}\n\nfunction preserveCamelCase(strarg) {\n  var str = strarg;\n  var isLastCharLower = false;\n  var isLastCharUpper = false;\n  var isLastLastCharUpper = false;\n\n  for (var i = 0; i < str.length; i++) {\n    var c = str.charAt(i);\n\n    if (isLastCharLower && /[a-zA-Z]/.test(c) && c.toUpperCase() === c) {\n      str = str.substr(0, i) + \"-\" + str.substr(i);\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (isLastCharUpper && isLastLastCharUpper && /[a-zA-Z]/.test(c) && c.toLowerCase() === c) {\n      str = str.substr(0, i - 1) + \"-\" + str.substr(i - 1);\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = c.toLowerCase() === c;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = c.toUpperCase() === c;\n    }\n  }\n\n  return str;\n}\n\nfunction camelCase() {\n  for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var str = [].map.call(args, function (x) {\n    return x.trim();\n  }).filter(function (x) {\n    return x.length;\n  }).join(\"-\");\n\n  if (str.length === 0) {\n    return \"\";\n  }\n\n  if (str.length === 1) {\n    return str.toLowerCase();\n  }\n\n  str = preserveCamelCase(str);\n\n  return str.replace(/^[_.\\- ]+/, \"\").toLowerCase().replace(/[_.\\- ]+(\\w|$)/g, function (m, p1) {\n    return p1.toUpperCase();\n  });\n}\n// CONCATENATED MODULE: ./node_modules/hy-component/src/component.js\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n// # src / component.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n// import 'core-js/fn/array/for-each';\n// import 'core-js/fn/object/assign';\n// import 'core-js/fn/object/define-property';\n// import 'core-js/fn/object/keys';\n\n\n\n\n\nvar COMPONENT_FEATURE_TESTS = new _Set([\"customevent\"]);\n\nvar aSymbol = Symbol || function (x) {\n  return \"_\" + x;\n};\nvar sRoot = aSymbol(\"sroot\");\nvar sState = aSymbol(\"state\");\n\nwindow.process = window.process || {};\nwindow.process.env = window.process.env || {};\n\nwindow.requestIdleCallback = window.requestIdleCallback || function (f) {\n  return window.setTimeout(f, 0);\n};\nwindow.cancelIdleCallback = window.cancelIdleCallback || window.clearTimeout;\n\nvar Component = function Component() {\n  _classCallCheck(this, Component);\n};\n\nvar componentMixin = function componentMixin() {\n  var C = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Component;\n  return function (_C) {\n    _inherits(_class, _C);\n\n    function _class() {\n      _classCallCheck(this, _class);\n\n      return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    _createClass(_class, [{\n      key: \"setupComponent\",\n      value: function setupComponent(el, state) {\n        var defaults = this.constructor.defaults;\n\n\n        if (false) {\n          var _constructor = this.constructor,\n              componentName = _constructor.componentName,\n              sideEffects = _constructor.sideEffects;\n\n          if (!componentName) {\n            console.warn(\"Component needs to have a name, e.g. `my-tag`. To set a name, provide a static getter called `componentName`.\");\n          }\n          if (!defaults) {\n            console.warn(\"No default properties provided. Implement a static getter called `defaults`.\");\n          }\n          if (!sideEffects) {\n            console.warn(\"No side effects provided. Implement a static getter called `sideEffects`.\");\n          }\n        }\n\n        this[sState] = Object.assign({}, defaults, state);\n        this.setupProperties(this);\n        this[sRoot] = this.setupShadowDOM(el);\n      }\n    }, {\n      key: \"setupShadowDOM\",\n      value: function setupShadowDOM(el) {\n        return el;\n      }\n    }, {\n      key: \"connectComponent\",\n      value: function connectComponent() {}\n    }, {\n      key: \"disconnectComponent\",\n      value: function disconnectComponent() {}\n    }, {\n      key: \"adoptComponent\",\n      value: function adoptComponent() {}\n    }, {\n      key: \"getRoot\",\n      value: function getRoot() {\n        return this[sRoot];\n      }\n    }, {\n      key: \"getEl\",\n      value: function getEl() {\n        return this[sRoot];\n      }\n    }, {\n      key: \"fireEvent\",\n      value: function fireEvent(eventName, data) {\n        var componentName = this.constructor.componentName;\n\n        var event = new CustomEvent(componentName + \"-\" + eventName, data);\n        this.el.dispatchEvent(event);\n      }\n    }, {\n      key: \"setInternalState\",\n      value: function setInternalState(key, value) {\n        this[sState][key] = value;\n      }\n    }, {\n      key: \"setupProperties\",\n      value: function setupProperties() {\n        var _this2 = this;\n\n        var sideEffects = this.constructor.sideEffects;\n\n\n        Object.keys(this[sState]).forEach(function (key) {\n          var sideEffect = sideEffects[key];\n          _this2.setupProperty(key, sideEffect);\n        });\n      }\n    }, {\n      key: \"setupProperty\",\n      value: function setupProperty(key, sideEffect) {\n        var _this3 = this;\n\n        Object.defineProperty(this, key, {\n          get: function get() {\n            return _this3[sState][key];\n          },\n          set: function set(value) {\n            var oldValue = _this3[sState][key];\n            _this3.setInternalState(key, value);\n            if (sideEffect) sideEffect.call(_this3, value, oldValue);\n          },\n          enumerable: true,\n          configurable: true\n        });\n      }\n    }, {\n      key: \"sroot\",\n      get: function get() {\n        return this.getRoot();\n      }\n    }, {\n      key: \"el\",\n      get: function get() {\n        return this.getEl();\n      }\n    }]);\n\n    return _class;\n  }(C);\n};\n// CONCATENATED MODULE: ./node_modules/hy-component/src/custom-element.js\nvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nvar custom_element__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction custom_element__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction custom_element__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction custom_element__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n// # src / custom-element.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n// import 'core-js/fn/array/for-each';\n// import 'core-js/fn/array/from';\n// import 'core-js/fn/array/map';\n// import 'core-js/fn/number/constructor';\n// import 'core-js/fn/object/keys';\n// import 'core-js/fn/object/set-prototype-of';\n// import 'core-js/fn/reflect/construct';\n// import 'core-js/fn/string/trim'; // used by camelcase\n\n\n\n\n\n\n\n\nvar CUSTOM_ELEMENT_FEATURE_TESTS = new _Set([].concat(_toConsumableArray(COMPONENT_FEATURE_TESTS), [\"template\", \"customelements\"]));\n\nvar circutBreaker = null;\n\nvar custom_element_customElementMixin = function customElementMixin(C) {\n  return function (_C) {\n    custom_element__inherits(_class, _C);\n\n    custom_element__createClass(_class, null, [{\n      key: \"getObservedAttributes\",\n      value: function getObservedAttributes() {\n        var types = this.types;\n\n        return Object.keys(types).map(function (x) {\n          return decamelize(x);\n        });\n      }\n    }]);\n\n    function _class() {\n      var _ref;\n\n      custom_element__classCallCheck(this, _class);\n\n      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      var _this = custom_element__possibleConstructorReturn(this, (_ref = _class.__proto__ || Object.getPrototypeOf(_class)).call.apply(_ref, [this].concat(args)));\n\n      _this.setupComponent(_this, _this.getStateFromAttributes());\n      return _this;\n    }\n\n    custom_element__createClass(_class, [{\n      key: \"reflectAttribute\",\n      value: function reflectAttribute(key, val) {\n        var silent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n        var attrName = decamelize(key);\n\n        if (silent) circutBreaker = attrName;\n\n        var types = this.constructor.types;\n\n        var type = types[key];\n\n        if (false) {\n          console.warn(\"No type provided for key '\" + key + \"'\");\n        }\n\n        var attr = type.stringify(val);\n\n        if (attr == null) {\n          this.removeAttribute(attrName);\n        } else {\n          this.setAttribute(attrName, attr);\n        }\n      }\n\n      /*\n      reflectAttributes() {\n        const { types } = this.constructor;\n        Object.keys(types).forEach(key => this.reflectAttribute(key, this[key], true));\n      }\n      */\n\n    }, {\n      key: \"getStateFromAttributes\",\n      value: function getStateFromAttributes() {\n        var _this2 = this;\n\n        var types = this.constructor.types;\n\n\n        var state = {};\n        Object.keys(types).forEach(function (key) {\n          var attrName = decamelize(key);\n          var attr = _this2.hasAttribute(attrName) ? _this2.getAttribute(attrName) : null;\n          var value = parseType(types[key], attr);\n          if (value != null) state[key] = value;\n        });\n\n        return state;\n      }\n    }, {\n      key: \"connectedCallback\",\n      value: function connectedCallback() {\n        /* this.reflectAttributes(); */\n        this.connectComponent();\n      }\n    }, {\n      key: \"disconnectedCallback\",\n      value: function disconnectedCallback() {\n        this.disconnectComponent();\n      }\n    }, {\n      key: \"adoptedCallback\",\n      value: function adoptedCallback() {\n        this.adoptComponent();\n      }\n    }, {\n      key: \"attributeChangedCallback\",\n      value: function attributeChangedCallback(attrName, oldAttr, attr) {\n        if (circutBreaker === attrName) circutBreaker = null;else if (oldAttr !== attr) {\n          var types = this.constructor.types;\n\n\n          var key = camelCase(attrName);\n          var value = parseType(types[key], attr);\n\n          this[key] = value != null ? value : this.constructor.defaults[key];\n        }\n      }\n    }, {\n      key: \"setInternalState\",\n      value: function setInternalState(key, value) {\n        _get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"setInternalState\", this).call(this, key, value);\n        this.reflectAttribute(key, value, true);\n      }\n    }, {\n      key: \"setupShadowDOM\",\n      value: function setupShadowDOM(el) {\n        var instance = this.getTemplate();\n        if (instance) {\n          if (\"attachShadow\" in Element.prototype) {\n            el.attachShadow({ mode: \"open\" });\n            el.shadowRoot.appendChild(instance);\n            return el.shadowRoot;\n          }\n          if (false) console.warn(\"Component doesnt define a template. Intentional?\");\n          throw Error(\"ShadowDOM API not supported\");\n        }\n        return el;\n      }\n    }, {\n      key: \"getEl\",\n      value: function getEl() {\n        return this;\n      }\n    }, {\n      key: \"getTemplate\",\n      value: function getTemplate() {\n        var componentName = this.constructor.componentName;\n\n        return document.querySelector(\"link[href*=\\\"\" + componentName + \"\\\"]\").import.querySelector(\"#\" + componentName + \"-template\").content.cloneNode(true);\n      }\n    }, {\n      key: \"template\",\n      get: function get() {\n        return this.getTemplate();\n      }\n    }]);\n\n    return _class;\n  }(C);\n};\n\n// This is a drop-in replacement for `HTMLElement` which is compatible with babel.\nfunction CustomElement() {\n  var HTMLElement = typeof window.HTMLElement === \"function\" ? window.HTMLElement : function () {};\n  return Reflect.construct(HTMLElement, [], this.__proto__.constructor); // eslint-disable-line\n}\n\nif (Object.setPrototypeOf) {\n  Object.setPrototypeOf(CustomElement.prototype, HTMLElement.prototype);\n  Object.setPrototypeOf(CustomElement, HTMLElement);\n}\n\n// TODO\nfunction fragmentFromString(strHTML) {\n  return document.createRange().createContextualFragment(strHTML);\n}\n// EXTERNAL MODULE: ./node_modules/rxjs/_esm5/util/root.js\nvar root = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/isFunction.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/isArray.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar isArray = Array.isArray || function (x) {\n  return x && typeof x.length === 'number';\n};\n//# sourceMappingURL=isArray.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/isObject.js\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction isObject(x) {\n    return x != null && (typeof x === 'undefined' ? 'undefined' : _typeof(x)) === 'object';\n}\n//# sourceMappingURL=isObject.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/errorObject.js\n// typeof any so that it we don't have to cast when comparing a result to the error object\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/tryCatch.js\n/** PURE_IMPORTS_START ._errorObject PURE_IMPORTS_END */\n\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    } catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nfunction tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n;\n//# sourceMappingURL=tryCatch.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/UnsubscriptionError.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nvar UnsubscriptionError = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ? errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) {\n            return i + 1 + \") \" + err.toString();\n        }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error);\n//# sourceMappingURL=UnsubscriptionError.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Subscription.js\nvar Subscription__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/** PURE_IMPORTS_START ._util_isArray,._util_isObject,._util_isFunction,._util_tryCatch,._util_errorObject,._util_UnsubscriptionError PURE_IMPORTS_END */\n\n\n\n\n\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nvar Subscription_Subscription = /*@__PURE__*/ /*@__PURE__*/function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this,\n            _parent = _a._parent,\n            _parents = _a._parents,\n            _unsubscribe = _a._unsubscribe,\n            _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            var trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ? flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        } else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || teardown === Subscription.EMPTY) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown === 'undefined' ? 'undefined' : Subscription__typeof(teardown)) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                } else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                        var tmp = subscription;\n                        subscription = new Subscription();\n                        subscription._subscriptions = [tmp];\n                    }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this,\n            _parent = _a._parent,\n            _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        } else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        } else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription());\n    return Subscription;\n}();\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) {\n        return errs.concat(err instanceof UnsubscriptionError ? err.errors : err);\n    }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Observer.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar empty = {\n    closed: true,\n    next: function next(value) {},\n    error: function error(err) {\n        throw err;\n    },\n    complete: function complete() {}\n};\n//# sourceMappingURL=Observer.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/symbol/rxSubscriber.js\n/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\n\nvar _Symbol = root[\"a\" /* root */].Symbol;\nvar rxSubscriber = typeof _Symbol === 'function' && typeof _Symbol.for === 'function' ?\n/*@__PURE__*/_Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nvar $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Subscriber.js\nvar Subscriber__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/** PURE_IMPORTS_START ._util_isFunction,._Subscription,._Observer,._symbol_rxSubscriber PURE_IMPORTS_END */\nvar Subscriber___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nvar Subscriber_Subscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    Subscriber___extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = empty;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = empty;\n                    break;\n                }\n                if ((typeof destinationOrNext === 'undefined' ? 'undefined' : Subscriber__typeof(destinationOrNext)) === 'object') {\n                    // HACK(benlesh): To resolve an issue where Node users may have multiple\n                    // copies of rxjs in their node_modules directory.\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriber]();\n                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        this.destination = trustedSubscriber;\n                        trustedSubscriber.add(this);\n                    } else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new Subscriber_SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new Subscriber_SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriber] = function () {\n        return this;\n    };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    /** @deprecated internal use only */Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this,\n            _parent = _a._parent,\n            _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription_Subscription);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar Subscriber_SafeSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    Subscriber___extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        } else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== empty) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                } else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            } else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            } else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function wrappedComplete() {\n                    return _this._complete.call(_this._context);\n                };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                } else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            } else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        } catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        } catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    /** @deprecated internal use only */SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber_Subscriber);\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber_Subscriber || 'syncErrorThrowable' in obj && obj[rxSubscriber];\n}\n//# sourceMappingURL=Subscriber.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/toSubscriber.js\n/** PURE_IMPORTS_START .._Subscriber,.._symbol_rxSubscriber,.._Observer PURE_IMPORTS_END */\n\n\n\nfunction toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber_Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriber]) {\n            return nextOrObserver[rxSubscriber]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber_Subscriber(empty);\n    }\n    return new Subscriber_Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/symbol/observable.js\n/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\n\nfunction getSymbolObservable(context) {\n    var $$observable;\n    var _Symbol = context.Symbol;\n    if (typeof _Symbol === 'function') {\n        if (_Symbol.observable) {\n            $$observable = _Symbol.observable;\n        } else {\n            $$observable = _Symbol('observable');\n            _Symbol.observable = $$observable;\n        }\n    } else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nvar observable_observable = /*@__PURE__*/getSymbolObservable(root[\"a\" /* root */]);\n/**\n * @deprecated use observable instead\n */\nvar $$observable = observable_observable;\n//# sourceMappingURL=observable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/noop.js\n/* tslint:disable:no-empty */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction noop() {}\n//# sourceMappingURL=noop.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/pipe.js\n/** PURE_IMPORTS_START ._noop PURE_IMPORTS_END */\n\n/* tslint:enable:max-line-length */\nfunction pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\n/* @internal */\nfunction pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) {\n            return fn(prev);\n        }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Observable.js\n/** PURE_IMPORTS_START ._util_root,._util_toSubscriber,._symbol_observable,._util_pipe PURE_IMPORTS_END */\n\n\n\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nvar Observable_Observable = /*@__PURE__*/ /*@__PURE__*/function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        } else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        } catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root[\"a\" /* root */].Rx && root[\"a\" /* root */].Rx.config && root[\"a\" /* root */].Rx.config.Promise) {\n                PromiseCtor = root[\"a\" /* root */].Rx.config.Promise;\n            } else if (root[\"a\" /* root */].Promise) {\n                PromiseCtor = root[\"a\" /* root */].Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    } catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                } else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @deprecated internal use only */Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[observable_observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root[\"a\" /* root */].Rx && root[\"a\" /* root */].Rx.config && root[\"a\" /* root */].Rx.config.Promise) {\n                PromiseCtor = root[\"a\" /* root */].Rx.config.Promise;\n            } else if (root[\"a\" /* root */].Promise) {\n                PromiseCtor = root[\"a\" /* root */].Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) {\n                return value = x;\n            }, function (err) {\n                return reject(err);\n            }, function () {\n                return resolve(value);\n            });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}();\n//# sourceMappingURL=Observable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/ObjectUnsubscribedError.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar ObjectUnsubscribedError___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nvar ObjectUnsubscribedError = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ObjectUnsubscribedError___extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error);\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/SubjectSubscription.js\n/** PURE_IMPORTS_START ._Subscription PURE_IMPORTS_END */\nvar SubjectSubscription___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubjectSubscription = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    SubjectSubscription___extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription_Subscription);\n//# sourceMappingURL=SubjectSubscription.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Subject.js\n/** PURE_IMPORTS_START ._Observable,._Subscriber,._Subscription,._util_ObjectUnsubscribedError,._SubjectSubscription,._symbol_rxSubscriber PURE_IMPORTS_END */\nvar Subject___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n\n\n/**\n * @class SubjectSubscriber<T>\n */\nvar SubjectSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    Subject___extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber_Subscriber);\n/**\n * @class Subject<T>\n */\nvar Subject_Subject = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    Subject___extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriber] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new Subject_AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        } else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    /** @deprecated internal use only */Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        } else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription_Subscription.EMPTY;\n        } else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription_Subscription.EMPTY;\n        } else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable_Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new Subject_AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable_Observable);\n/**\n * @class AnonymousSubject<T>\n */\nvar Subject_AnonymousSubject = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    Subject___extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    /** @deprecated internal use only */AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        } else {\n            return Subscription_Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject_Subject);\n//# sourceMappingURL=Subject.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/scheduler/Action.js\n/** PURE_IMPORTS_START .._Subscription PURE_IMPORTS_END */\nvar Action___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nvar Action = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    Action___extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return this;\n    };\n    return Action;\n}(Subscription_Subscription);\n//# sourceMappingURL=Action.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/scheduler/AsyncAction.js\n/** PURE_IMPORTS_START .._util_root,._Action PURE_IMPORTS_END */\nvar AsyncAction___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsyncAction_AsyncAction = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    AsyncAction___extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return root[\"a\" /* root */].setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root[\"a\" /* root */].clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        } else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        } catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    /** @deprecated internal use only */AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action);\n//# sourceMappingURL=AsyncAction.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/scheduler/QueueAction.js\n/** PURE_IMPORTS_START ._AsyncAction PURE_IMPORTS_END */\nvar QueueAction___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar QueueAction = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    QueueAction___extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return delay > 0 || this.closed ? _super.prototype.execute.call(this, state, delay) : this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if (delay !== null && delay > 0 || delay === null && this.delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction_AsyncAction);\n//# sourceMappingURL=QueueAction.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Scheduler.js\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = /*@__PURE__*/ /*@__PURE__*/function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) {\n            now = Scheduler.now;\n        }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () {\n        return +new Date();\n    };\n    return Scheduler;\n}();\n//# sourceMappingURL=Scheduler.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/scheduler/AsyncScheduler.js\n/** PURE_IMPORTS_START .._Scheduler PURE_IMPORTS_END */\nvar AsyncScheduler___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar AsyncScheduler = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    AsyncScheduler___extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler);\n//# sourceMappingURL=AsyncScheduler.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/scheduler/QueueScheduler.js\n/** PURE_IMPORTS_START ._AsyncScheduler PURE_IMPORTS_END */\nvar QueueScheduler___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar QueueScheduler = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    QueueScheduler___extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        _super.apply(this, arguments);\n    }\n    return QueueScheduler;\n}(AsyncScheduler);\n//# sourceMappingURL=QueueScheduler.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/scheduler/queue.js\n/** PURE_IMPORTS_START ._QueueAction,._QueueScheduler PURE_IMPORTS_END */\n\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nvar queue = /*@__PURE__*/new QueueScheduler(QueueAction);\n//# sourceMappingURL=queue.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/Notification.js\n/** PURE_IMPORTS_START ._Observable PURE_IMPORTS_END */\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nvar Notification_Notification = /*@__PURE__*/ /*@__PURE__*/function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        } else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable_Observable.of(this.value);\n            case 'E':\n                return Observable_Observable.throw(this.error);\n            case 'C':\n                return Observable_Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}();\n//# sourceMappingURL=Notification.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/observeOn.js\n/** PURE_IMPORTS_START .._Subscriber,.._Notification PURE_IMPORTS_END */\nvar observeOn___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nfunction observeOn(scheduler, delay) {\n    if (delay === void 0) {\n        delay = 0;\n    }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nvar ObserveOnOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new observeOn_ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar observeOn_ObserveOnSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    observeOn___extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification,\n            destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification_Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification_Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification_Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber_Subscriber);\nvar ObserveOnMessage = /*@__PURE__*/ /*@__PURE__*/function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}();\n//# sourceMappingURL=observeOn.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/ReplaySubject.js\n/** PURE_IMPORTS_START ._Subject,._scheduler_queue,._Subscription,._operators_observeOn,._util_ObjectUnsubscribedError,._SubjectSubscription PURE_IMPORTS_END */\nvar ReplaySubject___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n\n\n/**\n * @class ReplaySubject<T>\n */\nvar ReplaySubject_ReplaySubject = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ReplaySubject___extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) {\n            bufferSize = Number.POSITIVE_INFINITY;\n        }\n        if (windowTime === void 0) {\n            windowTime = Number.POSITIVE_INFINITY;\n        }\n        _super.call(this);\n        this.scheduler = scheduler;\n        this._events = [];\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n    }\n    ReplaySubject.prototype.next = function (value) {\n        var now = this._getNow();\n        this._events.push(new ReplayEvent(now, value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    /** @deprecated internal use only */ReplaySubject.prototype._subscribe = function (subscriber) {\n        var _events = this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        } else if (this.hasError) {\n            subscription = Subscription_Subscription.EMPTY;\n        } else if (this.isStopped) {\n            subscription = Subscription_Subscription.EMPTY;\n        } else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new observeOn_ObserveOnSubscriber(subscriber, scheduler));\n        }\n        var len = _events.length;\n        for (var i = 0; i < len && !subscriber.closed; i++) {\n            subscriber.next(_events[i].value);\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        } else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if (now - _events[spliceCount].time < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject_Subject);\nvar ReplayEvent = /*@__PURE__*/ /*@__PURE__*/function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}();\n//# sourceMappingURL=ReplaySubject.js.map\n// CONCATENATED MODULE: ./node_modules/hy-component/src/rxjs.js\nvar rxjs__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar rxjs__get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction rxjs__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction rxjs__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction rxjs__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// # src / rxjs.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n\n\n\nvar rxjs_rxjsMixin = function rxjsMixin(C) {\n  return function (_C) {\n    rxjs__inherits(_class, _C);\n\n    function _class() {\n      rxjs__classCallCheck(this, _class);\n\n      return rxjs__possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    rxjs__createClass(_class, [{\n      key: \"setupComponent\",\n      value: function setupComponent(el, opts) {\n        var _this2 = this;\n\n        var sideEffects = {};\n\n        this.subjects = {};\n        this.subjects.disconnect = new Subject_Subject();\n        this.subjects.document = new ReplaySubject_ReplaySubject();\n\n        Object.keys(this.constructor.types).map(function (key) {\n          _this2.subjects[key] = new ReplaySubject_ReplaySubject(1);\n          sideEffects[key] = function (x) {\n            return _this2.subjects[key].next(x);\n          };\n        });\n\n        Object.defineProperty(this.constructor, \"sideEffects\", {\n          get: function get() {\n            return sideEffects;\n          },\n          set: function set() {},\n          enumerable: true,\n          configurable: true\n        });\n\n        rxjs__get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"setupComponent\", this).call(this, el, opts);\n      }\n    }, {\n      key: \"connectComponent\",\n      value: function connectComponent() {\n        var _this3 = this;\n\n        rxjs__get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"connectComponent\", this).call(this);\n        this.subjects.document.next(document);\n        Object.keys(this.constructor.types).map(function (key) {\n          return _this3.subjects[key].next(_this3[key]);\n        });\n      }\n    }, {\n      key: \"disconnectComponent\",\n      value: function disconnectComponent() {\n        rxjs__get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"disconnectComponent\", this).call(this);\n        this.subjects.disconnect.next({});\n      }\n    }, {\n      key: \"adaptComponent\",\n      value: function adaptComponent() {\n        rxjs__get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"adaptComponent\", this).call(this);\n        this.subjects.document.next(document);\n      }\n    }]);\n\n    return _class;\n  }(C);\n};\n// CONCATENATED MODULE: ./node_modules/attr-types/array.js\nvar array_array = function array(attr) {\n  if (attr == null) return null;\n\n  var str = attr.trim().replace(/^\\[?(.*?)\\]?$/, '$1').split(',').map(function (x) {\n    return x.trim();\n  });\n\n  return str || null;\n};\n\narray_array.stringify = function (a) {\n  return a && a.length > 0 ? a.join(',') : null;\n};\n\n/* harmony default export */ var attr_types_array = (array_array);\n// CONCATENATED MODULE: ./node_modules/attr-types/array-of.js\n\n\nvar array_of_arrayOf = function arrayOf(type) {\n  var f = function f(attr) {\n    if (attr == null) return null;\n    var a = array_array(attr).map(type);\n    if (a.reduce(function (r, x) {\n      return r && x !== null;\n    }, true)) {\n      return a;\n    }\n    return null;\n  };\n\n  f.stringify = function (a) {\n    var a2 = a && a.map && a.map(type.stringify);\n    if (a2 && a2.reduce(function (r, x) {\n      return r && x !== null;\n    }, true)) {\n      return array_array.stringify(a2);\n    }\n    return null;\n  };\n\n  return f;\n};\n\n/* harmony default export */ var array_of = (array_of_arrayOf);\n// CONCATENATED MODULE: ./node_modules/attr-types/bool.js\nvar bool = function bool(attr) {\n  if (attr == null) return false;\n  var attr2 = attr.trim && attr.trim() || attr;\n  return !(attr2 === 'false' || attr2 === 'null' || attr2 === 'undefined' || attr2 === '0' || attr2 === false);\n};\n\nbool.stringify = function (b) {\n  return b ? '' : null;\n};\n\n/* harmony default export */ var attr_types_bool = (bool);\n// CONCATENATED MODULE: ./node_modules/attr-types/number.js\nvar number = function number(attr) {\n  if (attr == null) return null;\n  return Number(attr);\n};\n\nnumber.stringify = function (n) {\n  if (n == null) return null;\n  return \"\" + n;\n};\n\n/* harmony default export */ var attr_types_number = (number);\n// CONCATENATED MODULE: ./node_modules/attr-types/one-of.js\nvar oneOf = function oneOf(alts) {\n  var f = function f(attr) {\n    if (attr == null) return null;\n\n    var i = alts.indexOf(attr);\n    if (false) {\n      console.warn('\\'' + attr + '\\' is not \\'oneOf\\': ' + alts.join(', '));\n    }\n\n    return i > -1 ? alts[i] : null;\n  };\n\n  f.stringify = function (o) {\n    return alts.indexOf(o) !== -1 ? o : null;\n  };\n\n  return f;\n};\n\n/* harmony default export */ var one_of = (oneOf);\n// CONCATENATED MODULE: ./node_modules/attr-types/regex.js\nvar regex = function regex(attr) {\n  if (attr == null) return null;\n  var attr2 = attr.trim && attr.trim() || attr;\n  var match = attr2.match(/^\\/?(.*?)(\\/([gimy]*))?$/);\n  return new RegExp(match[1], match[3]);\n};\n\nregex.stringify = function (r) {\n  return r && r.toString() || null;\n};\n\n/* harmony default export */ var attr_types_regex = (regex);\n// CONCATENATED MODULE: ./node_modules/attr-types/string.js\nvar string = function string(attr) {\n  return attr;\n};\n\nstring.stringify = function (s) {\n  return s;\n};\n\n/* harmony default export */ var attr_types_string = (string);\n// CONCATENATED MODULE: ./node_modules/attr-types/index.js\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ var attr_types = ({\n  array: array_array, arrayOf: array_of_arrayOf, bool: bool, number: number, oneOf: oneOf, regex: regex, string: string\n});\n// CONCATENATED MODULE: ./node_modules/hy-component/src/types.js\n\n\n\n/* harmony default export */ var src_types = ({\n  array: array_array,\n  arrayOf: array_of_arrayOf,\n  bool: bool,\n  number: number,\n  oneOf: oneOf,\n  regex: regex,\n  string: string\n});\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/isScheduler.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/ScalarObservable.js\n/** PURE_IMPORTS_START .._Observable PURE_IMPORTS_END */\nvar ScalarObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ScalarObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ScalarObservable___extends(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        _super.call(this);\n        this.value = value;\n        this.scheduler = scheduler;\n        this._isScalar = true;\n        if (scheduler) {\n            this._isScalar = false;\n        }\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done,\n            value = state.value,\n            subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        } else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable_Observable);\n//# sourceMappingURL=ScalarObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/EmptyObservable.js\n/** PURE_IMPORTS_START .._Observable PURE_IMPORTS_END */\nvar EmptyObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar EmptyObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    EmptyObservable___extends(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following to the console:\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\n     * // x will occur every 1000ms\n     * // if x % 2 is equal to 1 print abc\n     * // if x % 2 is not equal to 1 nothing will be output\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    /** @deprecated internal use only */EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        } else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable_Observable);\n//# sourceMappingURL=EmptyObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/ArrayObservable.js\n/** PURE_IMPORTS_START .._Observable,._ScalarObservable,._EmptyObservable,.._util_isScheduler PURE_IMPORTS_END */\nvar ArrayObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayObservable_ArrayObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ArrayObservable___extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler(scheduler)) {\n            array.pop();\n        } else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        } else if (len === 1) {\n            return new ScalarObservable(array[0], scheduler);\n        } else {\n            return new EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array,\n            index = state.index,\n            count = state.count,\n            subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        } else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable_Observable);\n//# sourceMappingURL=ArrayObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/OuterSubscriber.js\n/** PURE_IMPORTS_START ._Subscriber PURE_IMPORTS_END */\nvar OuterSubscriber___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar OuterSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    OuterSubscriber___extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=OuterSubscriber.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/isArrayLike.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar isArrayLike = function isArrayLike(x) {\n  return x && typeof x.length === 'number';\n};\n//# sourceMappingURL=isArrayLike.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/isPromise.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/symbol/iterator.js\n/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\n\nfunction symbolIteratorPonyfill(root) {\n    var _Symbol = root.Symbol;\n    if (typeof _Symbol === 'function') {\n        if (!_Symbol.iterator) {\n            _Symbol.iterator = _Symbol('iterator polyfill');\n        }\n        return _Symbol.iterator;\n    } else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nvar iterator_iterator = /*@__PURE__*/symbolIteratorPonyfill(root[\"a\" /* root */]);\n/**\n * @deprecated use iterator instead\n */\nvar $$iterator = iterator_iterator;\n//# sourceMappingURL=iterator.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/InnerSubscriber.js\n/** PURE_IMPORTS_START ._Subscriber PURE_IMPORTS_END */\nvar InnerSubscriber___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar InnerSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    InnerSubscriber___extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=InnerSubscriber.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/subscribeToResult.js\n/** PURE_IMPORTS_START ._root,._isArrayLike,._isPromise,._isObject,.._Observable,.._symbol_iterator,.._InnerSubscriber,.._symbol_observable PURE_IMPORTS_END */\n\n\n\n\n\n\n\n\nfunction subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable_Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        } else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    } else if (isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    } else if (isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) {\n            return destination.error(err);\n        }).then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root[\"a\" /* root */].setTimeout(function () {\n                throw err;\n            });\n        });\n        return destination;\n    } else if (result && typeof result[iterator_iterator] === 'function') {\n        var iterator = result[iterator_iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    } else if (result && typeof result[observable_observable] === 'function') {\n        var obs = result[observable_observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        } else {\n            return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    } else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = \"You provided \" + value + \" where a stream was expected.\" + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\n//# sourceMappingURL=subscribeToResult.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/combineLatest.js\n/** PURE_IMPORTS_START .._observable_ArrayObservable,.._util_isArray,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar combineLatest___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\nvar none = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) {\n        return source.lift.call(new ArrayObservable_ArrayObservable([source].concat(observables)), new CombineLatestOperator(project));\n    };\n}\nvar CombineLatestOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new combineLatest_CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar combineLatest_CombineLatestSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    combineLatest___extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        _super.call(this, destination);\n        this.project = project;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(none);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        } else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond ? 0 : oldVal === none ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            } else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=combineLatest.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/combineLatest.js\n/** PURE_IMPORTS_START .._util_isScheduler,.._util_isArray,._ArrayObservable,.._operators_combineLatest PURE_IMPORTS_END */\n\n\n\n\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nfunction combineLatest_combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    var scheduler = null;\n    if (isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return new ArrayObservable_ArrayObservable(observables, scheduler).lift(new CombineLatestOperator(project));\n}\n//# sourceMappingURL=combineLatest.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/DeferObservable.js\n/** PURE_IMPORTS_START .._Observable,.._util_subscribeToResult,.._OuterSubscriber PURE_IMPORTS_END */\nvar DeferObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar DeferObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    DeferObservable___extends(DeferObservable, _super);\n    function DeferObservable(observableFactory) {\n        _super.call(this);\n        this.observableFactory = observableFactory;\n    }\n    /**\n     * Creates an Observable that, on subscribe, calls an Observable factory to\n     * make an Observable for each new Observer.\n     *\n     * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n     * is subscribed.\n     * </span>\n     *\n     * <img src=\"./img/defer.png\" width=\"100%\">\n     *\n     * `defer` allows you to create the Observable only when the Observer\n     * subscribes, and create a fresh Observable for each Observer. It waits until\n     * an Observer subscribes to it, and then it generates an Observable,\n     * typically with an Observable factory function. It does this afresh for each\n     * subscriber, so although each subscriber may think it is subscribing to the\n     * same Observable, in fact each subscriber gets its own individual\n     * Observable.\n     *\n     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n     * var clicksOrInterval = Rx.Observable.defer(function () {\n     *   if (Math.random() > 0.5) {\n     *     return Rx.Observable.fromEvent(document, 'click');\n     *   } else {\n     *     return Rx.Observable.interval(1000);\n     *   }\n     * });\n     * clicksOrInterval.subscribe(x => console.log(x));\n     *\n     * // Results in the following behavior:\n     * // If the result of Math.random() is greater than 0.5 it will listen\n     * // for clicks anywhere on the \"document\"; when document is clicked it\n     * // will log a MouseEvent object to the console. If the result is less\n     * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n     *\n     * @see {@link create}\n     *\n     * @param {function(): SubscribableOrPromise} observableFactory The Observable\n     * factory function to invoke for each Observer that subscribes to the output\n     * Observable. May also return a Promise, which will be converted on the fly\n     * to an Observable.\n     * @return {Observable} An Observable whose Observers' subscriptions trigger\n     * an invocation of the given Observable factory function.\n     * @static true\n     * @name defer\n     * @owner Observable\n     */\n    DeferObservable.create = function (observableFactory) {\n        return new DeferObservable(observableFactory);\n    };\n    /** @deprecated internal use only */DeferObservable.prototype._subscribe = function (subscriber) {\n        return new DeferObservable_DeferSubscriber(subscriber, this.observableFactory);\n    };\n    return DeferObservable;\n}(Observable_Observable);\nvar DeferObservable_DeferSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    DeferObservable___extends(DeferSubscriber, _super);\n    function DeferSubscriber(destination, factory) {\n        _super.call(this, destination);\n        this.factory = factory;\n        this.tryDefer();\n    }\n    DeferSubscriber.prototype.tryDefer = function () {\n        try {\n            this._callFactory();\n        } catch (err) {\n            this._error(err);\n        }\n    };\n    DeferSubscriber.prototype._callFactory = function () {\n        var result = this.factory();\n        if (result) {\n            this.add(subscribeToResult(this, result));\n        }\n    };\n    return DeferSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=DeferObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/defer.js\n/** PURE_IMPORTS_START ._DeferObservable PURE_IMPORTS_END */\n\nvar defer = DeferObservable.create;\n//# sourceMappingURL=defer.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/FromEventObservable.js\n/** PURE_IMPORTS_START .._Observable,.._util_tryCatch,.._util_isFunction,.._util_errorObject,.._Subscription PURE_IMPORTS_END */\nvar FromEventObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n\nvar FromEventObservable_toString = Object.prototype.toString;\nfunction isNodeStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isNodeList(sourceObj) {\n    return !!sourceObj && FromEventObservable_toString.call(sourceObj) === '[object NodeList]';\n}\nfunction isHTMLCollection(sourceObj) {\n    return !!sourceObj && FromEventObservable_toString.call(sourceObj) === '[object HTMLCollection]';\n}\nfunction isEventTarget(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromEventObservable_FromEventObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    FromEventObservable___extends(FromEventObservable, _super);\n    function FromEventObservable(sourceObj, eventName, selector, options) {\n        _super.call(this);\n        this.sourceObj = sourceObj;\n        this.eventName = eventName;\n        this.selector = selector;\n        this.options = options;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Creates an Observable that emits events of a specific type coming from the\n     * given event target.\n     *\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n     * EventEmitter events or others.</span>\n     *\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n     *\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\n     * for registering event handler functions. As a second argument it takes string that indicates\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n     * which are described in detail below. If your event target does not match any of the ones listed,\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n     * handler functions have different names, but they all accept a string describing event type\n     * and function itself, which will be called whenever said event happens.\n     *\n     * Every time resulting Observable is subscribed, event handler function will be registered\n     * to event target on given event type. When that event fires, value\n     * passed as a first argument to registered function will be emitted by output Observable.\n     * When Observable is unsubscribed, function will be unregistered from event target.\n     *\n     * Note that if event target calls registered function with more than one argument, second\n     * and following arguments will not appear in resulting stream. In order to get access to them,\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\n     * passed to event handler. Output Observable will then emit value returned by project function,\n     * instead of the usual value.\n     *\n     * Remember that event targets listed below are checked via duck typing. It means that\n     * no matter what kind of object you have and no matter what environment you work in,\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\n     * of course they behave as was described above). So for example if Node.js library exposes\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n     * a good choice.\n     *\n     * If the API you use is more callback then event handler oriented (subscribed\n     * callback function fires only once and thus there is no need to manually\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n     * instead.\n     *\n     * `fromEvent` supports following types of event targets:\n     *\n     * **DOM EventTarget**\n     *\n     * This is an object with `addEventListener` and `removeEventListener` methods.\n     *\n     * In the browser, `addEventListener` accepts - apart from event type string and event\n     * handler function arguments - optional third parameter, which is either an object or boolean,\n     * both used for additional configuration how and when passed function will be called. When\n     * `fromEvent` is used with event target of that type, you can provide this values\n     * as third parameter as well.\n     *\n     * **Node.js EventEmitter**\n     *\n     * An object with `addListener` and `removeListener` methods.\n     *\n     * **JQuery-style event target**\n     *\n     * An object with `on` and `off` methods\n     *\n     * **DOM NodeList**\n     *\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n     *\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n     * it contains and install event handler function in every of them. When returned Observable\n     * is unsubscribed, function will be removed from all Nodes.\n     *\n     * **DOM HtmlCollection**\n     *\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n     * installed and removed in each of elements.\n     *\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\n     * clicks.subscribe(x => console.log(x));\n     *\n     * // Results in:\n     * // MouseEvent object logged to console every time a click\n     * // occurs on the document.\n     *\n     *\n     * @example <caption>Use addEventListener with capture option</caption>\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n     *                                                                          // which will be passed to addEventListener\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n     *\n     * clicksInDocument.subscribe(() => console.log('document'));\n     * clicksInDiv.subscribe(() => console.log('div'));\n     *\n     * // By default events bubble UP in DOM tree, so normally\n     * // when we would click on div in document\n     * // \"div\" would be logged first and then \"document\".\n     * // Since we specified optional `capture` option, document\n     * // will catch event when it goes DOWN DOM tree, so console\n     * // will log \"document\" and then \"div\".\n     *\n     * @see {@link bindCallback}\n     * @see {@link bindNodeCallback}\n     * @see {@link fromEventPattern}\n     *\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n     * @param {string} eventName The event name of interest, being emitted by the\n     * `target`.\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEvent\n     * @owner Observable\n     */\n    FromEventObservable.create = function (target, eventName, options, selector) {\n        if (isFunction(options)) {\n            selector = options;\n            options = undefined;\n        }\n        return new FromEventObservable(target, eventName, selector, options);\n    };\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n        var unsubscribe;\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n            }\n        } else if (isEventTarget(sourceObj)) {\n            var source_1 = sourceObj;\n            sourceObj.addEventListener(eventName, handler, options);\n            unsubscribe = function unsubscribe() {\n                return source_1.removeEventListener(eventName, handler, options);\n            };\n        } else if (isJQueryStyleEventEmitter(sourceObj)) {\n            var source_2 = sourceObj;\n            sourceObj.on(eventName, handler);\n            unsubscribe = function unsubscribe() {\n                return source_2.off(eventName, handler);\n            };\n        } else if (isNodeStyleEventEmitter(sourceObj)) {\n            var source_3 = sourceObj;\n            sourceObj.addListener(eventName, handler);\n            unsubscribe = function unsubscribe() {\n                return source_3.removeListener(eventName, handler);\n            };\n        } else {\n            throw new TypeError('Invalid event target');\n        }\n        subscriber.add(new Subscription_Subscription(unsubscribe));\n    };\n    /** @deprecated internal use only */FromEventObservable.prototype._subscribe = function (subscriber) {\n        var sourceObj = this.sourceObj;\n        var eventName = this.eventName;\n        var options = this.options;\n        var selector = this.selector;\n        var handler = selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var result = tryCatch(selector).apply(void 0, args);\n            if (result === errorObject) {\n                subscriber.error(errorObject.e);\n            } else {\n                subscriber.next(result);\n            }\n        } : function (e) {\n            return subscriber.next(e);\n        };\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n    };\n    return FromEventObservable;\n}(Observable_Observable);\n//# sourceMappingURL=FromEventObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/fromEvent.js\n/** PURE_IMPORTS_START ._FromEventObservable PURE_IMPORTS_END */\n\nvar fromEvent = FromEventObservable_FromEventObservable.create;\n//# sourceMappingURL=fromEvent.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/mergeMap.js\n/** PURE_IMPORTS_START .._util_subscribeToResult,.._OuterSubscriber PURE_IMPORTS_END */\nvar mergeMap___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nfunction mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nvar MergeMapOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new mergeMap_MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar mergeMap_MergeMapSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    mergeMap___extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        } else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        } else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        } else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=mergeMap.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/identity.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nfunction identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/mergeAll.js\n/** PURE_IMPORTS_START ._mergeMap,.._util_identity PURE_IMPORTS_END */\n\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nfunction mergeAll(concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return mergeMap(identity, null, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/merge.js\n/** PURE_IMPORTS_START .._Observable,._ArrayObservable,.._util_isScheduler,.._operators_mergeAll PURE_IMPORTS_END */\n\n\n\n\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nfunction merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    } else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable_Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(new ArrayObservable_ArrayObservable(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/NeverObservable.js\n/** PURE_IMPORTS_START .._Observable,.._util_noop PURE_IMPORTS_END */\nvar NeverObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar NeverObservable_NeverObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    NeverObservable___extends(NeverObservable, _super);\n    function NeverObservable() {\n        _super.call(this);\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer.\n     *\n     * <span class=\"informal\">An Observable that never emits anything.</span>\n     *\n     * <img src=\"./img/never.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that emits\n     * neither values nor errors nor the completion notification. It can be used\n     * for testing purposes or for composing with other Observables. Please note\n     * that by never emitting a complete notification, this Observable keeps the\n     * subscription from being disposed automatically. Subscriptions need to be\n     * manually disposed.\n     *\n     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n     * function info() {\n     *   console.log('Will not be called');\n     * }\n     * var result = Rx.Observable.never().startWith(7);\n     * result.subscribe(x => console.log(x), info, info);\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @return {Observable} A \"never\" Observable: never emits anything.\n     * @static true\n     * @name never\n     * @owner Observable\n     */\n    NeverObservable.create = function () {\n        return new NeverObservable();\n    };\n    /** @deprecated internal use only */NeverObservable.prototype._subscribe = function (subscriber) {\n        noop();\n    };\n    return NeverObservable;\n}(Observable_Observable);\n//# sourceMappingURL=NeverObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/never.js\n/** PURE_IMPORTS_START ._NeverObservable PURE_IMPORTS_END */\n\nvar never = NeverObservable_NeverObservable.create;\n//# sourceMappingURL=never.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/tap.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar tap___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nfunction tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nvar DoOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new tap_DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar tap_DoSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    tap___extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        _super.call(this, destination);\n        var safeSubscriber = new Subscriber_Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        this.add(safeSubscriber);\n        this.safeSubscriber = safeSubscriber;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        } else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        } else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        } else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=tap.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/filter.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar filter___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nfunction filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nvar FilterOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    filter___extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=filter.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/map.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar map___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nfunction map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nvar MapOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    map___extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=map.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/pairwise.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar pairwise___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nfunction pairwise() {\n    return function (source) {\n        return source.lift(new PairwiseOperator());\n    };\n}\nvar PairwiseOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function PairwiseOperator() {}\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    pairwise___extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasPrev = false;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        } else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=pairwise.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/repeatWhen.js\n/** PURE_IMPORTS_START .._Subject,.._util_tryCatch,.._util_errorObject,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar repeatWhen___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nfunction repeatWhen(notifier) {\n    return function (source) {\n        return source.lift(new RepeatWhenOperator(notifier));\n    };\n}\nvar RepeatWhenOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new repeatWhen_RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar repeatWhen_RepeatWhenSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    repeatWhen___extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    /** @deprecated internal use only */RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this,\n            notifications = _a.notifications,\n            retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    /** @deprecated internal use only */RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this,\n            notifications = _a.notifications,\n            retries = _a.retries,\n            retriesSubscription = _a.retriesSubscription;\n        this.notifications = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this.notifications = notifications;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject_Subject();\n        var retries = tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=repeatWhen.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/sample.js\n/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar sample___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nfunction sample(notifier) {\n    return function (source) {\n        return source.lift(new sample_SampleOperator(notifier));\n    };\n}\nvar sample_SampleOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    sample___extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        _super.apply(this, arguments);\n        this.hasValue = false;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=sample.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/refCount.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar refCount___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nfunction refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}();\nvar RefCountSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    refCount___extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    /** @deprecated internal use only */RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=refCount.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/ConnectableObservable.js\n/** PURE_IMPORTS_START .._Subject,.._Observable,.._Subscriber,.._Subscription,.._operators_refCount PURE_IMPORTS_END */\nvar ConnectableObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable_ConnectableObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ConnectableObservable___extends(ConnectableObservable, _super);\n    function ConnectableObservable( /** @deprecated internal use only */source,\n    /** @deprecated internal use only */subjectFactory) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        /** @deprecated internal use only */this._refCount = 0;\n        this._isComplete = false;\n    }\n    /** @deprecated internal use only */ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    /** @deprecated internal use only */ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription_Subscription();\n            connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription_Subscription.EMPTY;\n            } else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return refCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable_Observable);\nvar connectableProto = ConnectableObservable_ConnectableObservable.prototype;\nvar connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ConnectableObservable___extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated internal use only */ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber);\nvar ConnectableObservable_RefCountOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new ConnectableObservable_RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}();\nvar ConnectableObservable_RefCountSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ConnectableObservable___extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    /** @deprecated internal use only */RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=ConnectableObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/multicast.js\n/** PURE_IMPORTS_START .._observable_ConnectableObservable PURE_IMPORTS_END */\n\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nfunction multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        } else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nvar MulticastOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}();\n//# sourceMappingURL=multicast.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/share.js\n/** PURE_IMPORTS_START ._multicast,._refCount,.._Subject PURE_IMPORTS_END */\n\n\n\nfunction shareSubjectFactory() {\n    return new Subject_Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nfunction share() {\n    return function (source) {\n        return refCount()(multicast(shareSubjectFactory)(source));\n    };\n}\n;\n//# sourceMappingURL=share.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/skip.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar skip___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nfunction skip(count) {\n    return function (source) {\n        return source.lift(new SkipOperator(count));\n    };\n}\nvar SkipOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    skip___extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=skip.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/of.js\n/** PURE_IMPORTS_START ._ArrayObservable PURE_IMPORTS_END */\n\nvar of = ArrayObservable_ArrayObservable.of;\n//# sourceMappingURL=of.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/PromiseObservable.js\n/** PURE_IMPORTS_START .._util_root,.._Observable PURE_IMPORTS_END */\nvar PromiseObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar PromiseObservable_PromiseObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    PromiseObservable___extends(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        _super.call(this);\n        this.promise = promise;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {PromiseLike<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    /** @deprecated internal use only */PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            } else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                }).then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root[\"a\" /* root */].setTimeout(function () {\n                        throw err;\n                    });\n                });\n            }\n        } else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            } else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                }).then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root[\"a\" /* root */].setTimeout(function () {\n                        throw err;\n                    });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable_Observable);\nfunction dispatchNext(arg) {\n    var value = arg.value,\n        subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err,\n        subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n//# sourceMappingURL=PromiseObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/IteratorObservable.js\n/** PURE_IMPORTS_START .._util_root,.._Observable,.._symbol_iterator PURE_IMPORTS_END */\nvar IteratorObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IteratorObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    IteratorObservable___extends(IteratorObservable, _super);\n    function IteratorObservable(iterator, scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n        if (iterator == null) {\n            throw new Error('iterator cannot be null.');\n        }\n        this.iterator = getIterator(iterator);\n    }\n    IteratorObservable.create = function (iterator, scheduler) {\n        return new IteratorObservable(iterator, scheduler);\n    };\n    IteratorObservable.dispatch = function (state) {\n        var index = state.index,\n            hasError = state.hasError,\n            iterator = state.iterator,\n            subscriber = state.subscriber;\n        if (hasError) {\n            subscriber.error(state.error);\n            return;\n        }\n        var result = iterator.next();\n        if (result.done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(result.value);\n        state.index = index + 1;\n        if (subscriber.closed) {\n            if (typeof iterator.return === 'function') {\n                iterator.return();\n            }\n            return;\n        }\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */IteratorObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this,\n            iterator = _a.iterator,\n            scheduler = _a.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n                index: index, iterator: iterator, subscriber: subscriber\n            });\n        } else {\n            do {\n                var result = iterator.next();\n                if (result.done) {\n                    subscriber.complete();\n                    break;\n                } else {\n                    subscriber.next(result.value);\n                }\n                if (subscriber.closed) {\n                    if (typeof iterator.return === 'function') {\n                        iterator.return();\n                    }\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return IteratorObservable;\n}(Observable_Observable);\nvar IteratorObservable_StringIterator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function StringIterator(str, idx, len) {\n        if (idx === void 0) {\n            idx = 0;\n        }\n        if (len === void 0) {\n            len = str.length;\n        }\n        this.str = str;\n        this.idx = idx;\n        this.len = len;\n    }\n    StringIterator.prototype[iterator_iterator] = function () {\n        return this;\n    };\n    StringIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.str.charAt(this.idx++)\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return StringIterator;\n}();\nvar IteratorObservable_ArrayIterator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function ArrayIterator(arr, idx, len) {\n        if (idx === void 0) {\n            idx = 0;\n        }\n        if (len === void 0) {\n            len = toLength(arr);\n        }\n        this.arr = arr;\n        this.idx = idx;\n        this.len = len;\n    }\n    ArrayIterator.prototype[iterator_iterator] = function () {\n        return this;\n    };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return ArrayIterator;\n}();\nfunction getIterator(obj) {\n    var i = obj[iterator_iterator];\n    if (!i && typeof obj === 'string') {\n        return new IteratorObservable_StringIterator(obj);\n    }\n    if (!i && obj.length !== undefined) {\n        return new IteratorObservable_ArrayIterator(obj);\n    }\n    if (!i) {\n        throw new TypeError('object is not iterable');\n    }\n    return obj[iterator_iterator]();\n}\nvar maxSafeInteger = /*@__PURE__*/Math.pow(2, 53) - 1;\nfunction toLength(o) {\n    var len = +o.length;\n    if (isNaN(len)) {\n        return 0;\n    }\n    if (len === 0 || !numberIsFinite(len)) {\n        return len;\n    }\n    len = sign(len) * Math.floor(Math.abs(len));\n    if (len <= 0) {\n        return 0;\n    }\n    if (len > maxSafeInteger) {\n        return maxSafeInteger;\n    }\n    return len;\n}\nfunction numberIsFinite(value) {\n    return typeof value === 'number' && root[\"a\" /* root */].isFinite(value);\n}\nfunction sign(value) {\n    var valueAsNumber = +value;\n    if (valueAsNumber === 0) {\n        return valueAsNumber;\n    }\n    if (isNaN(valueAsNumber)) {\n        return valueAsNumber;\n    }\n    return valueAsNumber < 0 ? -1 : 1;\n}\n//# sourceMappingURL=IteratorObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/ArrayLikeObservable.js\n/** PURE_IMPORTS_START .._Observable,._ScalarObservable,._EmptyObservable PURE_IMPORTS_END */\nvar ArrayLikeObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar ArrayLikeObservable_ArrayLikeObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ArrayLikeObservable___extends(ArrayLikeObservable, _super);\n    function ArrayLikeObservable(arrayLike, scheduler) {\n        _super.call(this);\n        this.arrayLike = arrayLike;\n        this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            this._isScalar = true;\n            this.value = arrayLike[0];\n        }\n    }\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n        var length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable();\n        } else if (length === 1) {\n            return new ScalarObservable(arrayLike[0], scheduler);\n        } else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    };\n    ArrayLikeObservable.dispatch = function (state) {\n        var arrayLike = state.arrayLike,\n            index = state.index,\n            length = state.length,\n            subscriber = state.subscriber;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this,\n            arrayLike = _a.arrayLike,\n            scheduler = _a.scheduler;\n        var length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n            });\n        } else {\n            for (var i = 0; i < length && !subscriber.closed; i++) {\n                subscriber.next(arrayLike[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayLikeObservable;\n}(Observable_Observable);\n//# sourceMappingURL=ArrayLikeObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/FromObservable.js\nvar FromObservable__typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\n/** PURE_IMPORTS_START .._util_isArray,.._util_isArrayLike,.._util_isPromise,._PromiseObservable,._IteratorObservable,._ArrayObservable,._ArrayLikeObservable,.._symbol_iterator,.._Observable,.._operators_observeOn,.._symbol_observable PURE_IMPORTS_END */\nvar FromObservable___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n\n\n\n\n\n\n\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar FromObservable_FromObservable = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    FromObservable___extends(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        _super.call(this, null);\n        this.ish = ish;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 10 20 30\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 3 6 12 24 48 96 192 384 768 1536\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[observable_observable] === 'function') {\n                if (ish instanceof Observable_Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            } else if (isArray(ish)) {\n                return new ArrayObservable_ArrayObservable(ish, scheduler);\n            } else if (isPromise(ish)) {\n                return new PromiseObservable_PromiseObservable(ish, scheduler);\n            } else if (typeof ish[iterator_iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable(ish, scheduler);\n            } else if (isArrayLike(ish)) {\n                return new ArrayLikeObservable_ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && (typeof ish === 'undefined' ? 'undefined' : FromObservable__typeof(ish)) || ish) + ' is not observable');\n    };\n    /** @deprecated internal use only */FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[observable_observable]().subscribe(subscriber);\n        } else {\n            return ish[observable_observable]().subscribe(new observeOn_ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable_Observable);\n//# sourceMappingURL=FromObservable.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/from.js\n/** PURE_IMPORTS_START ._FromObservable PURE_IMPORTS_END */\n\nvar from = FromObservable_FromObservable.create;\n//# sourceMappingURL=from.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/concatAll.js\n/** PURE_IMPORTS_START ._mergeAll PURE_IMPORTS_END */\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nfunction concatAll() {\n  return mergeAll(1);\n}\n//# sourceMappingURL=concatAll.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/observable/concat.js\n/** PURE_IMPORTS_START .._util_isScheduler,._of,._from,.._operators_concatAll PURE_IMPORTS_END */\n\n\n\n\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nfunction concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    if (observables.length === 1 || observables.length === 2 && isScheduler(observables[1])) {\n        return from(observables[0]);\n    }\n    return concatAll()(of.apply(void 0, observables));\n}\n//# sourceMappingURL=concat.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/startWith.js\n/** PURE_IMPORTS_START .._observable_ArrayObservable,.._observable_ScalarObservable,.._observable_EmptyObservable,.._observable_concat,.._util_isScheduler PURE_IMPORTS_END */\n\n\n\n\n\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nfunction startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var scheduler = array[array.length - 1];\n        if (isScheduler(scheduler)) {\n            array.pop();\n        } else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len === 1) {\n            return concat(new ScalarObservable(array[0], scheduler), source);\n        } else if (len > 1) {\n            return concat(new ArrayObservable_ArrayObservable(array, scheduler), source);\n        } else {\n            return concat(new EmptyObservable(scheduler), source);\n        }\n    };\n}\n//# sourceMappingURL=startWith.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/switchMap.js\n/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar switchMap___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nfunction switchMap(project, resultSelector) {\n    return function switchMapOperatorFunction(source) {\n        return source.lift(new SwitchMapOperator(project, resultSelector));\n    };\n}\nvar SwitchMapOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function SwitchMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new switchMap_SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchMapOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar switchMap_SwitchMapSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    switchMap___extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        } catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    /** @deprecated internal use only */SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n        } else {\n            this.destination.next(innerValue);\n        }\n    };\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=switchMap.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/util/ArgumentOutOfRangeError.js\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar ArgumentOutOfRangeError___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nvar ArgumentOutOfRangeError = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    ArgumentOutOfRangeError___extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var err = _super.call(this, 'argument out of range');\n        this.name = err.name = 'ArgumentOutOfRangeError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ArgumentOutOfRangeError;\n}(Error);\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/take.js\n/** PURE_IMPORTS_START .._Subscriber,.._util_ArgumentOutOfRangeError,.._observable_EmptyObservable PURE_IMPORTS_END */\nvar take___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nfunction take(count) {\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable();\n        } else {\n            return source.lift(new take_TakeOperator(count));\n        }\n    };\n}\nvar take_TakeOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError();\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    take___extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=take.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/takeUntil.js\n/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar takeUntil___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nfunction takeUntil(notifier) {\n    return function (source) {\n        return source.lift(new TakeUntilOperator(notifier));\n    };\n}\nvar TakeUntilOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new takeUntil_TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar takeUntil_TakeUntilSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    takeUntil___extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.add(subscribeToResult(this, notifier));\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=takeUntil.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/scheduler/async.js\n/** PURE_IMPORTS_START ._AsyncAction,._AsyncScheduler PURE_IMPORTS_END */\n\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nvar async_async = /*@__PURE__*/new AsyncScheduler(AsyncAction_AsyncAction);\n//# sourceMappingURL=async.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/timestamp.js\n/** PURE_IMPORTS_START .._scheduler_async,._map PURE_IMPORTS_END */\n\n\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nfunction timestamp(scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async_async;\n    }\n    return map(function (value) {\n        return new Timestamp(value, scheduler.now());\n    });\n    // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\nvar Timestamp = /*@__PURE__*/ /*@__PURE__*/function () {\n    function Timestamp(value, timestamp) {\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n    return Timestamp;\n}();\n;\n//# sourceMappingURL=timestamp.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/withLatestFrom.js\n/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar withLatestFrom___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nfunction withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nvar WithLatestFromOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new withLatestFrom_WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar withLatestFrom_WithLatestFromSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    withLatestFrom___extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        _super.call(this, destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        var len = observables.length;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            this.add(subscribeToResult(this, observable, observable, i));\n        }\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            } else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        } catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber);\n//# sourceMappingURL=withLatestFrom.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs-create-tween/esm/index.js\n // eslint-disable-line\n\n/**\n * Creates an observable that emits samples from an easing function on every animation frame\n * for a duration `d` ms.\n *\n * The first value will be emitted on the next animation frame,\n * and is the value of the easing function at `t = 0`.\n * The final value is guaranteed to be the easing function at `t = d`.\n * The observable completes one frame after the final value was emitted.\n *\n * @param {function(t: number, b: number, c: number, d: number, [s]: number): number} easingFunction\n * - the easing fuction to sample from; can use any of Robert Penner's easing functions\n     (without the `x` paramter)\n * @param {number} b - beginning value and 2nd parameter of the easing function\n * @param {number} c - change in value (or end value) and 3rd parameter of the easing function\n * @param {number} d - total duration of the tween in ms and 4th parameter of the easing function\n * @param {number} [s] - 5th parameter of the easing function (optional)\n * @return {Observable<number>} - an observable emitting samples of the easing function on\n *   animation frames for `d` ms.\n */\nfunction createTween(easingFunction, b, c, d, s) {\n  return Observable_Observable.create(function (observer) {\n    var startTime = void 0;\n    var id = requestAnimationFrame(function sample(time) {\n      startTime = startTime || time;\n      var t = time - startTime;\n      if (t < d) {\n        observer.next(easingFunction(t, b, c, d, s));\n        id = requestAnimationFrame(sample);\n      } else {\n        observer.next(easingFunction(d, b, c, d, s));\n        id = requestAnimationFrame(function () {\n          return observer.complete();\n        });\n      }\n    });\n    return function () {\n      if (id) {\n        cancelAnimationFrame(id);\n      }\n    };\n  });\n}\n\n/* harmony default export */ var esm = (createTween);\n// CONCATENATED MODULE: ./src/common.js\n// # src / common.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nfunction easeOutSine(t, b, c, d) {\n  return c * Math.sin(t / d * (Math.PI / 2)) + b; // eslint-disable-line\n}\n// CONCATENATED MODULE: ./src/mixin/constants.js\n// # src / mixin / constants.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// The base duration of the fling animation.\nvar BASE_DURATION = 200;\n\n// We adjust the duration of the animation using the width of the drawer.\n// There is no physics to this, but we know from testing that the animation starts to feel bad\n// when the drawer increases in size.\n// From testing we know that, if we increase the duration as a fraction of the drawer width,\n// the animation stays smooth across common display sizes.\nvar WIDTH_CONTRIBUTION = 0.15;\n\n// Minimum velocity of the drawer (in px/ms) when releasing to make it fling to opened/closed state.\nvar VELOCITY_THRESHOLD = 0.15;\n// CONCATENATED MODULE: ./src/mixin/operators.js\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nfunction _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }\n\n// # src / mixin / operators.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n\n\n\n\n\n\n// ### Observable extensions\n// #### Subscribe when\n// This operator is like `filterWhen`, but it will unsubscribe from the source observable\n// when the input observable emits `false`, and re-subscribe when it emits `true`.\nvar operators_subscribeWhen = function subscribeWhen(p$) {\n  return function (source) {\n    if (false) throw Error();\n    return p$.pipe(switchMap(function (p) {\n      return p ? source : never();\n    }));\n  };\n};\n\n// #### Filter when\n// This operator is like `filter`, but it takes an observable of booleans as input,\n// instead of a predicate function.\nvar operators_filterWhen = function filterWhen(p$) {\n  for (var _len = arguments.length, others = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    others[_key - 1] = arguments[_key];\n  }\n\n  return function (source) {\n    if (false) throw Error();else if (others.length === 0) {\n      return source.pipe(withLatestFrom(p$), filter(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            p = _ref2[1];\n\n        return p;\n      }), map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 1),\n            x = _ref4[0];\n\n        return x;\n      }));\n\n      // When providing more than one observable, the result observable will only emit values\n      // when `every` input observable has emitted a truthy value.\n    } else {\n      return source.pipe(withLatestFrom.apply(undefined, [p$].concat(others)), filter(function (_ref5) {\n        var _ref6 = _toArray(_ref5),\n            ps = _ref6.slice(1);\n\n        return ps.every(function (p) {\n          return p;\n        });\n      }), map(function (_ref7) {\n        var _ref8 = _slicedToArray(_ref7, 1),\n            x = _ref8[0];\n\n        return x;\n      }));\n    }\n  };\n};\n// CONCATENATED MODULE: ./src/mixin/calc.js\nvar calc__slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar calc__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction calc__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction calc__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction calc__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// # src / mixin / calc.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n\n// Using shorthands for common functions\nvar min = Math.min.bind(Math);\nvar max = Math.max.bind(Math);\n\nvar calc_calcMixin = function calcMixin(C) {\n  return function (_C) {\n    calc__inherits(_class, _C);\n\n    function _class() {\n      calc__classCallCheck(this, _class);\n\n      return calc__possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    calc__createClass(_class, [{\n      key: \"calcIsInRange\",\n\n      // #### Is in range?\n      // Given a x-coordinate, `isInRange` will  determine whether it is within range from where\n      // to pull the drawer. The x-coordinate *must* be larger than the lower bound,\n      // but when the drawer is opened it may be anywhere on the screen.\n      // Otherwise it must be below the upper bound.\n      value: function calcIsInRange(clientX, opened) {\n        switch (this.align) {\n          case \"left\":\n            return clientX > this.range[0] && (opened || clientX < this.range[1]);\n          case \"right\":\n            return clientX < window.innerWidth - this.range[0] && (opened || clientX > window.innerWidth - this.range[1]);\n          default:\n            throw Error();\n        }\n      }\n\n      // #### Calculate 'Is swipe?'\n      // If the start and end position are not the same x-coordinate, we call it a 'swipe'.\n      // However, if a tap occures during an animation (i.e. `translateX` not in a resting position)\n      // we treat it as a swipe as well. The reasons for this are pretty complex:\n      // Basically, we want users the be able to stop the animation by putting a finger on the screen.\n      // However, if they lift the finger again without swiping, the animation would not continue,\n      // because it would not pass the condition below, unless we introduce the second term.\n      // TODO: reuse isSlidign observable?\n\n    }, {\n      key: \"calcIsSwipe\",\n      value: function calcIsSwipe(_ref) {\n        var _ref2 = calc__slicedToArray(_ref, 3),\n            endX = _ref2[0].clientX,\n            startX = _ref2[1].clientX,\n            translateX = _ref2[2];\n\n        return endX !== startX || translateX > 0 && translateX < this.drawerWidth;\n      }\n\n      // #### Calculate 'Will open?'\n      // Based on current velocity and position of the drawer,\n      // should the drawer slide open, or snap back?\n      // TODO: could incorporate the current open state of the drawer.\n\n    }, {\n      key: \"calcWillOpen\",\n      value: function calcWillOpen(_ref3) {\n        var _ref4 = calc__slicedToArray(_ref3, 4),\n            translateX = _ref4[2],\n            velocity = _ref4[3];\n\n        switch (this.align) {\n          case \"left\":\n            {\n              if (velocity > VELOCITY_THRESHOLD) return true;else if (velocity < -VELOCITY_THRESHOLD) return false;else if (translateX >= this.drawerWidth / 2) return true;else return false;\n            }\n          case \"right\":\n            {\n              if (-velocity > VELOCITY_THRESHOLD) return true;else if (-velocity < -VELOCITY_THRESHOLD) return false;else if (translateX <= -this.drawerWidth / 2) return true;else return false;\n            }\n          default:\n            throw Error();\n        }\n      }\n\n      // #### Calculate translate X\n      // Calcuate the current position of the drawer,\n      // by taking the difference between the current and starting postion of the finger,\n      // then adding that difference to the starting position of the drawer.\n      // This way, we avoid the drawer jumping to the finger, when \"catching\" it during an animation.\n      // The function will also clip the position at 0 and the width of the drawer.\n\n    }, {\n      key: \"calcTranslateX\",\n      value: function calcTranslateX(clientX, startX, startTranslateX) {\n        switch (this.align) {\n          case \"left\":\n            {\n              var deltaX = clientX - startX;\n              var translateX = startTranslateX + deltaX;\n              return max(0, min(this.drawerWidth, translateX));\n            }\n          case \"right\":\n            {\n              var _deltaX = clientX - startX;\n              var _translateX = startTranslateX + _deltaX;\n              return min(0, max(-this.drawerWidth, _translateX));\n            }\n          default:\n            throw Error();\n        }\n      }\n\n      // #### Get movable drawer width\n      // One feature of hy-drawer is to allow the drawer to \"peek\" over the edge.\n      // This effect is achieved by setting a smaller negative `left` (`right`) CSS property,\n      // than is the width of the drawer,\n      // The 'moveable' part of the drawer, then, is equal to the inverse of that property.\n      // See [Styling](../../styling.md) for more.\n\n    }, {\n      key: \"calcMovableDrawerWidth\",\n      value: function calcMovableDrawerWidth() {\n        return -parseFloat(getComputedStyle(this.contentEl)[this.align]);\n      }\n    }]);\n\n    return _class;\n  }(C);\n};\n// CONCATENATED MODULE: ./src/mixin/update.js\nvar update__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction update__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction update__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction update__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// # src / mixin / update.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nvar hasCSSOM = \"attributeStyleMap\" in Element.prototype && \"CSS\" in window && CSS.number;\n\nvar updateMixin = function updateMixin(C) {\n  return function (_C) {\n    update__inherits(_class, _C);\n\n    function _class() {\n      update__classCallCheck(this, _class);\n\n      return update__possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    update__createClass(_class, [{\n      key: \"histId\",\n      value: function histId() {\n        return this.el.id || this.constructor.componentName;\n      }\n\n      // #### Prepare and cleanup interaction\n      // `prepareInteraction` causes various side effects before sliding the drawer.\n      //\n      // Note that the drawer receives the `hy-drawer-opened` CSS class when it is opened.\n      // This class makes the drawer appear open by setting the CSS `left` (`right`) property, instead\n      // of an absoulte `transform` value.\n      // This way, the drawer's width can change while it is open without having to\n      // recalculate `translateX` on every `resize`.\n      // However, it has to be removed before we move the drawer via `translateX` again.\n\n    }, {\n      key: \"prepareInteraction\",\n      value: function prepareInteraction() {\n        if (hasCSSOM) {\n          this.contentEl.attributeStyleMap.set(\"will-change\", \"transform\");\n          this.scrimEl.attributeStyleMap.set(\"will-change\", \"opacity\");\n        } else {\n          this.contentEl.style.willChange = \"transform\";\n          this.scrimEl.style.willChange = \"opacity\";\n        }\n        this.contentEl.classList.remove(\"hy-drawer-opened\");\n        this.fireEvent(\"prepare\");\n      }\n\n      // Cleanup code after a completed interaction.\n      // Will add/remove the beforementioned `hy-drawer-opened` class.\n\n    }, {\n      key: \"cleanupInteraction\",\n      value: function cleanupInteraction(opened) {\n        if (hasCSSOM) {\n          this.contentEl.attributeStyleMap.delete(\"will-change\");\n          this.scrimEl.attributeStyleMap.delete(\"will-change\");\n\n          if (opened) {\n            this.scrimEl.attributeStyleMap.set(\"pointer-events\", new CSSKeywordValue(\"all\"));\n            this.contentEl.classList.add(\"hy-drawer-opened\");\n          } else {\n            this.scrimEl.attributeStyleMap.delete(\"pointer-events\");\n            this.contentEl.classList.remove(\"hy-drawer-opened\");\n          }\n        } else {\n          this.scrimEl.style.willChange = \"\";\n          this.contentEl.style.willChange = \"\";\n\n          if (opened) {\n            this.scrimEl.style.pointerEvents = \"all\";\n            this.contentEl.classList.add(\"hy-drawer-opened\");\n          } else {\n            this.scrimEl.style.pointerEvents = \"\";\n            this.contentEl.classList.remove(\"hy-drawer-opened\");\n          }\n        }\n\n        // If the experimental back button feature is enabled we hack the history API,\n        // so that it matches the state of the drawer...\n        /*\n        if (this._backButton) {\n          const id = histId.call(this);\n          const hash = `#${id}--opened`;\n           if (opened && window.location.hash !== hash) {\n            window.history.pushState({ [id]: true }, document.title, hash);\n          }\n           if (!opened\n              && (window.history.state && window.history.state[histId.call(this)])\n              && window.location.hash !== '') {\n            window.history.back();\n          }\n        }\n        */\n\n        // Once we're finished cleaning up, we fire the `transitioned` event.\n        this.fireEvent(\"transitioned\", { detail: opened });\n      }\n      // #### Update DOM\n      // In the end, we only modify two properties: The x-coordinate of the drawer,\n      // and the opacity of the scrim, which is handled by `updateDOM`.\n\n    }, {\n      key: \"updateDOM\",\n      value: function updateDOM(translateX) {\n        this.translateX = translateX;\n\n        var inv = this.align === \"left\" ? 1 : -1;\n        var opacity = this.opacity = translateX / this.drawerWidth * inv;\n\n        if (hasCSSOM) {\n          this.contentEl.attributeStyleMap.set(\"transform\", new CSSTransformValue([new CSSTranslate(CSS.px(translateX), CSS.px(0))]));\n          this.scrimEl.attributeStyleMap.set(\"opacity\", this.opacity);\n        } else {\n          this.contentEl.style.transform = \"translateX(\" + translateX + \"px)\";\n          this.scrimEl.style.opacity = this.opacity;\n        }\n\n        this.fireEvent(\"move\", { detail: { translateX: translateX, opacity: opacity } });\n      }\n    }]);\n\n    return _class;\n  }(C);\n};\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/mapTo.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar mapTo___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nfunction mapTo(value) {\n    return function (source) {\n        return source.lift(new MapToOperator(value));\n    };\n}\nvar MapToOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    mapTo___extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        _super.call(this, destination);\n        this.value = value;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=mapTo.js.map\n// CONCATENATED MODULE: ./node_modules/rxjs/_esm5/operators/skipWhile.js\n/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar skipWhile___extends = this && this.__extends || function (d, b) {\n    for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n    }function __() {\n        this.constructor = d;\n    }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nfunction skipWhile(predicate) {\n    return function (source) {\n        return source.lift(new SkipWhileOperator(predicate));\n    };\n}\nvar SkipWhileOperator = /*@__PURE__*/ /*@__PURE__*/function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = /*@__PURE__*/ /*@__PURE__*/function (_super) {\n    skipWhile___extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.skipping = true;\n        this.index = 0;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        } catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber_Subscriber);\n//# sourceMappingURL=skipWhile.js.map\n// CONCATENATED MODULE: ./src/mixin/observables.js\nvar observables__slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar observables__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction observables__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction observables__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction observables__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// # src / mixin / observables.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Using shorthands for common functions\nvar abs = Math.abs.bind(Math);\n\n// #### Get start observable\n// The following function returns an observable of all \"start\" events.\n// Usually, that's just `touchstart` event of the first finger touching the screen,\n// however since the compontent also supports mouse events,\n// we may listen for `mousedown` events.\nvar observables_baseObservablesMixin = function baseObservablesMixin(C) {\n  return function (_C) {\n    observables__inherits(_class, _C);\n\n    function _class() {\n      observables__classCallCheck(this, _class);\n\n      return observables__possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    observables__createClass(_class, [{\n      key: \"getStartObservable\",\n      value: function getStartObservable() {\n        // Since the `mouseEvents` option may change at any point, we `switchMap` to reflect the changes.\n        return combineLatest_combineLatest(this.subjects.document, this.subjects.mouseEvents).pipe(switchMap(function (_ref) {\n          var _ref2 = observables__slicedToArray(_ref, 2),\n              doc = _ref2[0],\n              mouseEvents = _ref2[1];\n\n          // The touchstart observable is passive since we won't be calling `preventDefault`.\n          // Also, we're only interested in the first `touchstart`.\n          var touchstart$ = fromEvent(doc, \"touchstart\", {\n            passive: true\n          }).pipe(filter(function (_ref3) {\n            var touches = _ref3.touches;\n            return touches.length === 1;\n          }), map(function (_ref4) {\n            var touches = _ref4.touches;\n            return touches[0];\n          }));\n\n          // If mouse events aren't enabled, we're done here.\n          if (!mouseEvents) return touchstart$;\n\n          // Otherwise we also include `mousedown` events in the output.\n          var mousedown$ = fromEvent(doc, \"mousedown\").pipe(tap(function (event) {\n            return Object.assign(event, { event: event });\n          }));\n\n          return merge(touchstart$, mousedown$);\n        }));\n      }\n\n      // #### Get move observable\n      // This function returns an observable of all move events. Usually that's just `touchmove`,\n      // but may also include `mousemove` events while the mouse button is down.\n\n    }, {\n      key: \"getMoveObservable\",\n      value: function getMoveObservable(start$, end$) {\n        // Since the `mouseEvents` or `preventDefault` option may change at any point,\n        // we `switchMap` to reflect the changes.\n        // Nice: `combineLatest` provides us with the functionality of emitting\n        // when either of the inputs change, but not before all inputs have their first value set.\n        return combineLatest_combineLatest(this.subjects.document, this.subjects.mouseEvents, this.subjects.preventDefault).pipe(switchMap(function (_ref5) {\n          var _ref6 = observables__slicedToArray(_ref5, 3),\n              doc = _ref6[0],\n              mouseEvents = _ref6[1],\n              preventDefault = _ref6[2];\n\n          // We're only keeping track of the first finger.\n          // Should the user remove the finger that started the interaction, we use the next instead.\n          // Note that this doesn't occur under normal circumstances,\n          // and exists primarliy to ensure that the interaction continues without hiccups.\n          // Note that the event listener is only passive when the `preventDefault` option is falsy.\n          var touchmove$ = fromEvent(doc, \"touchmove\", { passive: !preventDefault }).pipe(map(function (e) {\n            return Object.assign(e.touches[0], { event: e });\n          }));\n\n          // If mouse events aren't enabled, we're done here.\n          if (!mouseEvents) return touchmove$;\n\n          // Otherwise we listen for `mousemove` events,\n          // but only those between a `start` and `end` event, i.e. while the user is sliding.\n          // We unsubscribe form the source observable outside of those contraints.\n          // Again, the listener is only marked as passive when the `preventDefault` option is falsy.\n          var mousemove$ = fromEvent(doc, \"mousemove\", {\n            passive: !preventDefault\n          }).pipe(operators_subscribeWhen(merge(start$.pipe(mapTo(true)), end$.pipe(mapTo(false)))), map(function (event) {\n            return Object.assign(event, { event: event });\n          }));\n\n          return merge(touchmove$, mousemove$);\n        }));\n      }\n\n      // #### Get end observable\n      // This function returns an observable of end events.\n      // Usually, this is the `touchend` event of the last finger, but may also include `mouseup` events,\n      // when the `mouseEvents` option is enabled.\n\n    }, {\n      key: \"getEndObservable\",\n      value: function getEndObservable() {\n        // Since the `mouseEvents` option may change at any point, we `switchMap` to reflect the changes.\n        return combineLatest_combineLatest(this.subjects.document, this.subjects.mouseEvents).pipe(switchMap(function (_ref7) {\n          var _ref8 = observables__slicedToArray(_ref7, 2),\n              doc = _ref8[0],\n              mouseEvents = _ref8[1];\n\n          // We're only interested in the last `touchend`.\n          // Otherwise there's at least one finger left on the screen,\n          // that can be used to slide the drawer.\n          var touchend$ = fromEvent(doc, \"touchend\", { passive: true }).pipe(filter(function (_ref9) {\n            var touches = _ref9.touches;\n            return touches.length === 0;\n          }), map(function (event) {\n            return event.changedTouches[0];\n          }));\n\n          // If mouse events aren't enabled, we're done here.\n          if (!mouseEvents) return touchend$;\n\n          // Otherwise we include `mouseup` events.\n          var mouseup$ = fromEvent(doc, \"mouseup\", { passive: true });\n          return merge(touchend$, mouseup$);\n        }));\n      }\n\n      // #### Get \"Is sliding?\" observable\n      // An observable that emits `true` when the user is *sliding* the drawer,\n      // (i.e. moving the finger along the x-axis), or `false` when *scrolling* the page\n      // (i.e. moving the finger along the y-axis).\n\n    }, {\n      key: \"getIsSlidingObservable\",\n      value: function getIsSlidingObservable(move$, start$) {\n        var _this2 = this;\n\n        // If the threshold options is set, we delay the decision until\n        // the finger has moved at least `threshold` pixels in either direction.\n        if (this.threshold) {\n          return move$.pipe(withLatestFrom(start$), skipWhile(function (_ref10) {\n            var _ref11 = observables__slicedToArray(_ref10, 2),\n                _ref11$ = _ref11[0],\n                clientX = _ref11$.clientX,\n                clientY = _ref11$.clientY,\n                _ref11$2 = _ref11[1],\n                startX = _ref11$2.clientX,\n                startY = _ref11$2.clientY;\n\n            return abs(startY - clientY) < _this2.threshold && abs(startX - clientX) < _this2.threshold;\n          }), map(function (_ref12) {\n            var _ref13 = observables__slicedToArray(_ref12, 2),\n                _ref13$ = _ref13[0],\n                clientX = _ref13$.clientX,\n                clientY = _ref13$.clientY,\n                _ref13$2 = _ref13[1],\n                startX = _ref13$2.clientX,\n                startY = _ref13$2.clientY;\n\n            return abs(startX - clientX) >= abs(startY - clientY);\n          }));\n\n          // If the threshold option is set to `0` (or `false`) we make a decision immediately.\n          // This is intended for Safari and possibly other browsers that have a built-in threshold.\n          // Additionally, Safari ignores all calls to `preventDefault`, except on the first move event\n          // after a start event, so that we *have to* make a decision immediately.\n        } else {\n          return move$.pipe(withLatestFrom(start$), map(function (_ref14) {\n            var _ref15 = observables__slicedToArray(_ref14, 2),\n                _ref15$ = _ref15[0],\n                clientX = _ref15$.clientX,\n                clientY = _ref15$.clientY,\n                event = _ref15$.event,\n                _ref15$2 = _ref15[1],\n                startX = _ref15$2.clientX,\n                startY = _ref15$2.clientY;\n\n            var isSliding = abs(startX - clientX) >= abs(startY - clientY);\n            if (_this2.preventDefault && isSliding) event.preventDefault();\n            return isSliding;\n          }));\n        }\n      }\n    }]);\n\n    return _class;\n  }(C);\n};\n// CONCATENATED MODULE: ./src/mixin/setup.js\nvar setup__slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar setup__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction setup__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction setup__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction setup__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\n// # src / mixin / setup.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// As mentioned before, we only import the RxJS function that we need.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// ### Setup observables\n// This function sets up the observable \"pipeline\".\nvar setup_setupObservablesMixin = function setupObservablesMixin(C) {\n  return function (_baseObservablesMixin) {\n    setup__inherits(_class, _baseObservablesMixin);\n\n    function _class() {\n      setup__classCallCheck(this, _class);\n\n      return setup__possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    setup__createClass(_class, [{\n      key: \"setupObservables\",\n      value: function setupObservables() {\n        var _this2 = this;\n\n        // An observable of resize events.\n        var resize$ = fromEvent(window, \"resize\", { passive: true }).pipe(takeUntil(this.subjects.disconnect),\n        /* debounceTime(100), */\n        share(), startWith({}));\n\n        // Keep measurements up-to-date.\n        // Note that we need to temporarily remove the opened class to get the correct measures.\n        resize$.pipe(takeUntil(this.subjects.disconnect)).subscribe(function () {\n          if (_this2.opened) _this2.contentEl.classList.remove(\"hy-drawer-opened\");\n          _this2.drawerWidth = _this2.calcMovableDrawerWidth();\n          if (_this2.opened) _this2.contentEl.classList.add(\"hy-drawer-opened\");\n        });\n\n        // Emitts a value every time you change the `persistent` property of the drawer.\n        // Interally, we invert it and call it `active`.\n        var active$ = this.subjects.persistent.pipe(map(function (x) {\n          return !x;\n        }));\n\n        // #### Start observable\n        // Emits a value every time a start event *could* intiate an interaction.\n        // Each emitted value is a hash containing a `clientX` and `clientY` key.\n        var start$ = this.getStartObservable().pipe(takeUntil(this.subjects.disconnect), operators_filterWhen(active$), share());\n\n        // An observable that emits `true`, as long as the drawer isn't fully closed\n        // (as long as the scrim is visible the user can still \"catch\" the drawer).\n        // It references the yet-to-be-defined `translateX` obsevable, so we wrap it inside a `defer`.\n        var isScrimVisible$ = defer(function () {\n          return _this2.translateX$.pipe(map(function (translateX) {\n            return _this2.align === \"left\" ? translateX > 0 : translateX < _this2.drawerWidth;\n          }));\n        });\n\n        // TODO: ...\n        var isInRange$ = start$.pipe(withLatestFrom(isScrimVisible$), map(function (_ref) {\n          var _ref2 = setup__slicedToArray(_ref, 2),\n              clientX = _ref2[0].clientX,\n              isScrimVisible = _ref2[1];\n\n          return _this2.calcIsInRange(clientX, isScrimVisible);\n        }), tap(function (inRange) {\n          if (inRange) {\n            if (_this2.mouseEvents) _this2.contentEl.classList.add(\"hy-drawer-grabbing\");\n            _this2.prepareInteraction();\n          }\n        }), share());\n\n        // #### End observable\n        // The observable of all relevant \"end\" events, i.e. the last `touchend` (or `mouseup`),\n        var end$ = this.getEndObservable().pipe(takeUntil(this.subjects.disconnect), operators_filterWhen(active$, isInRange$), share());\n\n        // #### Move observable\n        // The observable of all relevant \"move\" events.\n        var move$ = this.getMoveObservable(start$, end$).pipe(takeUntil(this.subjects.disconnect), operators_filterWhen(active$, isInRange$), share());\n\n        // #### 'Is sliding?' observable\n        // An observable that emits `true` when the user is *sliding* the drawer,\n        // (i.e. moving the finger along the x-axis), or `false` when *scrolling* the page\n        // (i.e. moving the finger along the y-axis), and `undefined` while we aren't sure yet.\n        //\n        // See [`getIsSlidingObservable`](./observables.md#get-is-sliding-observable).\n        var isSliding$ = this.getIsSlidingObservable(move$, start$).pipe(take(1), startWith(undefined), repeatWhen(function () {\n          return end$;\n        }),\n\n        // When the user is sliding, fire the `slidestart` event.\n        tap(function (isSliding) {\n          if (isSliding) _this2.fireEvent(\"slidestart\", { detail: _this2.opened });\n        }));\n\n        // #### Translate X observable\n        // The `translateX` observable is the central observable of this component.\n        // It emits the current x-coordinate of the drawer, which\n        // can be modified by either of 3 incoming observables:\n        //\n        // 1. the animation/tween observable, and\n        // 2. The move observable (the user's finger/mouse moving across the screen),\n        // 3. direct modifications of the `opened` state.\n        //\n        // It is wrapped in a `defer` because it depends on previous values of itself.\n        this.translateX$ = defer(function () {\n          return merge(\n          // 1)\n          // The tween observable can be used unmodified (see below),\n          // but isn't defined yet, because it depends on previous values of `translateX$`.\n          _this2.tween$,\n\n          // 2)\n          // We only let move events modify the drawer's position when we are sure\n          // that the user is sliding. In case the `preventDefault` option is enabled,\n          // this is also when we're sure to call `preventDefault`.\n          move$.pipe(operators_filterWhen(isSliding$), tap(function (_ref3) {\n            var event = _ref3.event;\n\n            if (_this2.preventDefault) event.preventDefault();\n          }),\n\n          // Finally, we take the start position of the finger, the start position of the drawer,\n          // and the current position of the finger to calculate the next `translateX` value.\n          withLatestFrom(start$, _this2.startTranslateX$), map(function (_ref4) {\n            var _ref5 = setup__slicedToArray(_ref4, 3),\n                clientX = _ref5[0].clientX,\n                startX = _ref5[1].clientX,\n                startTranslateX = _ref5[2];\n\n            return _this2.calcTranslateX(clientX, startX, startTranslateX);\n          })),\n\n          // 3)\n          // When the `opened` state changes, we \"jump\" to the new position,\n          // which is either 0 (when closed) or the width of the drawer (when open).\n          combineLatest_combineLatest(_this2.subjects.opened, _this2.subjects.align).pipe(\n          // Usually the cleanup code would run at the end of the fling animation,\n          // but since there is no animation in this case, we call it directly.\n          tap(function (_ref6) {\n            var _ref7 = setup__slicedToArray(_ref6, 1),\n                opened = _ref7[0];\n\n            return _this2.cleanupInteraction(opened);\n          }), map(function (_ref8) {\n            var _ref9 = setup__slicedToArray(_ref8, 2),\n                opened = _ref9[0],\n                align = _ref9[1];\n\n            return !opened ? 0 : _this2.drawerWidth * (align === \"left\" ? 1 : -1);\n          })));\n        })\n        // `share`ing the observable between many subscribers:\n        .pipe(takeUntil(this.subjects.disconnect), share());\n\n        // The `translateX` value at the start of an interaction.\n        // Typically this would be either 0 or `drawerWidth`, but since the user can initiate\n        // an interaction *during the animation*, it could also be any value inbetween.\n        // We obtain it by sampling the translate-x observable at the beginning of each interaction.\n        this.startTranslateX$ = this.translateX$.pipe(sample(start$));\n\n        // #### Tween observable\n        // For the tween animations we first need an observable that tracks\n        // the current velocity of the drawer,\n        // which we will use to determine whether the drawer should flinging in its direction,\n        // or snap back into place.\n        var velocity$ = this.translateX$.pipe(timestamp(), pairwise(),\n        // Since we are at the mercy of the browser firing move events,\n        // we make sure that some time has passed since the last move event.\n        filter(function (_ref10) {\n          var _ref11 = setup__slicedToArray(_ref10, 2),\n              prevTime = _ref11[0].timestamp,\n              time = _ref11[1].timestamp;\n\n          return time - prevTime > 0;\n        }),\n        // Now we are save to calculate the current velocity without divide by zero errors.\n        map(function (_ref12) {\n          var _ref13 = setup__slicedToArray(_ref12, 2),\n              _ref13$ = _ref13[0],\n              prevX = _ref13$.value,\n              prevTime = _ref13$.timestamp,\n              _ref13$2 = _ref13[1],\n              x = _ref13$2.value,\n              time = _ref13$2.timestamp;\n\n          return (x - prevX) / (time - prevTime);\n        }),\n        // The initial velocity is zero.\n        startWith(0));\n\n        // TODO\n        var willOpen$ = end$.pipe(tap(function () {\n          _this2.contentEl.classList.remove(\"hy-drawer-grabbing\");\n        }), withLatestFrom(start$, this.translateX$, velocity$), filter(this.calcIsSwipe.bind(this)), map(this.calcWillOpen.bind(this)),\n        // TODO: only fire `slideend` event when slidestart fired as well?\n        tap(function (willOpen) {\n          return _this2.fireEvent(\"slideend\", { detail: willOpen });\n        }));\n\n        // There are 2 things that can trigger an animation:\n        // 1. The end of an interaction, i.e. the user releases the finger/mouse while moving the slider.\n        // 2. A call to a method like `open` or `close` (represented by a value on the animate observable)\n        //    Note that we call `prepareInteraction` manually here, because it wasn't triggered by a\n        //    prior `touchdown`/`mousedown` event in this case.\n        var tweenTrigger$ = merge(willOpen$, this.animateTo$.pipe(tap(this.prepareInteraction.bind(this))));\n\n        // We silently set the new `opened` state here,\n        // so that the next interaction will do the right thing even while the animation is\n        // still playing, e.g. a call to `toggle` will cancel the current animation\n        // and initiate an animation to the opposite state.\n        this.tween$ = tweenTrigger$.pipe(tap(function (willOpen) {\n          return _this2.setInternalState(\"opened\", willOpen);\n        }),\n        // By using `switchMap` we ensure that subsequent events that trigger an animation\n        // don't cause more than one animation to be played at a time.\n        withLatestFrom(this.translateX$), switchMap(function (_ref14) {\n          var _ref15 = setup__slicedToArray(_ref14, 2),\n              opened = _ref15[0],\n              translateX = _ref15[1];\n\n          // We return a tween observable that runs cleanup code when it completes\n          // --- unless a new interaction is initiated, in which case it is canceled.\n          var inv = _this2.align === \"left\" ? 1 : -1;\n          var endTranslateX = opened ? _this2.drawerWidth * inv : 0;\n          var diffTranslateX = endTranslateX - translateX;\n          var duration = BASE_DURATION + _this2.drawerWidth * WIDTH_CONTRIBUTION;\n\n          return createTween(easeOutSine, translateX, diffTranslateX, duration).pipe(tap({ complete: function complete() {\n              return _this2.subjects.opened.next(opened);\n            } }), takeUntil(start$), takeUntil(_this2.subjects.align.pipe(skip(1))), share());\n        }));\n\n        // #### Subscriptions\n        // Now we are ready to cause some side effects.\n        //\n        // The end result is always to update the (shadow) DOM, which happens here.\n        // Note that the call to subscribe sets the whole process in motion,\n        // and causes the code inside the above `defer` observables to run.\n        requestIdleCallback(function () {\n          _this2.translateX$.subscribe(_this2.updateDOM.bind(_this2));\n\n          // A click on the scrim should close the drawer.\n          fromEvent(_this2.scrimEl, \"click\").pipe(takeUntil(_this2.subjects.disconnect)).subscribe(function () {\n            return _this2.close();\n          });\n\n          // Other than preventing sliding, setting `persistent` will also hide the scrim.\n          active$.pipe(takeUntil(_this2.subjects.disconnect)).subscribe(function (active) {\n            _this2.scrimEl.style.display = active ? \"block\" : \"none\";\n          });\n\n          // Whenever the alignment of the drawer changes, update the CSS classes.\n          _this2.subjects.align.pipe(takeUntil(_this2.subjects.disconnect)).subscribe(function (align) {\n            _this2.contentEl.classList.remove(\"hy-drawer-left\");\n            _this2.contentEl.classList.remove(\"hy-drawer-right\");\n            _this2.contentEl.classList.add(\"hy-drawer-\" + align);\n          });\n\n          // If the experimental back button feature is enabled, handle popstate events...\n          /*\n          fromEvent(window, 'popstate')\n            .pipe(\n              takeUntil(this.subjects.disconnect),\n              subscribeWhen(this.backButton$),\n            )\n            .subscribe(() => {\n              const hash = `#${histId.call(this)}--opened`;\n              const willOpen = window.location.hash === hash;\n              if (willOpen !== this.opened) this.animateTo$.next(willOpen);\n            });\n          */\n\n          // When drawing with mouse is enabled, we add the grab cursor to the drawer.\n          // We also want to call `preventDefault` when `mousedown` is within the drawer range\n          // to prevent text selection while sliding.\n          _this2.subjects.mouseEvents.pipe(takeUntil(_this2.subjects.disconnect), switchMap(function (mouseEvents) {\n            if (mouseEvents) _this2.contentEl.classList.add(\"hy-drawer-grab\");else _this2.contentEl.classList.remove(\"hy-drawer-grab\");\n\n            return mouseEvents ? start$.pipe(withLatestFrom(isInRange$)) : never();\n          })).subscribe(function (_ref16) {\n            var _ref17 = setup__slicedToArray(_ref16, 2),\n                event = _ref17[0].event,\n                isInRange = _ref17[1];\n\n            if (isInRange && event) event.preventDefault();\n          });\n\n          // Now we set the initial opend state.\n          // If the experimental back button feature is enabled, we check the location hash...\n          /*\n          if (this._backButton) {\n            const hash = `#${histId.call(this)}--opened`;\n            if (window.location.hash === hash) this.setInternalState('opened', true);\n          }\n          */\n        });\n      }\n    }]);\n\n    return _class;\n  }(observables_baseObservablesMixin(updateMixin(calc_calcMixin(C))));\n};\n// CONCATENATED MODULE: ./src/mixin/index.js\nvar mixin__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar mixin__get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\nfunction mixin__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction mixin__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction mixin__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction mixin__toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n// # src / mixin / index.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// ## Overview\n// This component is written in [RxJS] and reading its code requires some basic understanding\n// of how RxJS works. It may also serve as an example of how to use RxJS.\n//\n// Other than RxJS, you should be familiar with [ES6 Mixin][esmixins],\n// which is a clever way of using the ES6 class syntax to achieve inheritance-based mixins.\n// The mixin in the main export of this file.\n\n// ## Imports\n// ES6+ functions that we use.\n// import 'core-js/fn/array/from';\n// import 'core-js/fn/function/bind';\n// import 'core-js/fn/object/assign';\n\n// Importing the hy-compontent base libary,\n// which helps with making multiple versions of the component (Vanilla JS, WebComponent, etc...).\n\n\n\n\n\n\n// TODO\n\n\n// A set of [Modernizr] tests that are required for this component to work.\nvar MIXIN_FEATURE_TESTS = new _Set([].concat(mixin__toConsumableArray(COMPONENT_FEATURE_TESTS), [\"eventlistener\", \"queryselector\", \"requestanimationframe\", \"classlist\", \"opacity\", \"csstransforms\", \"csspointerevents\"]));\n\n\n\n// ## Drawer Mixin\nvar mixin_drawerMixin = function drawerMixin(C) {\n  return function (_setupObservablesMixi) {\n    mixin__inherits(_class, _setupObservablesMixi);\n\n    function _class() {\n      mixin__classCallCheck(this, _class);\n\n      return mixin__possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));\n    }\n\n    mixin__createClass(_class, [{\n      key: \"setupComponent\",\n\n\n      // ### Setup\n      // Overriding the setup function.\n      value: function setupComponent(el, props) {\n        mixin__get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"setupComponent\", this).call(this, el, props);\n\n        this.animateTo$ = new Subject_Subject();\n\n        // Cache DOM elements.\n        this.scrimEl = this.sroot.querySelector(\".hy-drawer-scrim\");\n        this.contentEl = this.sroot.querySelector(\".hy-drawer-content\");\n\n        // Set the initial alignment class.\n        this.contentEl.classList.add(\"hy-drawer-\" + this.align);\n      }\n\n      // Calling the [setup observables function](./setup.md) function.\n\n    }, {\n      key: \"connectComponent\",\n      value: function connectComponent() {\n        var _this2 = this;\n\n        requestIdleCallback(function () {\n          _this2.setupObservables();\n\n          // TODO: meh..\n          mixin__get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), \"connectComponent\", _this2).call(_this2);\n\n          // Firing an event to let the outside world know the drawer is ready.\n          _this2.fireEvent(\"init\", { detail: _this2.opened });\n        });\n      }\n\n      // ### Methods\n      // Public methods of this component. See [Methods](../../methods.md) for more.\n\n    }, {\n      key: \"open\",\n      value: function open() {\n        var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        if (animated) this.animateTo$.next(true);else this.opened = true;\n      }\n    }, {\n      key: \"close\",\n      value: function close() {\n        var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        if (animated) this.animateTo$.next(false);else this.opened = false;\n      }\n    }, {\n      key: \"toggle\",\n      value: function toggle() {\n        var animated = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n\n        if (animated) this.animateTo$.next(!this.opened);else this.opened = !this.opened;\n      }\n    }], [{\n      key: \"componentName\",\n\n      // The name of the component (required by hy-component)\n      get: function get() {\n        return \"hy-drawer\";\n      }\n\n      // ### Options\n      // The default values (and types) of the configuration options (required by hy-component)\n      // See [Options](../../options.md) for usage information.\n\n    }, {\n      key: \"types\",\n      get: function get() {\n        return {\n          opened: bool,\n          align: oneOf([\"left\", \"right\"]),\n          persistent: bool,\n          range: array_of_arrayOf(number),\n          threshold: number,\n          preventDefault: bool,\n          mouseEvents: bool\n        };\n      }\n    }, {\n      key: \"defaults\",\n      get: function get() {\n        return {\n          opened: false,\n          align: \"left\",\n          persistent: false,\n          range: [0, 100],\n          threshold: 10,\n          preventDefault: false,\n          mouseEvents: false\n        };\n      }\n    }]);\n\n    return _class;\n  }(setup_setupObservablesMixin(rxjs_rxjsMixin(componentMixin(C))));\n};\n\n// [rxjs]: https://github.com/ReactiveX/rxjs\n// [esmixins]: http://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/\n// [modernizr]: https://modernizr.com/\n// CONCATENATED MODULE: ./src/webcomponent/template.js\nvar template = \"<div class=\\\"hy-drawer-scrim\\\"></div> <div class=\\\"hy-drawer-content\\\"> <slot></slot> </div> <style> @media screen { .hy-drawer-scrim { position: fixed; top: 0; left: 0; height: 100vh; width: 100vw; z-index: 20; opacity: 0; pointer-events: none; background: rgba(0, 0, 0, 0.5); transform: translateX(0); -webkit-tap-highlight-color: transparent; } .hy-drawer-content { position: fixed; top: 0; height: 100vh; z-index: 30; overflow-x: hidden; overflow-y: auto; transform: translateX(0); width: 300px; background: #e8e8e8; box-shadow: 0 0 15px rgba(0, 0, 0, 0.25); contain: strict; -webkit-overflow-scrolling: touch; } .hy-drawer-content.hy-drawer-left { left: -300px; } .hy-drawer-content.hy-drawer-right { right: -300px; } .hy-drawer-content.hy-drawer-left.hy-drawer-opened { left: 0 !important; transform: translateX(0) !important; } .hy-drawer-content.hy-drawer-right.hy-drawer-opened { right: 0 !important; transform: translateX(0) !important; } .hy-drawer-grab { cursor: move; cursor: -webkit-grab; cursor: -moz-grab; cursor: grab; } .hy-drawer-grabbing { cursor: -webkit-grabbing; cursor: -moz-grabbing; cursor: grabbing; } } @media print { .hy-drawer-scrim { display: none !important; } .hy-drawer-content { transform: none !important; } } @media screen { .hy-drawer-content { @apply --hy-drawer-content-container; width: var(--hy-drawer-width, 300px); background: var(--hy-drawer-background, #e8e8e8); box-shadow: var(--hy-drawer-box-shadow, 0 0 15px rgba(0, 0, 0, 0.25)); z-index: var(--hy-drawer-z-index, 30); } .hy-drawer-content.hy-drawer-left { left: calc( -1 * var(--hy-drawer-slide-width, var(--hy-drawer-width, 300px)) ); } .hy-drawer-content.hy-drawer-right { right: calc( -1 * var(--hy-drawer-slide-width, var(--hy-drawer-width, 300px)) ); } .hy-drawer-scrim { @apply --hy-drawer-scrim-container; background: var(--hy-drawer-scrim-background, rgba(0, 0, 0, 0.5)); z-index: var(--hy-drawer-scrim-z-index, 20); } } </style>\";\n// CONCATENATED MODULE: ./src/webcomponent/index.js\nvar webcomponent__createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction webcomponent__classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction webcomponent__possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction webcomponent__inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nfunction webcomponent__toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\n// # src / webcomponent / index.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// import 'core-js/fn/array/from';\n\n// We start by importing form the hy-component library...\n\n\n// ...and our own component.\n\n\n// Unlike the [HTML Import version](./html-import.md), this version bundles the template\n// as a string.\n\n\n// The set of Modernizr feature tests required for *this* version of the component.\nvar WEBCOMPONENT_FEATURE_TESTS = new _Set([].concat(webcomponent__toConsumableArray(CUSTOM_ELEMENT_FEATURE_TESTS), webcomponent__toConsumableArray(MIXIN_FEATURE_TESTS)));\n\n\n\n// The exported class follows the HTML naming convetion.\n// It is a combination of the `CustomElement` class (a wrapper around `HTMLElement` that\n// doesn't break when piped through the babel transformer),\n// our [`drawerMixin`](../mixin/index.md),\n// and the `customElementMixin`, which is part of hy-component and handles things like\n// reflecting options as HTML attributes, etc...\nvar webcomponent_HyDrawerElement = function (_customElementMixin) {\n  webcomponent__inherits(HyDrawerElement, _customElementMixin);\n\n  function HyDrawerElement() {\n    webcomponent__classCallCheck(this, HyDrawerElement);\n\n    return webcomponent__possibleConstructorReturn(this, (HyDrawerElement.__proto__ || Object.getPrototypeOf(HyDrawerElement)).apply(this, arguments));\n  }\n\n  webcomponent__createClass(HyDrawerElement, [{\n    key: \"getTemplate\",\n\n\n    // We override the `getTemplate` method and return a document fragment\n    // obtained from parsing the template string.\n    value: function getTemplate() {\n      return fragmentFromString(template);\n    }\n  }], [{\n    key: \"observedAttributes\",\n\n    // The CustomElements spec demands that we provide a list of attributes (i.e. our options).\n    get: function get() {\n      return this.getObservedAttributes();\n    }\n  }]);\n\n  return HyDrawerElement;\n}(custom_element_customElementMixin(mixin_drawerMixin(CustomElement)));\n// CONCATENATED MODULE: ./src/webcomponent/module.js\n// # src / webcomponent / module.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// ## Overview\n// TODO\n\n\n\nvar module_define = function define() {\n  window.customElements.define(\"hy-drawer\", webcomponent_HyDrawerElement);\n};\n\n// Make sure the polyfills are ready (if they are being used).\nif (\"customElements\" in window && \"attachShadow\" in Element.prototype || window.WebComponents && window.WebComponents.ready) {\n  module_define();\n} else if (window.WebComponents) {\n  window.addEventListener(\"WebComponentsReady\", module_define);\n} else if (false) {\n  console.warn(\"Couldn't register component. Did you forget to include a WebComponents polyfill?\");\n}\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports) {\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar g;\n\n// This works in non-strict mode\ng = function () {\n\treturn this;\n}();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || Function(\"return this\")() || (1, eval)(\"this\");\n} catch (e) {\n\t// This works if the window reference is available\n\tif ((typeof window === \"undefined\" ? \"undefined\" : _typeof(window)) === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// module.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap b77eec88bcc783bcbc0f","// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __window = typeof window !== 'undefined' && window;\nvar __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nvar __global = typeof global !== 'undefined' && global;\nvar _root = __window || __global || __self;\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n/*@__PURE__*/ (function () {\n    if (!_root) {\n        throw new Error('RxJS could not find any global context (window, self, global)');\n    }\n})();\nexport { _root as root };\n//# sourceMappingURL=root.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/root.js","// # src / common.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n/* eslint-disable no-plusplus */\n\nexport function parseType(type, attr) {\n  if (process.env.DEBUG && !type) {\n    return console.warn(`No type provided for attribute ${attr}.`);\n  }\n  return type ? type(attr) : attr;\n}\n\nexport function decamelize(str, sep = \"-\") {\n  return str\n    .replace(/([a-z\\d])([A-Z])/g, `$1${sep}$2`)\n    .replace(/([A-Z]+)([A-Z][a-z\\d]+)/g, `$1${sep}$2`)\n    .toLowerCase();\n}\n\nfunction preserveCamelCase(strarg) {\n  let str = strarg;\n  let isLastCharLower = false;\n  let isLastCharUpper = false;\n  let isLastLastCharUpper = false;\n\n  for (let i = 0; i < str.length; i++) {\n    const c = str.charAt(i);\n\n    if (isLastCharLower && /[a-zA-Z]/.test(c) && c.toUpperCase() === c) {\n      str = `${str.substr(0, i)}-${str.substr(i)}`;\n      isLastCharLower = false;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = true;\n      i++;\n    } else if (\n      isLastCharUpper &&\n      isLastLastCharUpper &&\n      /[a-zA-Z]/.test(c) &&\n      c.toLowerCase() === c\n    ) {\n      str = `${str.substr(0, i - 1)}-${str.substr(i - 1)}`;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = false;\n      isLastCharLower = true;\n    } else {\n      isLastCharLower = c.toLowerCase() === c;\n      isLastLastCharUpper = isLastCharUpper;\n      isLastCharUpper = c.toUpperCase() === c;\n    }\n  }\n\n  return str;\n}\n\nexport function camelCase(...args) {\n  let str = [].map\n    .call(args, x => x.trim())\n    .filter(x => x.length)\n    .join(\"-\");\n\n  if (str.length === 0) {\n    return \"\";\n  }\n\n  if (str.length === 1) {\n    return str.toLowerCase();\n  }\n\n  str = preserveCamelCase(str);\n\n  return str\n    .replace(/^[_.\\- ]+/, \"\")\n    .toLowerCase()\n    .replace(/[_.\\- ]+(\\w|$)/g, (m, p1) => p1.toUpperCase());\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/hy-component/src/common.js","// # src / custom-element.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n// import 'core-js/fn/array/for-each';\n// import 'core-js/fn/array/from';\n// import 'core-js/fn/array/map';\n// import 'core-js/fn/number/constructor';\n// import 'core-js/fn/object/keys';\n// import 'core-js/fn/object/set-prototype-of';\n// import 'core-js/fn/reflect/construct';\n// import 'core-js/fn/string/trim'; // used by camelcase\n\nimport { Set } from \"qd-set\";\n\nimport { parseType, camelCase, decamelize } from \"./common\";\nimport { COMPONENT_FEATURE_TESTS } from \"./component\";\n\nexport { Set };\n\nexport const CUSTOM_ELEMENT_FEATURE_TESTS = new Set([\n  ...COMPONENT_FEATURE_TESTS,\n  \"template\",\n  \"customelements\",\n]);\n\nlet circutBreaker = null;\n\nexport const customElementMixin = C =>\n  class extends C {\n    static getObservedAttributes() {\n      const { types } = this;\n      return Object.keys(types).map(x => decamelize(x));\n    }\n\n    constructor(...args) {\n      super(...args);\n      this.setupComponent(this, this.getStateFromAttributes());\n    }\n\n    reflectAttribute(key, val, silent = false) {\n      const attrName = decamelize(key);\n\n      if (silent) circutBreaker = attrName;\n\n      const { types } = this.constructor;\n      const type = types[key];\n\n      if (process.env.DEBUG && (!type || !type.stringify)) {\n        console.warn(`No type provided for key '${key}'`);\n      }\n\n      const attr = type.stringify(val);\n\n      if (attr == null) {\n        this.removeAttribute(attrName);\n      } else {\n        this.setAttribute(attrName, attr);\n      }\n    }\n\n    /*\n    reflectAttributes() {\n      const { types } = this.constructor;\n      Object.keys(types).forEach(key => this.reflectAttribute(key, this[key], true));\n    }\n    */\n\n    getStateFromAttributes() {\n      const { types } = this.constructor;\n\n      const state = {};\n      Object.keys(types).forEach(key => {\n        const attrName = decamelize(key);\n        const attr = this.hasAttribute(attrName) ? this.getAttribute(attrName) : null;\n        const value = parseType(types[key], attr);\n        if (value != null) state[key] = value;\n      });\n\n      return state;\n    }\n\n    get template() {\n      return this.getTemplate();\n    }\n\n    connectedCallback() {\n      /* this.reflectAttributes(); */\n      this.connectComponent();\n    }\n\n    disconnectedCallback() {\n      this.disconnectComponent();\n    }\n\n    adoptedCallback() {\n      this.adoptComponent();\n    }\n\n    attributeChangedCallback(attrName, oldAttr, attr) {\n      if (circutBreaker === attrName) circutBreaker = null;\n      else if (oldAttr !== attr) {\n        const { types } = this.constructor;\n\n        const key = camelCase(attrName);\n        const value = parseType(types[key], attr);\n\n        this[key] = value != null ? value : this.constructor.defaults[key];\n      }\n    }\n\n    setInternalState(key, value) {\n      super.setInternalState(key, value);\n      this.reflectAttribute(key, value, true);\n    }\n\n    setupShadowDOM(el) {\n      const instance = this.getTemplate();\n      if (instance) {\n        if (\"attachShadow\" in Element.prototype) {\n          el.attachShadow({ mode: \"open\" });\n          el.shadowRoot.appendChild(instance);\n          return el.shadowRoot;\n        }\n        if (process.env.DEBUG) console.warn(\"Component doesnt define a template. Intentional?\");\n        throw Error(\"ShadowDOM API not supported\");\n      }\n      return el;\n    }\n\n    getEl() {\n      return this;\n    }\n\n    getTemplate() {\n      const { componentName } = this.constructor;\n      return document\n        .querySelector(`link[href*=\"${componentName}\"]`)\n        .import.querySelector(`#${componentName}-template`)\n        .content.cloneNode(true);\n    }\n  };\n\n// This is a drop-in replacement for `HTMLElement` which is compatible with babel.\nexport function CustomElement() {\n  const HTMLElement = typeof window.HTMLElement === \"function\" ? window.HTMLElement : () => {};\n  return Reflect.construct(HTMLElement, [], this.__proto__.constructor); // eslint-disable-line\n}\n\nif (Object.setPrototypeOf) {\n  Object.setPrototypeOf(CustomElement.prototype, HTMLElement.prototype);\n  Object.setPrototypeOf(CustomElement, HTMLElement);\n}\n\n// TODO\nexport function fragmentFromString(strHTML) {\n  return document.createRange().createContextualFragment(strHTML);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/hy-component/src/custom-element.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isFunction(x) {\n    return typeof x === 'function';\n}\n//# sourceMappingURL=isFunction.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/isFunction.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isObject(x) {\n    return x != null && typeof x === 'object';\n}\n//# sourceMappingURL=isObject.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/isObject.js","/** PURE_IMPORTS_START ._errorObject PURE_IMPORTS_END */\nimport { errorObject } from './errorObject';\nvar tryCatchTarget;\nfunction tryCatcher() {\n    try {\n        return tryCatchTarget.apply(this, arguments);\n    }\n    catch (e) {\n        errorObject.e = e;\n        return errorObject;\n    }\n}\nexport function tryCatch(fn) {\n    tryCatchTarget = fn;\n    return tryCatcher;\n}\n;\n//# sourceMappingURL=tryCatch.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/tryCatch.js","/** PURE_IMPORTS_START ._util_isArray,._util_isObject,._util_isFunction,._util_tryCatch,._util_errorObject,._util_UnsubscriptionError PURE_IMPORTS_END */\nimport { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport var Subscription = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    /**\n     * @param {function(): void} [unsubscribe] A function describing how to\n     * perform the disposal of resources when the `unsubscribe` method is called.\n     */\n    function Subscription(unsubscribe) {\n        /**\n         * A flag to indicate whether this Subscription has already been unsubscribed.\n         * @type {boolean}\n         */\n        this.closed = false;\n        this._parent = null;\n        this._parents = null;\n        this._subscriptions = null;\n        if (unsubscribe) {\n            this._unsubscribe = unsubscribe;\n        }\n    }\n    /**\n     * Disposes the resources held by the subscription. May, for instance, cancel\n     * an ongoing Observable execution or cancel any other type of work that\n     * started when the Subscription was created.\n     * @return {void}\n     */\n    Subscription.prototype.unsubscribe = function () {\n        var hasErrors = false;\n        var errors;\n        if (this.closed) {\n            return;\n        }\n        var _a = this, _parent = _a._parent, _parents = _a._parents, _unsubscribe = _a._unsubscribe, _subscriptions = _a._subscriptions;\n        this.closed = true;\n        this._parent = null;\n        this._parents = null;\n        // null out _subscriptions first so any child subscriptions that attempt\n        // to remove themselves from this subscription will noop\n        this._subscriptions = null;\n        var index = -1;\n        var len = _parents ? _parents.length : 0;\n        // if this._parent is null, then so is this._parents, and we\n        // don't have to remove ourselves from any parent subscriptions.\n        while (_parent) {\n            _parent.remove(this);\n            // if this._parents is null or index >= len,\n            // then _parent is set to null, and the loop exits\n            _parent = ++index < len && _parents[index] || null;\n        }\n        if (isFunction(_unsubscribe)) {\n            var trial = tryCatch(_unsubscribe).call(this);\n            if (trial === errorObject) {\n                hasErrors = true;\n                errors = errors || (errorObject.e instanceof UnsubscriptionError ?\n                    flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]);\n            }\n        }\n        if (isArray(_subscriptions)) {\n            index = -1;\n            len = _subscriptions.length;\n            while (++index < len) {\n                var sub = _subscriptions[index];\n                if (isObject(sub)) {\n                    var trial = tryCatch(sub.unsubscribe).call(sub);\n                    if (trial === errorObject) {\n                        hasErrors = true;\n                        errors = errors || [];\n                        var err = errorObject.e;\n                        if (err instanceof UnsubscriptionError) {\n                            errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n                        }\n                        else {\n                            errors.push(err);\n                        }\n                    }\n                }\n            }\n        }\n        if (hasErrors) {\n            throw new UnsubscriptionError(errors);\n        }\n    };\n    /**\n     * Adds a tear down to be called during the unsubscribe() of this\n     * Subscription.\n     *\n     * If the tear down being added is a subscription that is already\n     * unsubscribed, is the same reference `add` is being called on, or is\n     * `Subscription.EMPTY`, it will not be added.\n     *\n     * If this subscription is already in an `closed` state, the passed\n     * tear down logic will be executed immediately.\n     *\n     * @param {TeardownLogic} teardown The additional logic to execute on\n     * teardown.\n     * @return {Subscription} Returns the Subscription used or created to be\n     * added to the inner subscriptions list. This Subscription can be used with\n     * `remove()` to remove the passed teardown logic from the inner subscriptions\n     * list.\n     */\n    Subscription.prototype.add = function (teardown) {\n        if (!teardown || (teardown === Subscription.EMPTY)) {\n            return Subscription.EMPTY;\n        }\n        if (teardown === this) {\n            return this;\n        }\n        var subscription = teardown;\n        switch (typeof teardown) {\n            case 'function':\n                subscription = new Subscription(teardown);\n            case 'object':\n                if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n                    return subscription;\n                }\n                else if (this.closed) {\n                    subscription.unsubscribe();\n                    return subscription;\n                }\n                else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n                    var tmp = subscription;\n                    subscription = new Subscription();\n                    subscription._subscriptions = [tmp];\n                }\n                break;\n            default:\n                throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n        }\n        var subscriptions = this._subscriptions || (this._subscriptions = []);\n        subscriptions.push(subscription);\n        subscription._addParent(this);\n        return subscription;\n    };\n    /**\n     * Removes a Subscription from the internal list of subscriptions that will\n     * unsubscribe during the unsubscribe process of this Subscription.\n     * @param {Subscription} subscription The subscription to remove.\n     * @return {void}\n     */\n    Subscription.prototype.remove = function (subscription) {\n        var subscriptions = this._subscriptions;\n        if (subscriptions) {\n            var subscriptionIndex = subscriptions.indexOf(subscription);\n            if (subscriptionIndex !== -1) {\n                subscriptions.splice(subscriptionIndex, 1);\n            }\n        }\n    };\n    Subscription.prototype._addParent = function (parent) {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        if (!_parent || _parent === parent) {\n            // If we don't have a parent, or the new parent is the same as the\n            // current parent, then set this._parent to the new parent.\n            this._parent = parent;\n        }\n        else if (!_parents) {\n            // If there's already one parent, but not multiple, allocate an Array to\n            // store the rest of the parent Subscriptions.\n            this._parents = [parent];\n        }\n        else if (_parents.indexOf(parent) === -1) {\n            // Only add the new parent to the _parents list if it's not already there.\n            _parents.push(parent);\n        }\n    };\n    Subscription.EMPTY = (function (empty) {\n        empty.closed = true;\n        return empty;\n    }(new Subscription()));\n    return Subscription;\n}());\nfunction flattenUnsubscriptionErrors(errors) {\n    return errors.reduce(function (errs, err) { return errs.concat((err instanceof UnsubscriptionError) ? err.errors : err); }, []);\n}\n//# sourceMappingURL=Subscription.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Subscription.js","/** PURE_IMPORTS_START ._util_isFunction,._Subscription,._Observer,._symbol_rxSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { isFunction } from './util/isFunction';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport var Subscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(Subscriber, _super);\n    /**\n     * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n     * defined Observer or a `next` callback function.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     */\n    function Subscriber(destinationOrNext, error, complete) {\n        _super.call(this);\n        this.syncErrorValue = null;\n        this.syncErrorThrown = false;\n        this.syncErrorThrowable = false;\n        this.isStopped = false;\n        switch (arguments.length) {\n            case 0:\n                this.destination = emptyObserver;\n                break;\n            case 1:\n                if (!destinationOrNext) {\n                    this.destination = emptyObserver;\n                    break;\n                }\n                if (typeof destinationOrNext === 'object') {\n                    // HACK(benlesh): To resolve an issue where Node users may have multiple\n                    // copies of rxjs in their node_modules directory.\n                    if (isTrustedSubscriber(destinationOrNext)) {\n                        var trustedSubscriber = destinationOrNext[rxSubscriberSymbol]();\n                        this.syncErrorThrowable = trustedSubscriber.syncErrorThrowable;\n                        this.destination = trustedSubscriber;\n                        trustedSubscriber.add(this);\n                    }\n                    else {\n                        this.syncErrorThrowable = true;\n                        this.destination = new SafeSubscriber(this, destinationOrNext);\n                    }\n                    break;\n                }\n            default:\n                this.syncErrorThrowable = true;\n                this.destination = new SafeSubscriber(this, destinationOrNext, error, complete);\n                break;\n        }\n    }\n    Subscriber.prototype[rxSubscriberSymbol] = function () { return this; };\n    /**\n     * A static factory for a Subscriber, given a (potentially partial) definition\n     * of an Observer.\n     * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n     * @param {function(e: ?any): void} [error] The `error` callback of an\n     * Observer.\n     * @param {function(): void} [complete] The `complete` callback of an\n     * Observer.\n     * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n     * Observer represented by the given arguments.\n     */\n    Subscriber.create = function (next, error, complete) {\n        var subscriber = new Subscriber(next, error, complete);\n        subscriber.syncErrorThrowable = false;\n        return subscriber;\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `next` from\n     * the Observable, with a value. The Observable may call this method 0 or more\n     * times.\n     * @param {T} [value] The `next` value.\n     * @return {void}\n     */\n    Subscriber.prototype.next = function (value) {\n        if (!this.isStopped) {\n            this._next(value);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive notifications of type `error` from\n     * the Observable, with an attached {@link Error}. Notifies the Observer that\n     * the Observable has experienced an error condition.\n     * @param {any} [err] The `error` exception.\n     * @return {void}\n     */\n    Subscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._error(err);\n        }\n    };\n    /**\n     * The {@link Observer} callback to receive a valueless notification of type\n     * `complete` from the Observable. Notifies the Observer that the Observable\n     * has finished sending push-based notifications.\n     * @return {void}\n     */\n    Subscriber.prototype.complete = function () {\n        if (!this.isStopped) {\n            this.isStopped = true;\n            this._complete();\n        }\n    };\n    Subscriber.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.isStopped = true;\n        _super.prototype.unsubscribe.call(this);\n    };\n    Subscriber.prototype._next = function (value) {\n        this.destination.next(value);\n    };\n    Subscriber.prototype._error = function (err) {\n        this.destination.error(err);\n        this.unsubscribe();\n    };\n    Subscriber.prototype._complete = function () {\n        this.destination.complete();\n        this.unsubscribe();\n    };\n    /** @deprecated internal use only */ Subscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, _parent = _a._parent, _parents = _a._parents;\n        this._parent = null;\n        this._parents = null;\n        this.unsubscribe();\n        this.closed = false;\n        this.isStopped = false;\n        this._parent = _parent;\n        this._parents = _parents;\n        return this;\n    };\n    return Subscriber;\n}(Subscription));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SafeSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SafeSubscriber, _super);\n    function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n        _super.call(this);\n        this._parentSubscriber = _parentSubscriber;\n        var next;\n        var context = this;\n        if (isFunction(observerOrNext)) {\n            next = observerOrNext;\n        }\n        else if (observerOrNext) {\n            next = observerOrNext.next;\n            error = observerOrNext.error;\n            complete = observerOrNext.complete;\n            if (observerOrNext !== emptyObserver) {\n                context = Object.create(observerOrNext);\n                if (isFunction(context.unsubscribe)) {\n                    this.add(context.unsubscribe.bind(context));\n                }\n                context.unsubscribe = this.unsubscribe.bind(this);\n            }\n        }\n        this._context = context;\n        this._next = next;\n        this._error = error;\n        this._complete = complete;\n    }\n    SafeSubscriber.prototype.next = function (value) {\n        if (!this.isStopped && this._next) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (!_parentSubscriber.syncErrorThrowable) {\n                this.__tryOrUnsub(this._next, value);\n            }\n            else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.error = function (err) {\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._error) {\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(this._error, err);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, this._error, err);\n                    this.unsubscribe();\n                }\n            }\n            else if (!_parentSubscriber.syncErrorThrowable) {\n                this.unsubscribe();\n                throw err;\n            }\n            else {\n                _parentSubscriber.syncErrorValue = err;\n                _parentSubscriber.syncErrorThrown = true;\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.complete = function () {\n        var _this = this;\n        if (!this.isStopped) {\n            var _parentSubscriber = this._parentSubscriber;\n            if (this._complete) {\n                var wrappedComplete = function () { return _this._complete.call(_this._context); };\n                if (!_parentSubscriber.syncErrorThrowable) {\n                    this.__tryOrUnsub(wrappedComplete);\n                    this.unsubscribe();\n                }\n                else {\n                    this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n                    this.unsubscribe();\n                }\n            }\n            else {\n                this.unsubscribe();\n            }\n        }\n    };\n    SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            this.unsubscribe();\n            throw err;\n        }\n    };\n    SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n        try {\n            fn.call(this._context, value);\n        }\n        catch (err) {\n            parent.syncErrorValue = err;\n            parent.syncErrorThrown = true;\n            return true;\n        }\n        return false;\n    };\n    /** @deprecated internal use only */ SafeSubscriber.prototype._unsubscribe = function () {\n        var _parentSubscriber = this._parentSubscriber;\n        this._context = null;\n        this._parentSubscriber = null;\n        _parentSubscriber.unsubscribe();\n    };\n    return SafeSubscriber;\n}(Subscriber));\nfunction isTrustedSubscriber(obj) {\n    return obj instanceof Subscriber || ('syncErrorThrowable' in obj && obj[rxSubscriberSymbol]);\n}\n//# sourceMappingURL=Subscriber.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Subscriber.js","/** PURE_IMPORTS_START .._Subscriber,.._symbol_rxSubscriber,.._Observer PURE_IMPORTS_END */\nimport { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { empty as emptyObserver } from '../Observer';\nexport function toSubscriber(nextOrObserver, error, complete) {\n    if (nextOrObserver) {\n        if (nextOrObserver instanceof Subscriber) {\n            return nextOrObserver;\n        }\n        if (nextOrObserver[rxSubscriberSymbol]) {\n            return nextOrObserver[rxSubscriberSymbol]();\n        }\n    }\n    if (!nextOrObserver && !error && !complete) {\n        return new Subscriber(emptyObserver);\n    }\n    return new Subscriber(nextOrObserver, error, complete);\n}\n//# sourceMappingURL=toSubscriber.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/toSubscriber.js","/* tslint:disable:no-empty */\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function noop() { }\n//# sourceMappingURL=noop.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/noop.js","/** PURE_IMPORTS_START ._noop PURE_IMPORTS_END */\nimport { noop } from './noop';\n/* tslint:enable:max-line-length */\nexport function pipe() {\n    var fns = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        fns[_i - 0] = arguments[_i];\n    }\n    return pipeFromArray(fns);\n}\n/* @internal */\nexport function pipeFromArray(fns) {\n    if (!fns) {\n        return noop;\n    }\n    if (fns.length === 1) {\n        return fns[0];\n    }\n    return function piped(input) {\n        return fns.reduce(function (prev, fn) { return fn(prev); }, input);\n    };\n}\n//# sourceMappingURL=pipe.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/pipe.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isScheduler(value) {\n    return value && typeof value.schedule === 'function';\n}\n//# sourceMappingURL=isScheduler.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/isScheduler.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function isPromise(value) {\n    return value && typeof value.subscribe !== 'function' && typeof value.then === 'function';\n}\n//# sourceMappingURL=isPromise.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/isPromise.js","/** PURE_IMPORTS_START ._root,._isArrayLike,._isPromise,._isObject,.._Observable,.._symbol_iterator,.._InnerSubscriber,.._symbol_observable PURE_IMPORTS_END */\nimport { root } from './root';\nimport { isArrayLike } from './isArrayLike';\nimport { isPromise } from './isPromise';\nimport { isObject } from './isObject';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { InnerSubscriber } from '../InnerSubscriber';\nimport { observable as Symbol_observable } from '../symbol/observable';\nexport function subscribeToResult(outerSubscriber, result, outerValue, outerIndex) {\n    var destination = new InnerSubscriber(outerSubscriber, outerValue, outerIndex);\n    if (destination.closed) {\n        return null;\n    }\n    if (result instanceof Observable) {\n        if (result._isScalar) {\n            destination.next(result.value);\n            destination.complete();\n            return null;\n        }\n        else {\n            destination.syncErrorThrowable = true;\n            return result.subscribe(destination);\n        }\n    }\n    else if (isArrayLike(result)) {\n        for (var i = 0, len = result.length; i < len && !destination.closed; i++) {\n            destination.next(result[i]);\n        }\n        if (!destination.closed) {\n            destination.complete();\n        }\n    }\n    else if (isPromise(result)) {\n        result.then(function (value) {\n            if (!destination.closed) {\n                destination.next(value);\n                destination.complete();\n            }\n        }, function (err) { return destination.error(err); })\n            .then(null, function (err) {\n            // Escaping the Promise trap: globally throw unhandled errors\n            root.setTimeout(function () { throw err; });\n        });\n        return destination;\n    }\n    else if (result && typeof result[Symbol_iterator] === 'function') {\n        var iterator = result[Symbol_iterator]();\n        do {\n            var item = iterator.next();\n            if (item.done) {\n                destination.complete();\n                break;\n            }\n            destination.next(item.value);\n            if (destination.closed) {\n                break;\n            }\n        } while (true);\n    }\n    else if (result && typeof result[Symbol_observable] === 'function') {\n        var obs = result[Symbol_observable]();\n        if (typeof obs.subscribe !== 'function') {\n            destination.error(new TypeError('Provided object does not correctly implement Symbol.observable'));\n        }\n        else {\n            return obs.subscribe(new InnerSubscriber(outerSubscriber, outerValue, outerIndex));\n        }\n    }\n    else {\n        var value = isObject(result) ? 'an invalid object' : \"'\" + result + \"'\";\n        var msg = (\"You provided \" + value + \" where a stream was expected.\")\n            + ' You can provide an Observable, Promise, Array, or Iterable.';\n        destination.error(new TypeError(msg));\n    }\n    return null;\n}\n//# sourceMappingURL=subscribeToResult.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/subscribeToResult.js","/** PURE_IMPORTS_START .._util_isScheduler,.._util_isArray,._ArrayObservable,.._operators_combineLatest PURE_IMPORTS_END */\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nimport { ArrayObservable } from './ArrayObservable';\nimport { CombineLatestOperator } from '../operators/combineLatest';\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from all the Observables passed as\n * arguments. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to operator,\n * returned Observable will always emit an array of `n` values, in order\n * corresponding to order of passed Observables (value from the first Observable\n * on the first place and so on).\n *\n * Static version of `combineLatest` accepts either an array of Observables\n * or each Observable can be put directly as an argument. Note that array of\n * Observables is good choice, if you don't know beforehand how many Observables\n * you will combine. Passing empty array will result in Observable that\n * completes immediately.\n *\n * To ensure output array has always the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all that values but last\n * will be lost. On the other hand, is some Observable does not emit value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will be now impossible to include value from\n * completed Observable in resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * `combineLatest` accepts as optional parameter `project` function, which takes\n * as arguments all values that would normally be emitted by resulting Observable.\n * `project` can return any kind of value, which will be then emitted by Observable\n * instead of default array. Note that `project` does not take as argument that array\n * of values, but values themselves. That means default `project` can be imagined\n * as function that takes all its arguments and puts them into an array.\n *\n *\n * @example <caption>Combine two timer Observables</caption>\n * const firstTimer = Rx.Observable.timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = Rx.Observable.timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = Rx.Observable.combineLatest(firstTimer, secondTimer);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n *\n *\n * @example <caption>Combine an array of Observables</caption>\n * const observables = [1, 5, 10].map(\n *   n => Rx.Observable.of(n).delay(n * 1000).startWith(0) // emit 0 and then emit n after n seconds\n * );\n * const combined = Rx.Observable.combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n *\n *\n * @example <caption>Use project function to dynamically calculate the Body-Mass Index</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = Rx.Observable.combineLatest(weight, height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} observable1 An input Observable to combine with other Observables.\n * @param {ObservableInput} observable2 An input Observable to combine with other Observables.\n * More than one input Observables may be given as arguments\n * or an array of Observables may be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @static true\n * @name combineLatest\n * @owner Observable\n */\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    var scheduler = null;\n    if (isScheduler(observables[observables.length - 1])) {\n        scheduler = observables.pop();\n    }\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0];\n    }\n    return new ArrayObservable(observables, scheduler).lift(new CombineLatestOperator(project));\n}\n//# sourceMappingURL=combineLatest.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/combineLatest.js","/** PURE_IMPORTS_START .._Observable,.._util_tryCatch,.._util_isFunction,.._util_errorObject,.._Subscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { tryCatch } from '../util/tryCatch';\nimport { isFunction } from '../util/isFunction';\nimport { errorObject } from '../util/errorObject';\nimport { Subscription } from '../Subscription';\nvar toString = Object.prototype.toString;\nfunction isNodeStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addListener === 'function' && typeof sourceObj.removeListener === 'function';\n}\nfunction isJQueryStyleEventEmitter(sourceObj) {\n    return !!sourceObj && typeof sourceObj.on === 'function' && typeof sourceObj.off === 'function';\n}\nfunction isNodeList(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object NodeList]';\n}\nfunction isHTMLCollection(sourceObj) {\n    return !!sourceObj && toString.call(sourceObj) === '[object HTMLCollection]';\n}\nfunction isEventTarget(sourceObj) {\n    return !!sourceObj && typeof sourceObj.addEventListener === 'function' && typeof sourceObj.removeEventListener === 'function';\n}\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var FromEventObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(FromEventObservable, _super);\n    function FromEventObservable(sourceObj, eventName, selector, options) {\n        _super.call(this);\n        this.sourceObj = sourceObj;\n        this.eventName = eventName;\n        this.selector = selector;\n        this.options = options;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Creates an Observable that emits events of a specific type coming from the\n     * given event target.\n     *\n     * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n     * EventEmitter events or others.</span>\n     *\n     * <img src=\"./img/fromEvent.png\" width=\"100%\">\n     *\n     * `fromEvent` accepts as a first argument event target, which is an object with methods\n     * for registering event handler functions. As a second argument it takes string that indicates\n     * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n     * which are described in detail below. If your event target does not match any of the ones listed,\n     * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n     * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n     * handler functions have different names, but they all accept a string describing event type\n     * and function itself, which will be called whenever said event happens.\n     *\n     * Every time resulting Observable is subscribed, event handler function will be registered\n     * to event target on given event type. When that event fires, value\n     * passed as a first argument to registered function will be emitted by output Observable.\n     * When Observable is unsubscribed, function will be unregistered from event target.\n     *\n     * Note that if event target calls registered function with more than one argument, second\n     * and following arguments will not appear in resulting stream. In order to get access to them,\n     * you can pass to `fromEvent` optional project function, which will be called with all arguments\n     * passed to event handler. Output Observable will then emit value returned by project function,\n     * instead of the usual value.\n     *\n     * Remember that event targets listed below are checked via duck typing. It means that\n     * no matter what kind of object you have and no matter what environment you work in,\n     * you can safely use `fromEvent` on that object if it exposes described methods (provided\n     * of course they behave as was described above). So for example if Node.js library exposes\n     * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n     * a good choice.\n     *\n     * If the API you use is more callback then event handler oriented (subscribed\n     * callback function fires only once and thus there is no need to manually\n     * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n     * instead.\n     *\n     * `fromEvent` supports following types of event targets:\n     *\n     * **DOM EventTarget**\n     *\n     * This is an object with `addEventListener` and `removeEventListener` methods.\n     *\n     * In the browser, `addEventListener` accepts - apart from event type string and event\n     * handler function arguments - optional third parameter, which is either an object or boolean,\n     * both used for additional configuration how and when passed function will be called. When\n     * `fromEvent` is used with event target of that type, you can provide this values\n     * as third parameter as well.\n     *\n     * **Node.js EventEmitter**\n     *\n     * An object with `addListener` and `removeListener` methods.\n     *\n     * **JQuery-style event target**\n     *\n     * An object with `on` and `off` methods\n     *\n     * **DOM NodeList**\n     *\n     * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n     *\n     * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n     * it contains and install event handler function in every of them. When returned Observable\n     * is unsubscribed, function will be removed from all Nodes.\n     *\n     * **DOM HtmlCollection**\n     *\n     * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n     * installed and removed in each of elements.\n     *\n     *\n     * @example <caption>Emits clicks happening on the DOM document</caption>\n     * var clicks = Rx.Observable.fromEvent(document, 'click');\n     * clicks.subscribe(x => console.log(x));\n     *\n     * // Results in:\n     * // MouseEvent object logged to console every time a click\n     * // occurs on the document.\n     *\n     *\n     * @example <caption>Use addEventListener with capture option</caption>\n     * var clicksInDocument = Rx.Observable.fromEvent(document, 'click', true); // note optional configuration parameter\n     *                                                                          // which will be passed to addEventListener\n     * var clicksInDiv = Rx.Observable.fromEvent(someDivInDocument, 'click');\n     *\n     * clicksInDocument.subscribe(() => console.log('document'));\n     * clicksInDiv.subscribe(() => console.log('div'));\n     *\n     * // By default events bubble UP in DOM tree, so normally\n     * // when we would click on div in document\n     * // \"div\" would be logged first and then \"document\".\n     * // Since we specified optional `capture` option, document\n     * // will catch event when it goes DOWN DOM tree, so console\n     * // will log \"document\" and then \"div\".\n     *\n     * @see {@link bindCallback}\n     * @see {@link bindNodeCallback}\n     * @see {@link fromEventPattern}\n     *\n     * @param {EventTargetLike} target The DOM EventTarget, Node.js\n     * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n     * @param {string} eventName The event name of interest, being emitted by the\n     * `target`.\n     * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n     * @param {SelectorMethodSignature<T>} [selector] An optional function to\n     * post-process results. It takes the arguments from the event handler and\n     * should return a single value.\n     * @return {Observable<T>}\n     * @static true\n     * @name fromEvent\n     * @owner Observable\n     */\n    FromEventObservable.create = function (target, eventName, options, selector) {\n        if (isFunction(options)) {\n            selector = options;\n            options = undefined;\n        }\n        return new FromEventObservable(target, eventName, selector, options);\n    };\n    FromEventObservable.setupSubscription = function (sourceObj, eventName, handler, subscriber, options) {\n        var unsubscribe;\n        if (isNodeList(sourceObj) || isHTMLCollection(sourceObj)) {\n            for (var i = 0, len = sourceObj.length; i < len; i++) {\n                FromEventObservable.setupSubscription(sourceObj[i], eventName, handler, subscriber, options);\n            }\n        }\n        else if (isEventTarget(sourceObj)) {\n            var source_1 = sourceObj;\n            sourceObj.addEventListener(eventName, handler, options);\n            unsubscribe = function () { return source_1.removeEventListener(eventName, handler, options); };\n        }\n        else if (isJQueryStyleEventEmitter(sourceObj)) {\n            var source_2 = sourceObj;\n            sourceObj.on(eventName, handler);\n            unsubscribe = function () { return source_2.off(eventName, handler); };\n        }\n        else if (isNodeStyleEventEmitter(sourceObj)) {\n            var source_3 = sourceObj;\n            sourceObj.addListener(eventName, handler);\n            unsubscribe = function () { return source_3.removeListener(eventName, handler); };\n        }\n        else {\n            throw new TypeError('Invalid event target');\n        }\n        subscriber.add(new Subscription(unsubscribe));\n    };\n    /** @deprecated internal use only */ FromEventObservable.prototype._subscribe = function (subscriber) {\n        var sourceObj = this.sourceObj;\n        var eventName = this.eventName;\n        var options = this.options;\n        var selector = this.selector;\n        var handler = selector ? function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            var result = tryCatch(selector).apply(void 0, args);\n            if (result === errorObject) {\n                subscriber.error(errorObject.e);\n            }\n            else {\n                subscriber.next(result);\n            }\n        } : function (e) { return subscriber.next(e); };\n        FromEventObservable.setupSubscription(sourceObj, eventName, handler, subscriber, options);\n    };\n    return FromEventObservable;\n}(Observable));\n//# sourceMappingURL=FromEventObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/FromEventObservable.js","/** PURE_IMPORTS_START .._util_subscribeToResult,.._OuterSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * <img src=\"./img/mergeMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * @example <caption>Map and flatten each letter to an Observable ticking every 1 second</caption>\n * var letters = Rx.Observable.of('a', 'b', 'c');\n * var result = letters.mergeMap(x =>\n *   Rx.Observable.interval(1000).map(i => x+i)\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and merging the results of the Observables obtained\n * from this transformation.\n * @method mergeMap\n * @owner Observable\n */\nexport function mergeMap(project, resultSelector, concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return function mergeMapOperatorFunction(source) {\n        if (typeof resultSelector === 'number') {\n            concurrent = resultSelector;\n            resultSelector = null;\n        }\n        return source.lift(new MergeMapOperator(project, resultSelector, concurrent));\n    };\n}\nexport var MergeMapOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MergeMapOperator(project, resultSelector, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n    }\n    MergeMapOperator.prototype.call = function (observer, source) {\n        return source.subscribe(new MergeMapSubscriber(observer, this.project, this.resultSelector, this.concurrent));\n    };\n    return MergeMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var MergeMapSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(MergeMapSubscriber, _super);\n    function MergeMapSubscriber(destination, project, resultSelector, concurrent) {\n        if (concurrent === void 0) {\n            concurrent = Number.POSITIVE_INFINITY;\n        }\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.concurrent = concurrent;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    MergeMapSubscriber.prototype._next = function (value) {\n        if (this.active < this.concurrent) {\n            this._tryNext(value);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    };\n    MergeMapSubscriber.prototype._tryNext = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.active++;\n        this._innerSub(result, value, index);\n    };\n    MergeMapSubscriber.prototype._innerSub = function (ish, value, index) {\n        this.add(subscribeToResult(this, ish, value, index));\n    };\n    MergeMapSubscriber.prototype._complete = function () {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            this.destination.complete();\n        }\n    };\n    MergeMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._notifyResultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    MergeMapSubscriber.prototype._notifyResultSelector = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    MergeMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        var buffer = this.buffer;\n        this.remove(innerSub);\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            this.destination.complete();\n        }\n    };\n    return MergeMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=mergeMap.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/mergeMap.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport function identity(x) {\n    return x;\n}\n//# sourceMappingURL=identity.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/identity.js","/** PURE_IMPORTS_START ._mergeMap,.._util_identity PURE_IMPORTS_END */\nimport { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * <img src=\"./img/mergeAll.png\" width=\"100%\">\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Spawn a new interval Observable for each click event, and blend their outputs as one Observable</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000));\n * var firstOrder = higherOrder.mergeAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * @example <caption>Count from 0 to 9 every second for each click, but only allow 2 concurrent timers</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map((ev) => Rx.Observable.interval(1000).take(10));\n * var firstOrder = higherOrder.mergeAll(2);\n * firstOrder.subscribe(x => console.log(x));\n *\n * @see {@link combineAll}\n * @see {@link concatAll}\n * @see {@link exhaust}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return {Observable} An Observable that emits values coming from all the\n * inner Observables emitted by the source Observable.\n * @method mergeAll\n * @owner Observable\n */\nexport function mergeAll(concurrent) {\n    if (concurrent === void 0) {\n        concurrent = Number.POSITIVE_INFINITY;\n    }\n    return mergeMap(identity, null, concurrent);\n}\n//# sourceMappingURL=mergeAll.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/mergeAll.js","/** PURE_IMPORTS_START .._Observable,._ArrayObservable,.._util_isScheduler,.._operators_mergeAll PURE_IMPORTS_END */\nimport { Observable } from '../Observable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { isScheduler } from '../util/isScheduler';\nimport { mergeAll } from '../operators/mergeAll';\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * <img src=\"./img/merge.png\" width=\"100%\">\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * @example <caption>Merge together two Observables: 1s interval and clicks</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var clicksOrTimer = Rx.Observable.merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n *\n * @example <caption>Merge together 3 Observables, but only 2 run concurrently</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var concurrent = 2; // the argument\n * var merged = Rx.Observable.merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits it's max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits it's max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Number.POSITIVE_INFINITY] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {Scheduler} [scheduler=null] The IScheduler to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n * @static true\n * @name merge\n * @owner Observable\n */\nexport function merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var concurrent = Number.POSITIVE_INFINITY;\n    var scheduler = null;\n    var last = observables[observables.length - 1];\n    if (isScheduler(last)) {\n        scheduler = observables.pop();\n        if (observables.length > 1 && typeof observables[observables.length - 1] === 'number') {\n            concurrent = observables.pop();\n        }\n    }\n    else if (typeof last === 'number') {\n        concurrent = observables.pop();\n    }\n    if (scheduler === null && observables.length === 1 && observables[0] instanceof Observable) {\n        return observables[0];\n    }\n    return mergeAll(concurrent)(new ArrayObservable(observables, scheduler));\n}\n//# sourceMappingURL=merge.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/merge.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Perform a side effect for every emission on the source Observable, but return\n * an Observable that is identical to the source.\n *\n * <span class=\"informal\">Intercepts each emission on the source and runs a\n * function, but returns an output which is identical to the source as long as errors don't occur.</span>\n *\n * <img src=\"./img/do.png\" width=\"100%\">\n *\n * Returns a mirrored Observable of the source Observable, but modified so that\n * the provided Observer is called to perform a side effect for every value,\n * error, and completion emitted by the source. Any errors that are thrown in\n * the aforementioned Observer or handlers are safely sent down the error path\n * of the output Observable.\n *\n * This operator is useful for debugging your Observables for the correct values\n * or performing other side effects.\n *\n * Note: this is different to a `subscribe` on the Observable. If the Observable\n * returned by `do` is not subscribed, the side effects specified by the\n * Observer will never happen. `do` therefore simply spies on existing\n * execution, it does not trigger an execution to happen like `subscribe` does.\n *\n * @example <caption>Map every click to the clientX position of that click, while also logging the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks\n *   .do(ev => console.log(ev))\n *   .map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link map}\n * @see {@link subscribe}\n *\n * @param {Observer|function} [nextOrObserver] A normal Observer object or a\n * callback for `next`.\n * @param {function} [error] Callback for errors in the source.\n * @param {function} [complete] Callback for the completion of the source.\n * @return {Observable} An Observable identical to the source, but runs the\n * specified Observer or callback(s) for each item.\n * @name tap\n */\nexport function tap(nextOrObserver, error, complete) {\n    return function tapOperatorFunction(source) {\n        return source.lift(new DoOperator(nextOrObserver, error, complete));\n    };\n}\nvar DoOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function DoOperator(nextOrObserver, error, complete) {\n        this.nextOrObserver = nextOrObserver;\n        this.error = error;\n        this.complete = complete;\n    }\n    DoOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DoSubscriber(subscriber, this.nextOrObserver, this.error, this.complete));\n    };\n    return DoOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DoSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DoSubscriber, _super);\n    function DoSubscriber(destination, nextOrObserver, error, complete) {\n        _super.call(this, destination);\n        var safeSubscriber = new Subscriber(nextOrObserver, error, complete);\n        safeSubscriber.syncErrorThrowable = true;\n        this.add(safeSubscriber);\n        this.safeSubscriber = safeSubscriber;\n    }\n    DoSubscriber.prototype._next = function (value) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.next(value);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.next(value);\n        }\n    };\n    DoSubscriber.prototype._error = function (err) {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.error(err);\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.error(err);\n        }\n    };\n    DoSubscriber.prototype._complete = function () {\n        var safeSubscriber = this.safeSubscriber;\n        safeSubscriber.complete();\n        if (safeSubscriber.syncErrorThrown) {\n            this.destination.error(safeSubscriber.syncErrorValue);\n        }\n        else {\n            this.destination.complete();\n        }\n    };\n    return DoSubscriber;\n}(Subscriber));\n//# sourceMappingURL=tap.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/tap.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/* tslint:enable:max-line-length */\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * <img src=\"./img/filter.png\" width=\"100%\">\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * @example <caption>Emit only click events whose target was a DIV element</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var clicksOnDivs = clicks.filter(ev => ev.target.tagName === 'DIV');\n * clicksOnDivs.subscribe(x => console.log(x));\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {Observable} An Observable of values from the source that were\n * allowed by the `predicate` function.\n * @method filter\n * @owner Observable\n */\nexport function filter(predicate, thisArg) {\n    return function filterOperatorFunction(source) {\n        return source.lift(new FilterOperator(predicate, thisArg));\n    };\n}\nvar FilterOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function FilterOperator(predicate, thisArg) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n    }\n    FilterOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new FilterSubscriber(subscriber, this.predicate, this.thisArg));\n    };\n    return FilterOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar FilterSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(FilterSubscriber, _super);\n    function FilterSubscriber(destination, predicate, thisArg) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.count = 0;\n    }\n    // the try catch block below is left specifically for\n    // optimization and perf reasons. a tryCatcher is not necessary here.\n    FilterSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.destination.next(value);\n        }\n    };\n    return FilterSubscriber;\n}(Subscriber));\n//# sourceMappingURL=filter.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/filter.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * <img src=\"./img/map.png\" width=\"100%\">\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * @example <caption>Map every click to the clientX position of that click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var positions = clicks.map(ev => ev.clientX);\n * positions.subscribe(x => console.log(x));\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return {Observable<R>} An Observable that emits the values from the source\n * Observable transformed by the given `project` function.\n * @method map\n * @owner Observable\n */\nexport function map(project, thisArg) {\n    return function mapOperation(source) {\n        if (typeof project !== 'function') {\n            throw new TypeError('argument is not a function. Are you looking for `mapTo()`?');\n        }\n        return source.lift(new MapOperator(project, thisArg));\n    };\n}\nexport var MapOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MapOperator(project, thisArg) {\n        this.project = project;\n        this.thisArg = thisArg;\n    }\n    MapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapSubscriber(subscriber, this.project, this.thisArg));\n    };\n    return MapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(MapSubscriber, _super);\n    function MapSubscriber(destination, project, thisArg) {\n        _super.call(this, destination);\n        this.project = project;\n        this.count = 0;\n        this.thisArg = thisArg || this;\n    }\n    // NOTE: This looks unoptimized, but it's actually purposefully NOT\n    // using try/catch optimizations.\n    MapSubscriber.prototype._next = function (value) {\n        var result;\n        try {\n            result = this.project.call(this.thisArg, value, this.count++);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return MapSubscriber;\n}(Subscriber));\n//# sourceMappingURL=map.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/map.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * <img src=\"./img/pairwise.png\" width=\"100%\">\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * @example <caption>On every click (starting from the second), emit the relative distance to the previous click</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var pairs = clicks.pairwise();\n * var distance = pairs.map(pair => {\n *   var x0 = pair[0].clientX;\n *   var y0 = pair[0].clientY;\n *   var x1 = pair[1].clientX;\n *   var y1 = pair[1].clientY;\n *   return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n * });\n * distance.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return {Observable<Array<T>>} An Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n * @method pairwise\n * @owner Observable\n */\nexport function pairwise() {\n    return function (source) { return source.lift(new PairwiseOperator()); };\n}\nvar PairwiseOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function PairwiseOperator() {\n    }\n    PairwiseOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new PairwiseSubscriber(subscriber));\n    };\n    return PairwiseOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar PairwiseSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(PairwiseSubscriber, _super);\n    function PairwiseSubscriber(destination) {\n        _super.call(this, destination);\n        this.hasPrev = false;\n    }\n    PairwiseSubscriber.prototype._next = function (value) {\n        if (this.hasPrev) {\n            this.destination.next([this.prev, value]);\n        }\n        else {\n            this.hasPrev = true;\n        }\n        this.prev = value;\n    };\n    return PairwiseSubscriber;\n}(Subscriber));\n//# sourceMappingURL=pairwise.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/pairwise.js","/** PURE_IMPORTS_START .._Subject,.._util_tryCatch,.._util_errorObject,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subject } from '../Subject';\nimport { tryCatch } from '../util/tryCatch';\nimport { errorObject } from '../util/errorObject';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * <img src=\"./img/repeatWhen.png\" width=\"100%\">\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return {Observable} The source Observable modified with repeat logic.\n * @method repeatWhen\n * @owner Observable\n */\nexport function repeatWhen(notifier) {\n    return function (source) { return source.lift(new RepeatWhenOperator(notifier)); };\n}\nvar RepeatWhenOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function RepeatWhenOperator(notifier) {\n        this.notifier = notifier;\n    }\n    RepeatWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    };\n    return RepeatWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar RepeatWhenSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(RepeatWhenSubscriber, _super);\n    function RepeatWhenSubscriber(destination, notifier, source) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    RepeatWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    };\n    RepeatWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return _super.prototype.complete.call(this);\n        }\n    };\n    RepeatWhenSubscriber.prototype.complete = function () {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return _super.prototype.complete.call(this);\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next();\n        }\n    };\n    /** @deprecated internal use only */ RepeatWhenSubscriber.prototype._unsubscribe = function () {\n        var _a = this, notifications = _a.notifications, retriesSubscription = _a.retriesSubscription;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = null;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = null;\n        }\n        this.retries = null;\n    };\n    /** @deprecated internal use only */ RepeatWhenSubscriber.prototype._unsubscribeAndRecycle = function () {\n        var _a = this, notifications = _a.notifications, retries = _a.retries, retriesSubscription = _a.retriesSubscription;\n        this.notifications = null;\n        this.retries = null;\n        this.retriesSubscription = null;\n        _super.prototype._unsubscribeAndRecycle.call(this);\n        this.notifications = notifications;\n        this.retries = retries;\n        this.retriesSubscription = retriesSubscription;\n        return this;\n    };\n    RepeatWhenSubscriber.prototype.subscribeToRetries = function () {\n        this.notifications = new Subject();\n        var retries = tryCatch(this.notifier)(this.notifications);\n        if (retries === errorObject) {\n            return _super.prototype.complete.call(this);\n        }\n        this.retries = retries;\n        this.retriesSubscription = subscribeToResult(this, retries);\n    };\n    return RepeatWhenSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=repeatWhen.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/repeatWhen.js","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * <img src=\"./img/sample.png\" width=\"100%\">\n *\n * Whenever the `notifier` Observable emits a value or completes, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * @example <caption>On every click, sample the most recent \"seconds\" timer</caption>\n * var seconds = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = seconds.sample(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {Observable<any>} notifier The Observable to use for sampling the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the results of sampling the\n * values emitted by the source Observable whenever the notifier Observable\n * emits value or completes.\n * @method sample\n * @owner Observable\n */\nexport function sample(notifier) {\n    return function (source) { return source.lift(new SampleOperator(notifier)); };\n}\nvar SampleOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SampleOperator(notifier) {\n        this.notifier = notifier;\n    }\n    SampleOperator.prototype.call = function (subscriber, source) {\n        var sampleSubscriber = new SampleSubscriber(subscriber);\n        var subscription = source.subscribe(sampleSubscriber);\n        subscription.add(subscribeToResult(sampleSubscriber, this.notifier));\n        return subscription;\n    };\n    return SampleOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SampleSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SampleSubscriber, _super);\n    function SampleSubscriber() {\n        _super.apply(this, arguments);\n        this.hasValue = false;\n    }\n    SampleSubscriber.prototype._next = function (value) {\n        this.value = value;\n        this.hasValue = true;\n    };\n    SampleSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.notifyComplete = function () {\n        this.emitValue();\n    };\n    SampleSubscriber.prototype.emitValue = function () {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    };\n    return SampleSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=sample.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/sample.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nexport function refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nvar RefCountOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=refCount.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/refCount.js","/** PURE_IMPORTS_START .._observable_ConnectableObservable PURE_IMPORTS_END */\nimport { connectableObservableDescriptor } from '../observable/ConnectableObservable';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the results of invoking a specified selector on items\n * emitted by a ConnectableObservable that shares a single subscription to the underlying stream.\n *\n * <img src=\"./img/multicast.png\" width=\"100%\">\n *\n * @param {Function|Subject} subjectOrSubjectFactory - Factory function to create an intermediate subject through\n * which the source sequence's elements will be multicast to the selector function\n * or Subject to push source elements into.\n * @param {Function} [selector] - Optional selector function that can use the multicasted source stream\n * as many times as needed, without causing multiple subscriptions to the source stream.\n * Subscribers to the given source will receive all notifications of the source from the\n * time of the subscription forward.\n * @return {Observable} An Observable that emits the results of invoking the selector\n * on the items emitted by a `ConnectableObservable` that shares a single subscription to\n * the underlying stream.\n * @method multicast\n * @owner Observable\n */\nexport function multicast(subjectOrSubjectFactory, selector) {\n    return function multicastOperatorFunction(source) {\n        var subjectFactory;\n        if (typeof subjectOrSubjectFactory === 'function') {\n            subjectFactory = subjectOrSubjectFactory;\n        }\n        else {\n            subjectFactory = function subjectFactory() {\n                return subjectOrSubjectFactory;\n            };\n        }\n        if (typeof selector === 'function') {\n            return source.lift(new MulticastOperator(subjectFactory, selector));\n        }\n        var connectable = Object.create(source, connectableObservableDescriptor);\n        connectable.source = source;\n        connectable.subjectFactory = subjectFactory;\n        return connectable;\n    };\n}\nexport var MulticastOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MulticastOperator(subjectFactory, selector) {\n        this.subjectFactory = subjectFactory;\n        this.selector = selector;\n    }\n    MulticastOperator.prototype.call = function (subscriber, source) {\n        var selector = this.selector;\n        var subject = this.subjectFactory();\n        var subscription = selector(subject).subscribe(subscriber);\n        subscription.add(source.subscribe(subject));\n        return subscription;\n    };\n    return MulticastOperator;\n}());\n//# sourceMappingURL=multicast.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/multicast.js","/** PURE_IMPORTS_START ._multicast,._refCount,.._Subject PURE_IMPORTS_END */\nimport { multicast } from './multicast';\nimport { refCount } from './refCount';\nimport { Subject } from '../Subject';\nfunction shareSubjectFactory() {\n    return new Subject();\n}\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for .multicast(() => new Subject()).refCount().\n *\n * <img src=\"./img/share.png\" width=\"100%\">\n *\n * @return {Observable<T>} An Observable that upon connection causes the source Observable to emit items to its Observers.\n * @method share\n * @owner Observable\n */\nexport function share() {\n    return function (source) { return refCount()(multicast(shareSubjectFactory)(source)); };\n}\n;\n//# sourceMappingURL=share.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/share.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * <img src=\"./img/skip.png\" width=\"100%\">\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return {Observable} An Observable that skips values emitted by the source Observable.\n *\n * @method skip\n * @owner Observable\n */\nexport function skip(count) {\n    return function (source) { return source.lift(new SkipOperator(count)); };\n}\nvar SkipOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SkipOperator(total) {\n        this.total = total;\n    }\n    SkipOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipSubscriber(subscriber, this.total));\n    };\n    return SkipOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SkipSubscriber, _super);\n    function SkipSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    SkipSubscriber.prototype._next = function (x) {\n        if (++this.count > this.total) {\n            this.destination.next(x);\n        }\n    };\n    return SkipSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skip.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/skip.js","/** PURE_IMPORTS_START .._util_root,.._Observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { root } from '../util/root';\nimport { Observable } from '../Observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var PromiseObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(PromiseObservable, _super);\n    function PromiseObservable(promise, scheduler) {\n        _super.call(this);\n        this.promise = promise;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Converts a Promise to an Observable.\n     *\n     * <span class=\"informal\">Returns an Observable that just emits the Promise's\n     * resolved value, then completes.</span>\n     *\n     * Converts an ES2015 Promise or a Promises/A+ spec compliant Promise to an\n     * Observable. If the Promise resolves with a value, the output Observable\n     * emits that resolved value as a `next`, and then completes. If the Promise\n     * is rejected, then the output Observable emits the corresponding Error.\n     *\n     * @example <caption>Convert the Promise returned by Fetch to an Observable</caption>\n     * var result = Rx.Observable.fromPromise(fetch('http://myserver.com/'));\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     *\n     * @param {PromiseLike<T>} promise The promise to be converted.\n     * @param {Scheduler} [scheduler] An optional IScheduler to use for scheduling\n     * the delivery of the resolved value (or the rejection).\n     * @return {Observable<T>} An Observable which wraps the Promise.\n     * @static true\n     * @name fromPromise\n     * @owner Observable\n     */\n    PromiseObservable.create = function (promise, scheduler) {\n        return new PromiseObservable(promise, scheduler);\n    };\n    /** @deprecated internal use only */ PromiseObservable.prototype._subscribe = function (subscriber) {\n        var _this = this;\n        var promise = this.promise;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    subscriber.next(this.value);\n                    subscriber.complete();\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.next(value);\n                        subscriber.complete();\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.error(err);\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n        else {\n            if (this._isScalar) {\n                if (!subscriber.closed) {\n                    return scheduler.schedule(dispatchNext, 0, { value: this.value, subscriber: subscriber });\n                }\n            }\n            else {\n                promise.then(function (value) {\n                    _this.value = value;\n                    _this._isScalar = true;\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchNext, 0, { value: value, subscriber: subscriber }));\n                    }\n                }, function (err) {\n                    if (!subscriber.closed) {\n                        subscriber.add(scheduler.schedule(dispatchError, 0, { err: err, subscriber: subscriber }));\n                    }\n                })\n                    .then(null, function (err) {\n                    // escape the promise trap, throw unhandled errors\n                    root.setTimeout(function () { throw err; });\n                });\n            }\n        }\n    };\n    return PromiseObservable;\n}(Observable));\nfunction dispatchNext(arg) {\n    var value = arg.value, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n    }\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subscriber = arg.subscriber;\n    if (!subscriber.closed) {\n        subscriber.error(err);\n    }\n}\n//# sourceMappingURL=PromiseObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/PromiseObservable.js","/** PURE_IMPORTS_START .._util_root,.._Observable,.._symbol_iterator PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { root } from '../util/root';\nimport { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var IteratorObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(IteratorObservable, _super);\n    function IteratorObservable(iterator, scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n        if (iterator == null) {\n            throw new Error('iterator cannot be null.');\n        }\n        this.iterator = getIterator(iterator);\n    }\n    IteratorObservable.create = function (iterator, scheduler) {\n        return new IteratorObservable(iterator, scheduler);\n    };\n    IteratorObservable.dispatch = function (state) {\n        var index = state.index, hasError = state.hasError, iterator = state.iterator, subscriber = state.subscriber;\n        if (hasError) {\n            subscriber.error(state.error);\n            return;\n        }\n        var result = iterator.next();\n        if (result.done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(result.value);\n        state.index = index + 1;\n        if (subscriber.closed) {\n            if (typeof iterator.return === 'function') {\n                iterator.return();\n            }\n            return;\n        }\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ IteratorObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, iterator = _a.iterator, scheduler = _a.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(IteratorObservable.dispatch, 0, {\n                index: index, iterator: iterator, subscriber: subscriber\n            });\n        }\n        else {\n            do {\n                var result = iterator.next();\n                if (result.done) {\n                    subscriber.complete();\n                    break;\n                }\n                else {\n                    subscriber.next(result.value);\n                }\n                if (subscriber.closed) {\n                    if (typeof iterator.return === 'function') {\n                        iterator.return();\n                    }\n                    break;\n                }\n            } while (true);\n        }\n    };\n    return IteratorObservable;\n}(Observable));\nvar StringIterator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function StringIterator(str, idx, len) {\n        if (idx === void 0) {\n            idx = 0;\n        }\n        if (len === void 0) {\n            len = str.length;\n        }\n        this.str = str;\n        this.idx = idx;\n        this.len = len;\n    }\n    StringIterator.prototype[Symbol_iterator] = function () { return (this); };\n    StringIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.str.charAt(this.idx++)\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return StringIterator;\n}());\nvar ArrayIterator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ArrayIterator(arr, idx, len) {\n        if (idx === void 0) {\n            idx = 0;\n        }\n        if (len === void 0) {\n            len = toLength(arr);\n        }\n        this.arr = arr;\n        this.idx = idx;\n        this.len = len;\n    }\n    ArrayIterator.prototype[Symbol_iterator] = function () { return this; };\n    ArrayIterator.prototype.next = function () {\n        return this.idx < this.len ? {\n            done: false,\n            value: this.arr[this.idx++]\n        } : {\n            done: true,\n            value: undefined\n        };\n    };\n    return ArrayIterator;\n}());\nfunction getIterator(obj) {\n    var i = obj[Symbol_iterator];\n    if (!i && typeof obj === 'string') {\n        return new StringIterator(obj);\n    }\n    if (!i && obj.length !== undefined) {\n        return new ArrayIterator(obj);\n    }\n    if (!i) {\n        throw new TypeError('object is not iterable');\n    }\n    return obj[Symbol_iterator]();\n}\nvar maxSafeInteger = /*@__PURE__*/ Math.pow(2, 53) - 1;\nfunction toLength(o) {\n    var len = +o.length;\n    if (isNaN(len)) {\n        return 0;\n    }\n    if (len === 0 || !numberIsFinite(len)) {\n        return len;\n    }\n    len = sign(len) * Math.floor(Math.abs(len));\n    if (len <= 0) {\n        return 0;\n    }\n    if (len > maxSafeInteger) {\n        return maxSafeInteger;\n    }\n    return len;\n}\nfunction numberIsFinite(value) {\n    return typeof value === 'number' && root.isFinite(value);\n}\nfunction sign(value) {\n    var valueAsNumber = +value;\n    if (valueAsNumber === 0) {\n        return valueAsNumber;\n    }\n    if (isNaN(valueAsNumber)) {\n        return valueAsNumber;\n    }\n    return valueAsNumber < 0 ? -1 : 1;\n}\n//# sourceMappingURL=IteratorObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/IteratorObservable.js","/** PURE_IMPORTS_START ._mergeAll PURE_IMPORTS_END */\nimport { mergeAll } from './mergeAll';\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * <img src=\"./img/concatAll.png\" width=\"100%\">\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * @example <caption>For each click event, tick every second from 0 to 3, with no concurrency</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var higherOrder = clicks.map(ev => Rx.Observable.interval(1000).take(4));\n * var firstOrder = higherOrder.concatAll();\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n *\n * @see {@link combineAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaust}\n * @see {@link mergeAll}\n * @see {@link switch}\n * @see {@link zipAll}\n *\n * @return {Observable} An Observable emitting values from all the inner\n * Observables concatenated.\n * @method concatAll\n * @owner Observable\n */\nexport function concatAll() {\n    return mergeAll(1);\n}\n//# sourceMappingURL=concatAll.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/concatAll.js","/** PURE_IMPORTS_START .._util_isScheduler,._of,._from,.._operators_concatAll PURE_IMPORTS_END */\nimport { isScheduler } from '../util/isScheduler';\nimport { of } from './of';\nimport { from } from './from';\nimport { concatAll } from '../operators/concatAll';\n/* tslint:enable:max-line-length */\n/**\n * Creates an output Observable which sequentially emits all values from given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * <img src=\"./img/concat.png\" width=\"100%\">\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * @example <caption>Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10</caption>\n * var timer = Rx.Observable.interval(1000).take(4);\n * var sequence = Rx.Observable.range(1, 10);\n * var result = Rx.Observable.concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n *\n *\n * @example <caption>Concatenate an array of 3 Observables</caption>\n * var timer1 = Rx.Observable.interval(1000).take(10);\n * var timer2 = Rx.Observable.interval(2000).take(6);\n * var timer3 = Rx.Observable.interval(500).take(10);\n * var result = Rx.Observable.concat([timer1, timer2, timer3]); // note that array is passed\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n *\n *\n * @example <caption>Concatenate the same Observable to repeat it</caption>\n * const timer = Rx.Observable.interval(1000).take(2);\n *\n * Rx.Observable.concat(timer, timer) // concating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n *\n * @param {ObservableInput} input1 An input Observable to concatenate with others.\n * @param {ObservableInput} input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param {Scheduler} [scheduler=null] An optional IScheduler to schedule each\n * Observable subscription on.\n * @return {Observable} All values of each passed Observable merged into a\n * single Observable, in order, in serial fashion.\n * @static true\n * @name concat\n * @owner Observable\n */\nexport function concat() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    if (observables.length === 1 || (observables.length === 2 && isScheduler(observables[1]))) {\n        return from(observables[0]);\n    }\n    return concatAll()(of.apply(void 0, observables));\n}\n//# sourceMappingURL=concat.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/concat.js","/** PURE_IMPORTS_START .._observable_ArrayObservable,.._observable_ScalarObservable,.._observable_EmptyObservable,.._observable_concat,.._util_isScheduler PURE_IMPORTS_END */\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { ScalarObservable } from '../observable/ScalarObservable';\nimport { EmptyObservable } from '../observable/EmptyObservable';\nimport { concat as concatStatic } from '../observable/concat';\nimport { isScheduler } from '../util/isScheduler';\n/* tslint:enable:max-line-length */\n/**\n * Returns an Observable that emits the items you specify as arguments before it begins to emit\n * items emitted by the source Observable.\n *\n * <img src=\"./img/startWith.png\" width=\"100%\">\n *\n * @param {...T} values - Items you want the modified Observable to emit first.\n * @param {Scheduler} [scheduler] - A {@link IScheduler} to use for scheduling\n * the emissions of the `next` notifications.\n * @return {Observable} An Observable that emits the items in the specified Iterable and then emits the items\n * emitted by the source Observable.\n * @method startWith\n * @owner Observable\n */\nexport function startWith() {\n    var array = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        array[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var scheduler = array[array.length - 1];\n        if (isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len === 1) {\n            return concatStatic(new ScalarObservable(array[0], scheduler), source);\n        }\n        else if (len > 1) {\n            return concatStatic(new ArrayObservable(array, scheduler), source);\n        }\n        else {\n            return concatStatic(new EmptyObservable(scheduler), source);\n        }\n    };\n}\n//# sourceMappingURL=startWith.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/startWith.js","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link switch}.</span>\n *\n * <img src=\"./img/switchMap.png\" width=\"100%\">\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * @example <caption>Rerun an interval Observable on every click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.switchMap((ev) => Rx.Observable.interval(1000));\n * result.subscribe(x => console.log(x));\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switch}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {function(outerValue: T, innerValue: I, outerIndex: number, innerIndex: number): any} [resultSelector]\n * A function to produce the value on the output Observable based on the values\n * and the indices of the source (outer) emission and the inner Observable\n * emission. The arguments passed to this function are:\n * - `outerValue`: the value that came from the source\n * - `innerValue`: the value that came from the projected Observable\n * - `outerIndex`: the \"index\" of the value that came from the source\n * - `innerIndex`: the \"index\" of the value from the projected Observable\n * @return {Observable} An Observable that emits the result of applying the\n * projection function (and the optional `resultSelector`) to each item emitted\n * by the source Observable and taking only the values from the most recently\n * projected inner Observable.\n * @method switchMap\n * @owner Observable\n */\nexport function switchMap(project, resultSelector) {\n    return function switchMapOperatorFunction(source) {\n        return source.lift(new SwitchMapOperator(project, resultSelector));\n    };\n}\nvar SwitchMapOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SwitchMapOperator(project, resultSelector) {\n        this.project = project;\n        this.resultSelector = resultSelector;\n    }\n    SwitchMapOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SwitchMapSubscriber(subscriber, this.project, this.resultSelector));\n    };\n    return SwitchMapOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SwitchMapSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SwitchMapSubscriber, _super);\n    function SwitchMapSubscriber(destination, project, resultSelector) {\n        _super.call(this, destination);\n        this.project = project;\n        this.resultSelector = resultSelector;\n        this.index = 0;\n    }\n    SwitchMapSubscriber.prototype._next = function (value) {\n        var result;\n        var index = this.index++;\n        try {\n            result = this.project(value, index);\n        }\n        catch (error) {\n            this.destination.error(error);\n            return;\n        }\n        this._innerSub(result, value, index);\n    };\n    SwitchMapSubscriber.prototype._innerSub = function (result, value, index) {\n        var innerSubscription = this.innerSubscription;\n        if (innerSubscription) {\n            innerSubscription.unsubscribe();\n        }\n        this.add(this.innerSubscription = subscribeToResult(this, result, value, index));\n    };\n    SwitchMapSubscriber.prototype._complete = function () {\n        var innerSubscription = this.innerSubscription;\n        if (!innerSubscription || innerSubscription.closed) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    /** @deprecated internal use only */ SwitchMapSubscriber.prototype._unsubscribe = function () {\n        this.innerSubscription = null;\n    };\n    SwitchMapSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.remove(innerSub);\n        this.innerSubscription = null;\n        if (this.isStopped) {\n            _super.prototype._complete.call(this);\n        }\n    };\n    SwitchMapSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (this.resultSelector) {\n            this._tryNotifyNext(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        else {\n            this.destination.next(innerValue);\n        }\n    };\n    SwitchMapSubscriber.prototype._tryNotifyNext = function (outerValue, innerValue, outerIndex, innerIndex) {\n        var result;\n        try {\n            result = this.resultSelector(outerValue, innerValue, outerIndex, innerIndex);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return SwitchMapSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=switchMap.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/switchMap.js","/** PURE_IMPORTS_START .._Subscriber,.._util_ArgumentOutOfRangeError,.._observable_EmptyObservable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { EmptyObservable } from '../observable/EmptyObservable';\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * <img src=\"./img/take.png\" width=\"100%\">\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * @example <caption>Take the first 5 seconds of an infinite 1-second interval Observable</caption>\n * var interval = Rx.Observable.interval(1000);\n * var five = interval.take(5);\n * five.subscribe(x => console.log(x));\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `take(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of `next` values to emit.\n * @return {Observable<T>} An Observable that emits only the first `count`\n * values emitted by the source Observable, or all of the values from the source\n * if the source emits fewer than `count` values.\n * @method take\n * @owner Observable\n */\nexport function take(count) {\n    return function (source) {\n        if (count === 0) {\n            return new EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nvar TakeOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function TakeOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    TakeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    };\n    return TakeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(TakeSubscriber, _super);\n    function TakeSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.count = 0;\n    }\n    TakeSubscriber.prototype._next = function (value) {\n        var total = this.total;\n        var count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    };\n    return TakeSubscriber;\n}(Subscriber));\n//# sourceMappingURL=take.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/take.js","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits something. Then, it completes.</span>\n *\n * <img src=\"./img/takeUntil.png\" width=\"100%\">\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value or a complete notification, the output Observable stops\n * mirroring the source Observable and completes.\n *\n * @example <caption>Tick every second until the first click happens</caption>\n * var interval = Rx.Observable.interval(1000);\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = interval.takeUntil(clicks);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return {Observable<T>} An Observable that emits the values from the source\n * Observable until such time as `notifier` emits its first value.\n * @method takeUntil\n * @owner Observable\n */\nexport function takeUntil(notifier) {\n    return function (source) { return source.lift(new TakeUntilOperator(notifier)); };\n}\nvar TakeUntilOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function TakeUntilOperator(notifier) {\n        this.notifier = notifier;\n    }\n    TakeUntilOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeUntilSubscriber(subscriber, this.notifier));\n    };\n    return TakeUntilOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeUntilSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(TakeUntilSubscriber, _super);\n    function TakeUntilSubscriber(destination, notifier) {\n        _super.call(this, destination);\n        this.notifier = notifier;\n        this.add(subscribeToResult(this, notifier));\n    }\n    TakeUntilSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.complete();\n    };\n    TakeUntilSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    return TakeUntilSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=takeUntil.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/takeUntil.js","/** PURE_IMPORTS_START .._scheduler_async,._map PURE_IMPORTS_END */\nimport { async } from '../scheduler/async';\nimport { map } from './map';\n/**\n * @param scheduler\n * @return {Observable<Timestamp<any>>|WebSocketSubject<T>|Observable<T>}\n * @method timestamp\n * @owner Observable\n */\nexport function timestamp(scheduler) {\n    if (scheduler === void 0) {\n        scheduler = async;\n    }\n    return map(function (value) { return new Timestamp(value, scheduler.now()); });\n    // return (source: Observable<T>) => source.lift(new TimestampOperator(scheduler));\n}\nexport var Timestamp = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function Timestamp(value, timestamp) {\n        this.value = value;\n        this.timestamp = timestamp;\n    }\n    return Timestamp;\n}());\n;\n//# sourceMappingURL=timestamp.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/timestamp.js","/** PURE_IMPORTS_START .._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\n/* tslint:enable:max-line-length */\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * <img src=\"./img/withLatestFrom.png\" width=\"100%\">\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * @example <caption>On every click event, emit an array with the latest timer event plus the click event</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var timer = Rx.Observable.interval(1000);\n * var result = clicks.withLatestFrom(timer);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.withLatestFrom(b, c, (a1, b1, c1) => a1 + b1 + c1)`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method withLatestFrom\n * @owner Observable\n */\nexport function withLatestFrom() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n    }\n    return function (source) {\n        var project;\n        if (typeof args[args.length - 1] === 'function') {\n            project = args.pop();\n        }\n        var observables = args;\n        return source.lift(new WithLatestFromOperator(observables, project));\n    };\n}\nvar WithLatestFromOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function WithLatestFromOperator(observables, project) {\n        this.observables = observables;\n        this.project = project;\n    }\n    WithLatestFromOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WithLatestFromSubscriber(subscriber, this.observables, this.project));\n    };\n    return WithLatestFromOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WithLatestFromSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(WithLatestFromSubscriber, _super);\n    function WithLatestFromSubscriber(destination, observables, project) {\n        _super.call(this, destination);\n        this.observables = observables;\n        this.project = project;\n        this.toRespond = [];\n        var len = observables.length;\n        this.values = new Array(len);\n        for (var i = 0; i < len; i++) {\n            this.toRespond.push(i);\n        }\n        for (var i = 0; i < len; i++) {\n            var observable = observables[i];\n            this.add(subscribeToResult(this, observable, observable, i));\n        }\n    }\n    WithLatestFromSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values[outerIndex] = innerValue;\n        var toRespond = this.toRespond;\n        if (toRespond.length > 0) {\n            var found = toRespond.indexOf(outerIndex);\n            if (found !== -1) {\n                toRespond.splice(found, 1);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype.notifyComplete = function () {\n        // noop\n    };\n    WithLatestFromSubscriber.prototype._next = function (value) {\n        if (this.toRespond.length === 0) {\n            var args = [value].concat(this.values);\n            if (this.project) {\n                this._tryProject(args);\n            }\n            else {\n                this.destination.next(args);\n            }\n        }\n    };\n    WithLatestFromSubscriber.prototype._tryProject = function (args) {\n        var result;\n        try {\n            result = this.project.apply(this, args);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return WithLatestFromSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=withLatestFrom.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/withLatestFrom.js","import { Observable } from 'rxjs/_esm5/Observable'; // eslint-disable-line\n\n/**\n * Creates an observable that emits samples from an easing function on every animation frame\n * for a duration `d` ms.\n *\n * The first value will be emitted on the next animation frame,\n * and is the value of the easing function at `t = 0`.\n * The final value is guaranteed to be the easing function at `t = d`.\n * The observable completes one frame after the final value was emitted.\n *\n * @param {function(t: number, b: number, c: number, d: number, [s]: number): number} easingFunction\n * - the easing fuction to sample from; can use any of Robert Penner's easing functions\n     (without the `x` paramter)\n * @param {number} b - beginning value and 2nd parameter of the easing function\n * @param {number} c - change in value (or end value) and 3rd parameter of the easing function\n * @param {number} d - total duration of the tween in ms and 4th parameter of the easing function\n * @param {number} [s] - 5th parameter of the easing function (optional)\n * @return {Observable<number>} - an observable emitting samples of the easing function on\n *   animation frames for `d` ms.\n */\nexport function createTween(easingFunction, b, c, d, s) {\n  return Observable.create((observer) => {\n    let startTime;\n    let id = requestAnimationFrame(function sample(time) {\n      startTime = startTime || time;\n      const t = time - startTime;\n      if (t < d) {\n        observer.next(easingFunction(t, b, c, d, s));\n        id = requestAnimationFrame(sample);\n      } else {\n        observer.next(easingFunction(d, b, c, d, s));\n        id = requestAnimationFrame(() => observer.complete());\n      }\n    });\n    return () => { if (id) { cancelAnimationFrame(id); } };\n  });\n}\n\nexport default createTween;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs-create-tween/esm/index.js","// # src / common.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nexport function easeOutSine(t, b, c, d) {\n  return c * Math.sin(t / d * (Math.PI / 2)) + b; // eslint-disable-line\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/common.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * <img src=\"./img/mapTo.png\" width=\"100%\">\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * @example <caption>Map every click to the string 'Hi'</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var greetings = clicks.mapTo('Hi');\n * greetings.subscribe(x => console.log(x));\n *\n * @see {@link map}\n *\n * @param {any} value The value to map each source value to.\n * @return {Observable} An Observable that emits the given `value` every time\n * the source Observable emits something.\n * @method mapTo\n * @owner Observable\n */\nexport function mapTo(value) {\n    return function (source) { return source.lift(new MapToOperator(value)); };\n}\nvar MapToOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function MapToOperator(value) {\n        this.value = value;\n    }\n    MapToOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new MapToSubscriber(subscriber, this.value));\n    };\n    return MapToOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar MapToSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(MapToSubscriber, _super);\n    function MapToSubscriber(destination, value) {\n        _super.call(this, destination);\n        this.value = value;\n    }\n    MapToSubscriber.prototype._next = function (x) {\n        this.destination.next(this.value);\n    };\n    return MapToSubscriber;\n}(Subscriber));\n//# sourceMappingURL=mapTo.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/mapTo.js","/** PURE_IMPORTS_START .._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * <img src=\"./img/skipWhile.png\" width=\"100%\">\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return {Observable<T>} An Observable that begins emitting items emitted by the source Observable when the\n * specified predicate becomes false.\n * @method skipWhile\n * @owner Observable\n */\nexport function skipWhile(predicate) {\n    return function (source) { return source.lift(new SkipWhileOperator(predicate)); };\n}\nvar SkipWhileOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function SkipWhileOperator(predicate) {\n        this.predicate = predicate;\n    }\n    SkipWhileOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SkipWhileSubscriber(subscriber, this.predicate));\n    };\n    return SkipWhileOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SkipWhileSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SkipWhileSubscriber, _super);\n    function SkipWhileSubscriber(destination, predicate) {\n        _super.call(this, destination);\n        this.predicate = predicate;\n        this.skipping = true;\n        this.index = 0;\n    }\n    SkipWhileSubscriber.prototype._next = function (value) {\n        var destination = this.destination;\n        if (this.skipping) {\n            this.tryCallPredicate(value);\n        }\n        if (!this.skipping) {\n            destination.next(value);\n        }\n    };\n    SkipWhileSubscriber.prototype.tryCallPredicate = function (value) {\n        try {\n            var result = this.predicate(value, this.index++);\n            this.skipping = Boolean(result);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    return SkipWhileSubscriber;\n}(Subscriber));\n//# sourceMappingURL=skipWhile.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/skipWhile.js","var _Set = typeof Set !== 'undefined' && new Set([1]).size === 1 ? Set : function () {\n  var a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  a = a.filter(function (x, i) {\n    return i === a.indexOf(x);\n  });\n  a.size = a.length;\n  a.has = function (x) {\n    return a.indexOf(x) > -1;\n  };\n  a.add = function (x) {\n    if (!a.has(x)) {\n      a.size++;a.push(x);\n    }return a;\n  };\n  a.delete = function (x) {\n    var t = void 0;if (t = a.has(x)) {\n      a.size--;a.splice(a.indexOf(x), 1);\n    }return t;\n  };\n  a.clear = function () {\n    while (a.pop()) {}a.size = 0;\n  };\n  return a;\n};\n\nexport { _Set as Set };\n\n\n// WEBPACK FOOTER //\n// ./node_modules/qd-set/esm/index.js","// # src / component.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\n// import 'core-js/fn/array/for-each';\n// import 'core-js/fn/object/assign';\n// import 'core-js/fn/object/define-property';\n// import 'core-js/fn/object/keys';\n\nimport { Set } from \"qd-set\";\n\nexport { Set };\n\nexport const COMPONENT_FEATURE_TESTS = new Set([\"customevent\"]);\n\nconst aSymbol = Symbol || (x => `_${x}`);\nconst sRoot = aSymbol(\"sroot\");\nconst sState = aSymbol(\"state\");\n\nwindow.process = window.process || {};\nwindow.process.env = window.process.env || {};\n\nwindow.requestIdleCallback = window.requestIdleCallback || (f => window.setTimeout(f, 0));\nwindow.cancelIdleCallback = window.cancelIdleCallback || window.clearTimeout;\n\nclass Component {}\n\nexport const componentMixin = (C = Component) =>\n  class extends C {\n    get sroot() {\n      return this.getRoot();\n    }\n\n    get el() {\n      return this.getEl();\n    }\n\n    setupComponent(el, state) {\n      const { defaults } = this.constructor;\n\n      if (process.env.DEBUG) {\n        const { componentName, sideEffects } = this.constructor;\n        if (!componentName) {\n          console.warn(\n            \"Component needs to have a name, e.g. `my-tag`. To set a name, provide a static getter called `componentName`.\"\n          );\n        }\n        if (!defaults) {\n          console.warn(\n            \"No default properties provided. Implement a static getter called `defaults`.\"\n          );\n        }\n        if (!sideEffects) {\n          console.warn(\"No side effects provided. Implement a static getter called `sideEffects`.\");\n        }\n      }\n\n      this[sState] = Object.assign({}, defaults, state);\n      this.setupProperties(this);\n      this[sRoot] = this.setupShadowDOM(el);\n    }\n\n    setupShadowDOM(el) {\n      return el;\n    }\n\n    connectComponent() {}\n\n    disconnectComponent() {}\n\n    adoptComponent() {}\n\n    getRoot() {\n      return this[sRoot];\n    }\n\n    getEl() {\n      return this[sRoot];\n    }\n\n    fireEvent(eventName, data) {\n      const { componentName } = this.constructor;\n      const event = new CustomEvent(`${componentName}-${eventName}`, data);\n      this.el.dispatchEvent(event);\n    }\n\n    setInternalState(key, value) {\n      this[sState][key] = value;\n    }\n\n    setupProperties() {\n      const { sideEffects } = this.constructor;\n\n      Object.keys(this[sState]).forEach(key => {\n        const sideEffect = sideEffects[key];\n        this.setupProperty(key, sideEffect);\n      });\n    }\n\n    setupProperty(key, sideEffect) {\n      Object.defineProperty(this, key, {\n        get: () => this[sState][key],\n        set: value => {\n          const oldValue = this[sState][key];\n          this.setInternalState(key, value);\n          if (sideEffect) sideEffect.call(this, value, oldValue);\n        },\n        enumerable: true,\n        configurable: true,\n      });\n    }\n  };\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/hy-component/src/component.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArray = Array.isArray || (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArray.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/isArray.js","// typeof any so that it we don't have to cast when comparing a result to the error object\n/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var errorObject = { e: {} };\n//# sourceMappingURL=errorObject.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/errorObject.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport var UnsubscriptionError = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(UnsubscriptionError, _super);\n    function UnsubscriptionError(errors) {\n        _super.call(this);\n        this.errors = errors;\n        var err = Error.call(this, errors ?\n            errors.length + \" errors occurred during unsubscription:\\n  \" + errors.map(function (err, i) { return ((i + 1) + \") \" + err.toString()); }).join('\\n  ') : '');\n        this.name = err.name = 'UnsubscriptionError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return UnsubscriptionError;\n}(Error));\n//# sourceMappingURL=UnsubscriptionError.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/UnsubscriptionError.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var empty = {\n    closed: true,\n    next: function (value) { },\n    error: function (err) { throw err; },\n    complete: function () { }\n};\n//# sourceMappingURL=Observer.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Observer.js","/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\nimport { root } from '../util/root';\nvar Symbol = root.Symbol;\nexport var rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n    /*@__PURE__*/ Symbol.for('rxSubscriber') : '@@rxSubscriber';\n/**\n * @deprecated use rxSubscriber instead\n */\nexport var $$rxSubscriber = rxSubscriber;\n//# sourceMappingURL=rxSubscriber.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/symbol/rxSubscriber.js","/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\nimport { root } from '../util/root';\nexport function getSymbolObservable(context) {\n    var $$observable;\n    var Symbol = context.Symbol;\n    if (typeof Symbol === 'function') {\n        if (Symbol.observable) {\n            $$observable = Symbol.observable;\n        }\n        else {\n            $$observable = Symbol('observable');\n            Symbol.observable = $$observable;\n        }\n    }\n    else {\n        $$observable = '@@observable';\n    }\n    return $$observable;\n}\nexport var observable = /*@__PURE__*/ getSymbolObservable(root);\n/**\n * @deprecated use observable instead\n */\nexport var $$observable = observable;\n//# sourceMappingURL=observable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/symbol/observable.js","/** PURE_IMPORTS_START ._util_root,._util_toSubscriber,._symbol_observable,._util_pipe PURE_IMPORTS_END */\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport var Observable = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    /**\n     * @constructor\n     * @param {Function} subscribe the function that is called when the Observable is\n     * initially subscribed to. This function is given a Subscriber, to which new values\n     * can be `next`ed, or an `error` method can be called to raise an error, or\n     * `complete` can be called to notify of a successful completion.\n     */\n    function Observable(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    /**\n     * Creates a new Observable, with this Observable as the source, and the passed\n     * operator defined as the new observable's operator.\n     * @method lift\n     * @param {Operator} operator the operator defining the operation to take on the observable\n     * @return {Observable} a new observable with the Operator applied\n     */\n    Observable.prototype.lift = function (operator) {\n        var observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    };\n    /**\n     * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n     *\n     * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n     *\n     * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n     * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n     * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n     * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n     * thought.\n     *\n     * Apart from starting the execution of an Observable, this method allows you to listen for values\n     * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n     * following ways.\n     *\n     * The first way is creating an object that implements {@link Observer} interface. It should have methods\n     * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n     * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n     * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n     * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n     * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n     * be left uncaught.\n     *\n     * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n     * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n     * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n     * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n     * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n     * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n     *\n     * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n     * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n     * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n     * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n     *\n     * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n     * It is an Observable itself that decides when these functions will be called. For example {@link of}\n     * by default emits all its values synchronously. Always check documentation for how given Observable\n     * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n     *\n     * @example <caption>Subscribe with an Observer</caption>\n     * const sumObserver = {\n     *   sum: 0,\n     *   next(value) {\n     *     console.log('Adding: ' + value);\n     *     this.sum = this.sum + value;\n     *   },\n     *   error() { // We actually could just remove this method,\n     *   },        // since we do not really care about errors right now.\n     *   complete() {\n     *     console.log('Sum equals: ' + this.sum);\n     *   }\n     * };\n     *\n     * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n     * .subscribe(sumObserver);\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Subscribe with functions</caption>\n     * let sum = 0;\n     *\n     * Rx.Observable.of(1, 2, 3)\n     * .subscribe(\n     *   function(value) {\n     *     console.log('Adding: ' + value);\n     *     sum = sum + value;\n     *   },\n     *   undefined,\n     *   function() {\n     *     console.log('Sum equals: ' + sum);\n     *   }\n     * );\n     *\n     * // Logs:\n     * // \"Adding: 1\"\n     * // \"Adding: 2\"\n     * // \"Adding: 3\"\n     * // \"Sum equals: 6\"\n     *\n     *\n     * @example <caption>Cancel a subscription</caption>\n     * const subscription = Rx.Observable.interval(1000).subscribe(\n     *   num => console.log(num),\n     *   undefined,\n     *   () => console.log('completed!') // Will not be called, even\n     * );                                // when cancelling subscription\n     *\n     *\n     * setTimeout(() => {\n     *   subscription.unsubscribe();\n     *   console.log('unsubscribed!');\n     * }, 2500);\n     *\n     * // Logs:\n     * // 0 after 1s\n     * // 1 after 2s\n     * // \"unsubscribed!\" after 2.5s\n     *\n     *\n     * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n     *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n     *  Observable.\n     * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n     *  the error will be thrown as unhandled.\n     * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n     * @return {ISubscription} a subscription reference to the registered handlers\n     * @method subscribe\n     */\n    Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n        var operator = this.operator;\n        var sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            operator.call(sink, this.source);\n        }\n        else {\n            sink.add(this.source || !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n        }\n        if (sink.syncErrorThrowable) {\n            sink.syncErrorThrowable = false;\n            if (sink.syncErrorThrown) {\n                throw sink.syncErrorValue;\n            }\n        }\n        return sink;\n    };\n    Observable.prototype._trySubscribe = function (sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            sink.syncErrorThrown = true;\n            sink.syncErrorValue = err;\n            sink.error(err);\n        }\n    };\n    /**\n     * @method forEach\n     * @param {Function} next a handler for each value emitted by the observable\n     * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n     * @return {Promise} a promise that either resolves on observable completion or\n     *  rejects with the handled error\n     */\n    Observable.prototype.forEach = function (next, PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n                PromiseCtor = root.Rx.config.Promise;\n            }\n            else if (root.Promise) {\n                PromiseCtor = root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            // Must be declared in a separate statement to avoid a RefernceError when\n            // accessing subscription below in the closure due to Temporal Dead Zone.\n            var subscription;\n            subscription = _this.subscribe(function (value) {\n                if (subscription) {\n                    // if there is a subscription, then we can surmise\n                    // the next handling is asynchronous. Any errors thrown\n                    // need to be rejected explicitly and unsubscribe must be\n                    // called manually\n                    try {\n                        next(value);\n                    }\n                    catch (err) {\n                        reject(err);\n                        subscription.unsubscribe();\n                    }\n                }\n                else {\n                    // if there is NO subscription, then we're getting a nexted\n                    // value synchronously during subscription. We can just call it.\n                    // If it errors, Observable's `subscribe` will ensure the\n                    // unsubscription logic is called, then synchronously rethrow the error.\n                    // After that, Promise will trap the error and send it\n                    // down the rejection path.\n                    next(value);\n                }\n            }, reject, resolve);\n        });\n    };\n    /** @deprecated internal use only */ Observable.prototype._subscribe = function (subscriber) {\n        return this.source.subscribe(subscriber);\n    };\n    /**\n     * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n     * @method Symbol.observable\n     * @return {Observable} this instance of the observable\n     */\n    Observable.prototype[Symbol_observable] = function () {\n        return this;\n    };\n    /* tslint:enable:max-line-length */\n    /**\n     * Used to stitch together functional operators into a chain.\n     * @method pipe\n     * @return {Observable} the Observable result of all of the operators having\n     * been called in the order they were passed in.\n     *\n     * @example\n     *\n     * import { map, filter, scan } from 'rxjs/operators';\n     *\n     * Rx.Observable.interval(1000)\n     *   .pipe(\n     *     filter(x => x % 2 === 0),\n     *     map(x => x + x),\n     *     scan((acc, x) => acc + x)\n     *   )\n     *   .subscribe(x => console.log(x))\n     */\n    Observable.prototype.pipe = function () {\n        var operations = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            operations[_i - 0] = arguments[_i];\n        }\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    };\n    /* tslint:enable:max-line-length */\n    Observable.prototype.toPromise = function (PromiseCtor) {\n        var _this = this;\n        if (!PromiseCtor) {\n            if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n                PromiseCtor = root.Rx.config.Promise;\n            }\n            else if (root.Promise) {\n                PromiseCtor = root.Promise;\n            }\n        }\n        if (!PromiseCtor) {\n            throw new Error('no Promise impl found');\n        }\n        return new PromiseCtor(function (resolve, reject) {\n            var value;\n            _this.subscribe(function (x) { return value = x; }, function (err) { return reject(err); }, function () { return resolve(value); });\n        });\n    };\n    // HACK: Since TypeScript inherits static properties too, we have to\n    // fight against TypeScript here so Subject can have a different static create signature\n    /**\n     * Creates a new cold Observable by calling the Observable constructor\n     * @static true\n     * @owner Observable\n     * @method create\n     * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n     * @return {Observable} a new cold observable\n     */\n    Observable.create = function (subscribe) {\n        return new Observable(subscribe);\n    };\n    return Observable;\n}());\n//# sourceMappingURL=Observable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Observable.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport var ObjectUnsubscribedError = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ObjectUnsubscribedError, _super);\n    function ObjectUnsubscribedError() {\n        var err = _super.call(this, 'object unsubscribed');\n        this.name = err.name = 'ObjectUnsubscribedError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ObjectUnsubscribedError;\n}(Error));\n//# sourceMappingURL=ObjectUnsubscribedError.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/ObjectUnsubscribedError.js","/** PURE_IMPORTS_START ._Subscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscription } from './Subscription';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var SubjectSubscription = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SubjectSubscription, _super);\n    function SubjectSubscription(subject, subscriber) {\n        _super.call(this);\n        this.subject = subject;\n        this.subscriber = subscriber;\n        this.closed = false;\n    }\n    SubjectSubscription.prototype.unsubscribe = function () {\n        if (this.closed) {\n            return;\n        }\n        this.closed = true;\n        var subject = this.subject;\n        var observers = subject.observers;\n        this.subject = null;\n        if (!observers || observers.length === 0 || subject.isStopped || subject.closed) {\n            return;\n        }\n        var subscriberIndex = observers.indexOf(this.subscriber);\n        if (subscriberIndex !== -1) {\n            observers.splice(subscriberIndex, 1);\n        }\n    };\n    return SubjectSubscription;\n}(Subscription));\n//# sourceMappingURL=SubjectSubscription.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/SubjectSubscription.js","/** PURE_IMPORTS_START ._Observable,._Subscriber,._Subscription,._util_ObjectUnsubscribedError,._SubjectSubscription,._symbol_rxSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n/**\n * @class SubjectSubscriber<T>\n */\nexport var SubjectSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(SubjectSubscriber, _super);\n    function SubjectSubscriber(destination) {\n        _super.call(this, destination);\n        this.destination = destination;\n    }\n    return SubjectSubscriber;\n}(Subscriber));\n/**\n * @class Subject<T>\n */\nexport var Subject = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(Subject, _super);\n    function Subject() {\n        _super.call(this);\n        this.observers = [];\n        this.closed = false;\n        this.isStopped = false;\n        this.hasError = false;\n        this.thrownError = null;\n    }\n    Subject.prototype[rxSubscriberSymbol] = function () {\n        return new SubjectSubscriber(this);\n    };\n    Subject.prototype.lift = function (operator) {\n        var subject = new AnonymousSubject(this, this);\n        subject.operator = operator;\n        return subject;\n    };\n    Subject.prototype.next = function (value) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        if (!this.isStopped) {\n            var observers = this.observers;\n            var len = observers.length;\n            var copy = observers.slice();\n            for (var i = 0; i < len; i++) {\n                copy[i].next(value);\n            }\n        }\n    };\n    Subject.prototype.error = function (err) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.hasError = true;\n        this.thrownError = err;\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].error(err);\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.complete = function () {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        this.isStopped = true;\n        var observers = this.observers;\n        var len = observers.length;\n        var copy = observers.slice();\n        for (var i = 0; i < len; i++) {\n            copy[i].complete();\n        }\n        this.observers.length = 0;\n    };\n    Subject.prototype.unsubscribe = function () {\n        this.isStopped = true;\n        this.closed = true;\n        this.observers = null;\n    };\n    Subject.prototype._trySubscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else {\n            return _super.prototype._trySubscribe.call(this, subscriber);\n        }\n    };\n    /** @deprecated internal use only */ Subject.prototype._subscribe = function (subscriber) {\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscriber.error(this.thrownError);\n            return Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n            return Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            return new SubjectSubscription(this, subscriber);\n        }\n    };\n    Subject.prototype.asObservable = function () {\n        var observable = new Observable();\n        observable.source = this;\n        return observable;\n    };\n    Subject.create = function (destination, source) {\n        return new AnonymousSubject(destination, source);\n    };\n    return Subject;\n}(Observable));\n/**\n * @class AnonymousSubject<T>\n */\nexport var AnonymousSubject = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AnonymousSubject, _super);\n    function AnonymousSubject(destination, source) {\n        _super.call(this);\n        this.destination = destination;\n        this.source = source;\n    }\n    AnonymousSubject.prototype.next = function (value) {\n        var destination = this.destination;\n        if (destination && destination.next) {\n            destination.next(value);\n        }\n    };\n    AnonymousSubject.prototype.error = function (err) {\n        var destination = this.destination;\n        if (destination && destination.error) {\n            this.destination.error(err);\n        }\n    };\n    AnonymousSubject.prototype.complete = function () {\n        var destination = this.destination;\n        if (destination && destination.complete) {\n            this.destination.complete();\n        }\n    };\n    /** @deprecated internal use only */ AnonymousSubject.prototype._subscribe = function (subscriber) {\n        var source = this.source;\n        if (source) {\n            return this.source.subscribe(subscriber);\n        }\n        else {\n            return Subscription.EMPTY;\n        }\n    };\n    return AnonymousSubject;\n}(Subject));\n//# sourceMappingURL=Subject.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Subject.js","/** PURE_IMPORTS_START .._Subscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscription } from '../Subscription';\n/**\n * A unit of work to be executed in a {@link Scheduler}. An action is typically\n * created from within a Scheduler and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport var Action = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(Action, _super);\n    function Action(scheduler, work) {\n        _super.call(this);\n    }\n    /**\n     * Schedules this action on its parent Scheduler for execution. May be passed\n     * some context object, `state`. May happen at some point in the future,\n     * according to the `delay` parameter, if specified.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler.\n     * @return {void}\n     */\n    Action.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return this;\n    };\n    return Action;\n}(Subscription));\n//# sourceMappingURL=Action.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/scheduler/Action.js","/** PURE_IMPORTS_START .._util_root,._Action PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { root } from '../util/root';\nimport { Action } from './Action';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var AsyncAction = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AsyncAction, _super);\n    function AsyncAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n        this.pending = false;\n    }\n    AsyncAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (this.closed) {\n            return this;\n        }\n        // Always replace the current state with the new state.\n        this.state = state;\n        // Set the pending flag indicating that this action has been scheduled, or\n        // has recursively rescheduled itself.\n        this.pending = true;\n        var id = this.id;\n        var scheduler = this.scheduler;\n        //\n        // Important implementation note:\n        //\n        // Actions only execute once by default, unless rescheduled from within the\n        // scheduled callback. This allows us to implement single and repeat\n        // actions via the same code path, without adding API surface area, as well\n        // as mimic traditional recursion but across asynchronous boundaries.\n        //\n        // However, JS runtimes and timers distinguish between intervals achieved by\n        // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n        // serial `setTimeout` calls can be individually delayed, which delays\n        // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n        // guarantee the interval callback will be invoked more precisely to the\n        // interval period, regardless of load.\n        //\n        // Therefore, we use `setInterval` to schedule single and repeat actions.\n        // If the action reschedules itself with the same delay, the interval is not\n        // canceled. If the action doesn't reschedule, or reschedules with a\n        // different delay, the interval will be canceled after scheduled callback\n        // execution.\n        //\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, delay);\n        }\n        this.delay = delay;\n        // If this action has already an async Id, don't request a new one.\n        this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n        return this;\n    };\n    AsyncAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return root.setInterval(scheduler.flush.bind(scheduler, this), delay);\n    };\n    AsyncAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If this action is rescheduled with the same delay time, don't clear the interval id.\n        if (delay !== null && this.delay === delay && this.pending === false) {\n            return id;\n        }\n        // Otherwise, if the action's delay time is different from the current delay,\n        // or the action has been rescheduled before it's executed, clear the interval id\n        return root.clearInterval(id) && undefined || undefined;\n    };\n    /**\n     * Immediately executes this action and the `work` it contains.\n     * @return {any}\n     */\n    AsyncAction.prototype.execute = function (state, delay) {\n        if (this.closed) {\n            return new Error('executing a cancelled action');\n        }\n        this.pending = false;\n        var error = this._execute(state, delay);\n        if (error) {\n            return error;\n        }\n        else if (this.pending === false && this.id != null) {\n            // Dequeue if the action didn't reschedule itself. Don't call\n            // unsubscribe(), because the action could reschedule later.\n            // For example:\n            // ```\n            // scheduler.schedule(function doWork(counter) {\n            //   /* ... I'm a busy worker bee ... */\n            //   var originalAction = this;\n            //   /* wait 100ms before rescheduling the action */\n            //   setTimeout(function () {\n            //     originalAction.schedule(counter + 1);\n            //   }, 100);\n            // }, 1000);\n            // ```\n            this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n        }\n    };\n    AsyncAction.prototype._execute = function (state, delay) {\n        var errored = false;\n        var errorValue = undefined;\n        try {\n            this.work(state);\n        }\n        catch (e) {\n            errored = true;\n            errorValue = !!e && e || new Error(e);\n        }\n        if (errored) {\n            this.unsubscribe();\n            return errorValue;\n        }\n    };\n    /** @deprecated internal use only */ AsyncAction.prototype._unsubscribe = function () {\n        var id = this.id;\n        var scheduler = this.scheduler;\n        var actions = scheduler.actions;\n        var index = actions.indexOf(this);\n        this.work = null;\n        this.state = null;\n        this.pending = false;\n        this.scheduler = null;\n        if (index !== -1) {\n            actions.splice(index, 1);\n        }\n        if (id != null) {\n            this.id = this.recycleAsyncId(scheduler, id, null);\n        }\n        this.delay = null;\n    };\n    return AsyncAction;\n}(Action));\n//# sourceMappingURL=AsyncAction.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/scheduler/AsyncAction.js","/** PURE_IMPORTS_START ._AsyncAction PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { AsyncAction } from './AsyncAction';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var QueueAction = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(QueueAction, _super);\n    function QueueAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    QueueAction.prototype.schedule = function (state, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        if (delay > 0) {\n            return _super.prototype.schedule.call(this, state, delay);\n        }\n        this.delay = delay;\n        this.state = state;\n        this.scheduler.flush(this);\n        return this;\n    };\n    QueueAction.prototype.execute = function (state, delay) {\n        return (delay > 0 || this.closed) ?\n            _super.prototype.execute.call(this, state, delay) :\n            this._execute(state, delay);\n    };\n    QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Otherwise flush the scheduler starting with this action.\n        return scheduler.flush(this);\n    };\n    return QueueAction;\n}(AsyncAction));\n//# sourceMappingURL=QueueAction.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/scheduler/QueueAction.js","/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nexport var Scheduler = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) {\n            now = Scheduler.now;\n        }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\n//# sourceMappingURL=Scheduler.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Scheduler.js","/** PURE_IMPORTS_START .._Scheduler PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Scheduler } from '../Scheduler';\nexport var AsyncScheduler = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(AsyncScheduler, _super);\n    function AsyncScheduler() {\n        _super.apply(this, arguments);\n        this.actions = [];\n        /**\n         * A flag to indicate whether the Scheduler is currently executing a batch of\n         * queued actions.\n         * @type {boolean}\n         */\n        this.active = false;\n        /**\n         * An internal ID used to track the latest asynchronous task such as those\n         * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n         * others.\n         * @type {any}\n         */\n        this.scheduled = undefined;\n    }\n    AsyncScheduler.prototype.flush = function (action) {\n        var actions = this.actions;\n        if (this.active) {\n            actions.push(action);\n            return;\n        }\n        var error;\n        this.active = true;\n        do {\n            if (error = action.execute(action.state, action.delay)) {\n                break;\n            }\n        } while (action = actions.shift()); // exhaust the scheduler queue\n        this.active = false;\n        if (error) {\n            while (action = actions.shift()) {\n                action.unsubscribe();\n            }\n            throw error;\n        }\n    };\n    return AsyncScheduler;\n}(Scheduler));\n//# sourceMappingURL=AsyncScheduler.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/scheduler/AsyncScheduler.js","/** PURE_IMPORTS_START ._AsyncScheduler PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { AsyncScheduler } from './AsyncScheduler';\nexport var QueueScheduler = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(QueueScheduler, _super);\n    function QueueScheduler() {\n        _super.apply(this, arguments);\n    }\n    return QueueScheduler;\n}(AsyncScheduler));\n//# sourceMappingURL=QueueScheduler.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/scheduler/QueueScheduler.js","/** PURE_IMPORTS_START ._QueueAction,._QueueScheduler PURE_IMPORTS_END */\nimport { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link async} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * @examples <caption>Schedule recursively first, then do something</caption>\n *\n * Rx.Scheduler.queue.schedule(() => {\n *   Rx.Scheduler.queue.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n *\n *\n * @example <caption>Reschedule itself recursively</caption>\n *\n * Rx.Scheduler.queue.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n *\n *\n * @static true\n * @name queue\n * @owner Scheduler\n */\nexport var queue = /*@__PURE__*/ new QueueScheduler(QueueAction);\n//# sourceMappingURL=queue.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/scheduler/queue.js","/** PURE_IMPORTS_START ._Observable PURE_IMPORTS_END */\nimport { Observable } from './Observable';\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n *\n * @class Notification<T>\n */\nexport var Notification = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function Notification(kind, value, error) {\n        this.kind = kind;\n        this.value = value;\n        this.error = error;\n        this.hasValue = kind === 'N';\n    }\n    /**\n     * Delivers to the given `observer` the value wrapped by this Notification.\n     * @param {Observer} observer\n     * @return\n     */\n    Notification.prototype.observe = function (observer) {\n        switch (this.kind) {\n            case 'N':\n                return observer.next && observer.next(this.value);\n            case 'E':\n                return observer.error && observer.error(this.error);\n            case 'C':\n                return observer.complete && observer.complete();\n        }\n    };\n    /**\n     * Given some {@link Observer} callbacks, deliver the value represented by the\n     * current Notification to the correctly corresponding callback.\n     * @param {function(value: T): void} next An Observer `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.do = function (next, error, complete) {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return next && next(this.value);\n            case 'E':\n                return error && error(this.error);\n            case 'C':\n                return complete && complete();\n        }\n    };\n    /**\n     * Takes an Observer or its individual callback functions, and calls `observe`\n     * or `do` methods accordingly.\n     * @param {Observer|function(value: T): void} nextOrObserver An Observer or\n     * the `next` callback.\n     * @param {function(err: any): void} [error] An Observer `error` callback.\n     * @param {function(): void} [complete] An Observer `complete` callback.\n     * @return {any}\n     */\n    Notification.prototype.accept = function (nextOrObserver, error, complete) {\n        if (nextOrObserver && typeof nextOrObserver.next === 'function') {\n            return this.observe(nextOrObserver);\n        }\n        else {\n            return this.do(nextOrObserver, error, complete);\n        }\n    };\n    /**\n     * Returns a simple Observable that just delivers the notification represented\n     * by this Notification instance.\n     * @return {any}\n     */\n    Notification.prototype.toObservable = function () {\n        var kind = this.kind;\n        switch (kind) {\n            case 'N':\n                return Observable.of(this.value);\n            case 'E':\n                return Observable.throw(this.error);\n            case 'C':\n                return Observable.empty();\n        }\n        throw new Error('unexpected notification kind value');\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `next` from a\n     * given value.\n     * @param {T} value The `next` value.\n     * @return {Notification<T>} The \"next\" Notification representing the\n     * argument.\n     */\n    Notification.createNext = function (value) {\n        if (typeof value !== 'undefined') {\n            return new Notification('N', value);\n        }\n        return Notification.undefinedValueNotification;\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `error` from a\n     * given error.\n     * @param {any} [err] The `error` error.\n     * @return {Notification<T>} The \"error\" Notification representing the\n     * argument.\n     */\n    Notification.createError = function (err) {\n        return new Notification('E', undefined, err);\n    };\n    /**\n     * A shortcut to create a Notification instance of the type `complete`.\n     * @return {Notification<any>} The valueless \"complete\" Notification.\n     */\n    Notification.createComplete = function () {\n        return Notification.completeNotification;\n    };\n    Notification.completeNotification = new Notification('C');\n    Notification.undefinedValueNotification = new Notification('N', undefined);\n    return Notification;\n}());\n//# sourceMappingURL=Notification.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/Notification.js","/** PURE_IMPORTS_START .._Subscriber,.._Notification PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * @example <caption>Ensure values in subscribe are called just before browser repaint.</caption>\n * const intervals = Rx.Observable.interval(10); // Intervals are scheduled\n *                                               // with async scheduler by default...\n *\n * intervals\n * .observeOn(Rx.Scheduler.animationFrame)       // ...but we will observe on animationFrame\n * .subscribe(val => {                           // scheduler to ensure smooth animation.\n *   someDiv.style.height = val + 'px';\n * });\n *\n * @see {@link delay}\n *\n * @param {IScheduler} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return {Observable<T>} Observable that emits the same notifications as the source Observable,\n * but with provided scheduler.\n *\n * @method observeOn\n * @owner Observable\n */\nexport function observeOn(scheduler, delay) {\n    if (delay === void 0) {\n        delay = 0;\n    }\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nexport var ObserveOnOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ObserveOnOperator(scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    };\n    return ObserveOnOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var ObserveOnSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ObserveOnSubscriber, _super);\n    function ObserveOnSubscriber(destination, scheduler, delay) {\n        if (delay === void 0) {\n            delay = 0;\n        }\n        _super.call(this, destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    ObserveOnSubscriber.dispatch = function (arg) {\n        var notification = arg.notification, destination = arg.destination;\n        notification.observe(destination);\n        this.unsubscribe();\n    };\n    ObserveOnSubscriber.prototype.scheduleMessage = function (notification) {\n        this.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    };\n    ObserveOnSubscriber.prototype._next = function (value) {\n        this.scheduleMessage(Notification.createNext(value));\n    };\n    ObserveOnSubscriber.prototype._error = function (err) {\n        this.scheduleMessage(Notification.createError(err));\n    };\n    ObserveOnSubscriber.prototype._complete = function () {\n        this.scheduleMessage(Notification.createComplete());\n    };\n    return ObserveOnSubscriber;\n}(Subscriber));\nexport var ObserveOnMessage = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ObserveOnMessage(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n    return ObserveOnMessage;\n}());\n//# sourceMappingURL=observeOn.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/observeOn.js","/** PURE_IMPORTS_START ._Subject,._scheduler_queue,._Subscription,._operators_observeOn,._util_ObjectUnsubscribedError,._SubjectSubscription PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subject } from './Subject';\nimport { queue } from './scheduler/queue';\nimport { Subscription } from './Subscription';\nimport { ObserveOnSubscriber } from './operators/observeOn';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { SubjectSubscription } from './SubjectSubscription';\n/**\n * @class ReplaySubject<T>\n */\nexport var ReplaySubject = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ReplaySubject, _super);\n    function ReplaySubject(bufferSize, windowTime, scheduler) {\n        if (bufferSize === void 0) {\n            bufferSize = Number.POSITIVE_INFINITY;\n        }\n        if (windowTime === void 0) {\n            windowTime = Number.POSITIVE_INFINITY;\n        }\n        _super.call(this);\n        this.scheduler = scheduler;\n        this._events = [];\n        this._bufferSize = bufferSize < 1 ? 1 : bufferSize;\n        this._windowTime = windowTime < 1 ? 1 : windowTime;\n    }\n    ReplaySubject.prototype.next = function (value) {\n        var now = this._getNow();\n        this._events.push(new ReplayEvent(now, value));\n        this._trimBufferThenGetEvents();\n        _super.prototype.next.call(this, value);\n    };\n    /** @deprecated internal use only */ ReplaySubject.prototype._subscribe = function (subscriber) {\n        var _events = this._trimBufferThenGetEvents();\n        var scheduler = this.scheduler;\n        var subscription;\n        if (this.closed) {\n            throw new ObjectUnsubscribedError();\n        }\n        else if (this.hasError) {\n            subscription = Subscription.EMPTY;\n        }\n        else if (this.isStopped) {\n            subscription = Subscription.EMPTY;\n        }\n        else {\n            this.observers.push(subscriber);\n            subscription = new SubjectSubscription(this, subscriber);\n        }\n        if (scheduler) {\n            subscriber.add(subscriber = new ObserveOnSubscriber(subscriber, scheduler));\n        }\n        var len = _events.length;\n        for (var i = 0; i < len && !subscriber.closed; i++) {\n            subscriber.next(_events[i].value);\n        }\n        if (this.hasError) {\n            subscriber.error(this.thrownError);\n        }\n        else if (this.isStopped) {\n            subscriber.complete();\n        }\n        return subscription;\n    };\n    ReplaySubject.prototype._getNow = function () {\n        return (this.scheduler || queue).now();\n    };\n    ReplaySubject.prototype._trimBufferThenGetEvents = function () {\n        var now = this._getNow();\n        var _bufferSize = this._bufferSize;\n        var _windowTime = this._windowTime;\n        var _events = this._events;\n        var eventsCount = _events.length;\n        var spliceCount = 0;\n        // Trim events that fall out of the time window.\n        // Start at the front of the list. Break early once\n        // we encounter an event that falls within the window.\n        while (spliceCount < eventsCount) {\n            if ((now - _events[spliceCount].time) < _windowTime) {\n                break;\n            }\n            spliceCount++;\n        }\n        if (eventsCount > _bufferSize) {\n            spliceCount = Math.max(spliceCount, eventsCount - _bufferSize);\n        }\n        if (spliceCount > 0) {\n            _events.splice(0, spliceCount);\n        }\n        return _events;\n    };\n    return ReplaySubject;\n}(Subject));\nvar ReplayEvent = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function ReplayEvent(time, value) {\n        this.time = time;\n        this.value = value;\n    }\n    return ReplayEvent;\n}());\n//# sourceMappingURL=ReplaySubject.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/ReplaySubject.js","// # src / rxjs.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n// Licensed under MIT\n\nimport { Subject } from \"rxjs/_esm5/Subject\";\nimport { ReplaySubject } from \"rxjs/_esm5/ReplaySubject\";\n\nexport const rxjsMixin = C =>\n  class extends C {\n    setupComponent(el, opts) {\n      const sideEffects = {};\n\n      this.subjects = {};\n      this.subjects.disconnect = new Subject();\n      this.subjects.document = new ReplaySubject();\n\n      Object.keys(this.constructor.types).map(key => {\n        this.subjects[key] = new ReplaySubject(1);\n        sideEffects[key] = x => this.subjects[key].next(x);\n      });\n\n      Object.defineProperty(this.constructor, \"sideEffects\", {\n        get: () => sideEffects,\n        set: () => {},\n        enumerable: true,\n        configurable: true,\n      });\n\n      super.setupComponent(el, opts);\n    }\n\n    connectComponent() {\n      super.connectComponent();\n      this.subjects.document.next(document);\n      Object.keys(this.constructor.types).map(key => this.subjects[key].next(this[key]));\n    }\n\n    disconnectComponent() {\n      super.disconnectComponent();\n      this.subjects.disconnect.next({});\n    }\n\n    adaptComponent() {\n      super.adaptComponent();\n      this.subjects.document.next(document);\n    }\n  };\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/hy-component/src/rxjs.js","export const array = (attr) => {\n  if (attr == null) return null;\n\n  const str = attr.trim()\n    .replace(/^\\[?(.*?)\\]?$/, '$1')\n    .split(',')\n    .map(x => x.trim());\n\n  return str || null;\n};\n\narray.stringify = a => (a && a.length > 0 ? a.join(',') : null);\n\nexport default array;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/array.js","import { array } from './array';\n\nexport const arrayOf = (type) => {\n  const f = (attr) => {\n    if (attr == null) return null;\n    const a = array(attr).map(type);\n    if (a.reduce((r, x) => r && x !== null, true)) {\n      return a;\n    }\n    return null;\n  };\n\n  f.stringify = (a) => {\n    const a2 = a && a.map && a.map(type.stringify);\n    if (a2 && a2.reduce((r, x) => r && x !== null, true)) {\n      return array.stringify(a2);\n    }\n    return null;\n  };\n\n  return f;\n};\n\nexport default arrayOf;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/array-of.js","export const bool = (attr) => {\n  if (attr == null) return false;\n  const attr2 = (attr.trim && attr.trim()) || attr;\n  return !(\n    attr2 === 'false' ||\n    attr2 === 'null' ||\n    attr2 === 'undefined' ||\n    attr2 === '0' ||\n    attr2 === false\n  );\n};\n\nbool.stringify = b => (b ? '' : null);\n\nexport default bool;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/bool.js","export const number = (attr) => {\n  if (attr == null) return null;\n  return Number(attr);\n};\n\nnumber.stringify = (n) => {\n  if (n == null) return null;\n  return `${n}`;\n};\n\nexport default number;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/number.js","export const oneOf = (alts) => {\n  const f = (attr) => {\n    if (attr == null) return null;\n\n    const i = alts.indexOf(attr);\n    if (process.env.DEBUG && i === -1) {\n      console.warn(`'${attr}' is not 'oneOf': ${alts.join(', ')}`);\n    }\n\n    return i > -1 ? alts[i] : null;\n  };\n\n  f.stringify = o => (alts.indexOf(o) !== -1 ? o : null);\n\n  return f;\n};\n\nexport default oneOf;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/one-of.js","export const regex = (attr) => {\n  if (attr == null) return null;\n  const attr2 = (attr.trim && attr.trim()) || attr;\n  const match = attr2.match(/^\\/?(.*?)(\\/([gimy]*))?$/);\n  return new RegExp(match[1], match[3]);\n};\n\nregex.stringify = r => (r && r.toString()) || null;\n\nexport default regex;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/regex.js","export const string = attr => attr;\n\nstring.stringify = s => s;\n\nexport default string;\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/attr-types/string.js","/** PURE_IMPORTS_START .._Observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var ScalarObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ScalarObservable, _super);\n    function ScalarObservable(value, scheduler) {\n        _super.call(this);\n        this.value = value;\n        this.scheduler = scheduler;\n        this._isScalar = true;\n        if (scheduler) {\n            this._isScalar = false;\n        }\n    }\n    ScalarObservable.create = function (value, scheduler) {\n        return new ScalarObservable(value, scheduler);\n    };\n    ScalarObservable.dispatch = function (state) {\n        var done = state.done, value = state.value, subscriber = state.subscriber;\n        if (done) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(value);\n        if (subscriber.closed) {\n            return;\n        }\n        state.done = true;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ScalarObservable.prototype._subscribe = function (subscriber) {\n        var value = this.value;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ScalarObservable.dispatch, 0, {\n                done: false, value: value, subscriber: subscriber\n            });\n        }\n        else {\n            subscriber.next(value);\n            if (!subscriber.closed) {\n                subscriber.complete();\n            }\n        }\n    };\n    return ScalarObservable;\n}(Observable));\n//# sourceMappingURL=ScalarObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/ScalarObservable.js","/** PURE_IMPORTS_START .._Observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var EmptyObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(EmptyObservable, _super);\n    function EmptyObservable(scheduler) {\n        _super.call(this);\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer and immediately\n     * emits a complete notification.\n     *\n     * <span class=\"informal\">Just emits 'complete', and nothing else.\n     * </span>\n     *\n     * <img src=\"./img/empty.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the complete notification. It can be used for composing with other\n     * Observables, such as in a {@link mergeMap}.\n     *\n     * @example <caption>Emit the number 7, then complete.</caption>\n     * var result = Rx.Observable.empty().startWith(7);\n     * result.subscribe(x => console.log(x));\n     *\n     * @example <caption>Map and flatten only odd numbers to the sequence 'a', 'b', 'c'</caption>\n     * var interval = Rx.Observable.interval(1000);\n     * var result = interval.mergeMap(x =>\n     *   x % 2 === 1 ? Rx.Observable.of('a', 'b', 'c') : Rx.Observable.empty()\n     * );\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following to the console:\n     * // x is equal to the count on the interval eg(0,1,2,3,...)\n     * // x will occur every 1000ms\n     * // if x % 2 is equal to 1 print abc\n     * // if x % 2 is not equal to 1 nothing will be output\n     *\n     * @see {@link create}\n     * @see {@link never}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emission of the complete notification.\n     * @return {Observable} An \"empty\" Observable: emits only the complete\n     * notification.\n     * @static true\n     * @name empty\n     * @owner Observable\n     */\n    EmptyObservable.create = function (scheduler) {\n        return new EmptyObservable(scheduler);\n    };\n    EmptyObservable.dispatch = function (arg) {\n        var subscriber = arg.subscriber;\n        subscriber.complete();\n    };\n    /** @deprecated internal use only */ EmptyObservable.prototype._subscribe = function (subscriber) {\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(EmptyObservable.dispatch, 0, { subscriber: subscriber });\n        }\n        else {\n            subscriber.complete();\n        }\n    };\n    return EmptyObservable;\n}(Observable));\n//# sourceMappingURL=EmptyObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/EmptyObservable.js","/** PURE_IMPORTS_START .._Observable,._ScalarObservable,._EmptyObservable,.._util_isScheduler PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\nimport { isScheduler } from '../util/isScheduler';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var ArrayObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ArrayObservable, _super);\n    function ArrayObservable(array, scheduler) {\n        _super.call(this);\n        this.array = array;\n        this.scheduler = scheduler;\n        if (!scheduler && array.length === 1) {\n            this._isScalar = true;\n            this.value = array[0];\n        }\n    }\n    ArrayObservable.create = function (array, scheduler) {\n        return new ArrayObservable(array, scheduler);\n    };\n    /**\n     * Creates an Observable that emits some values you specify as arguments,\n     * immediately one after the other, and then emits a complete notification.\n     *\n     * <span class=\"informal\">Emits the arguments you provide, then completes.\n     * </span>\n     *\n     * <img src=\"./img/of.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that only\n     * emits the arguments given, and the complete notification thereafter. It can\n     * be used for composing with other Observables, such as with {@link concat}.\n     * By default, it uses a `null` IScheduler, which means the `next`\n     * notifications are sent synchronously, although with a different IScheduler\n     * it is possible to determine when those notifications will be delivered.\n     *\n     * @example <caption>Emit 10, 20, 30, then 'a', 'b', 'c', then start ticking every second.</caption>\n     * var numbers = Rx.Observable.of(10, 20, 30);\n     * var letters = Rx.Observable.of('a', 'b', 'c');\n     * var interval = Rx.Observable.interval(1000);\n     * var result = numbers.concat(letters).concat(interval);\n     * result.subscribe(x => console.log(x));\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link never}\n     * @see {@link throw}\n     *\n     * @param {...T} values Arguments that represent `next` values to be emitted.\n     * @param {Scheduler} [scheduler] A {@link IScheduler} to use for scheduling\n     * the emissions of the `next` notifications.\n     * @return {Observable<T>} An Observable that emits each given input value.\n     * @static true\n     * @name of\n     * @owner Observable\n     */\n    ArrayObservable.of = function () {\n        var array = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            array[_i - 0] = arguments[_i];\n        }\n        var scheduler = array[array.length - 1];\n        if (isScheduler(scheduler)) {\n            array.pop();\n        }\n        else {\n            scheduler = null;\n        }\n        var len = array.length;\n        if (len > 1) {\n            return new ArrayObservable(array, scheduler);\n        }\n        else if (len === 1) {\n            return new ScalarObservable(array[0], scheduler);\n        }\n        else {\n            return new EmptyObservable(scheduler);\n        }\n    };\n    ArrayObservable.dispatch = function (state) {\n        var array = state.array, index = state.index, count = state.count, subscriber = state.subscriber;\n        if (index >= count) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(array[index]);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ArrayObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var array = this.array;\n        var count = array.length;\n        var scheduler = this.scheduler;\n        if (scheduler) {\n            return scheduler.schedule(ArrayObservable.dispatch, 0, {\n                array: array, index: index, count: count, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < count && !subscriber.closed; i++) {\n                subscriber.next(array[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayObservable;\n}(Observable));\n//# sourceMappingURL=ArrayObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/ArrayObservable.js","/** PURE_IMPORTS_START ._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var OuterSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(OuterSubscriber, _super);\n    function OuterSubscriber() {\n        _super.apply(this, arguments);\n    }\n    OuterSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(innerValue);\n    };\n    OuterSubscriber.prototype.notifyError = function (error, innerSub) {\n        this.destination.error(error);\n    };\n    OuterSubscriber.prototype.notifyComplete = function (innerSub) {\n        this.destination.complete();\n    };\n    return OuterSubscriber;\n}(Subscriber));\n//# sourceMappingURL=OuterSubscriber.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/OuterSubscriber.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nexport var isArrayLike = (function (x) { return x && typeof x.length === 'number'; });\n//# sourceMappingURL=isArrayLike.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/isArrayLike.js","/** PURE_IMPORTS_START .._util_root PURE_IMPORTS_END */\nimport { root } from '../util/root';\nexport function symbolIteratorPonyfill(root) {\n    var Symbol = root.Symbol;\n    if (typeof Symbol === 'function') {\n        if (!Symbol.iterator) {\n            Symbol.iterator = Symbol('iterator polyfill');\n        }\n        return Symbol.iterator;\n    }\n    else {\n        // [for Mozilla Gecko 27-35:](https://mzl.la/2ewE1zC)\n        var Set_1 = root.Set;\n        if (Set_1 && typeof new Set_1()['@@iterator'] === 'function') {\n            return '@@iterator';\n        }\n        var Map_1 = root.Map;\n        // required for compatability with es6-shim\n        if (Map_1) {\n            var keys = Object.getOwnPropertyNames(Map_1.prototype);\n            for (var i = 0; i < keys.length; ++i) {\n                var key = keys[i];\n                // according to spec, Map.prototype[@@iterator] and Map.orototype.entries must be equal.\n                if (key !== 'entries' && key !== 'size' && Map_1.prototype[key] === Map_1.prototype['entries']) {\n                    return key;\n                }\n            }\n        }\n        return '@@iterator';\n    }\n}\nexport var iterator = /*@__PURE__*/ symbolIteratorPonyfill(root);\n/**\n * @deprecated use iterator instead\n */\nexport var $$iterator = iterator;\n//# sourceMappingURL=iterator.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/symbol/iterator.js","/** PURE_IMPORTS_START ._Subscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Subscriber } from './Subscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var InnerSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(InnerSubscriber, _super);\n    function InnerSubscriber(parent, outerValue, outerIndex) {\n        _super.call(this);\n        this.parent = parent;\n        this.outerValue = outerValue;\n        this.outerIndex = outerIndex;\n        this.index = 0;\n    }\n    InnerSubscriber.prototype._next = function (value) {\n        this.parent.notifyNext(this.outerValue, value, this.outerIndex, this.index++, this);\n    };\n    InnerSubscriber.prototype._error = function (error) {\n        this.parent.notifyError(error, this);\n        this.unsubscribe();\n    };\n    InnerSubscriber.prototype._complete = function () {\n        this.parent.notifyComplete(this);\n        this.unsubscribe();\n    };\n    return InnerSubscriber;\n}(Subscriber));\n//# sourceMappingURL=InnerSubscriber.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/InnerSubscriber.js","/** PURE_IMPORTS_START .._observable_ArrayObservable,.._util_isArray,.._OuterSubscriber,.._util_subscribeToResult PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { ArrayObservable } from '../observable/ArrayObservable';\nimport { isArray } from '../util/isArray';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nvar none = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nexport function combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) { return source.lift.call(new ArrayObservable([source].concat(observables)), new CombineLatestOperator(project)); };\n}\nexport var CombineLatestOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport var CombineLatestSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        _super.call(this, destination);\n        this.project = project;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(none);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === none ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=combineLatest.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/operators/combineLatest.js","/** PURE_IMPORTS_START .._Observable,.._util_subscribeToResult,.._OuterSubscriber PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var DeferObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DeferObservable, _super);\n    function DeferObservable(observableFactory) {\n        _super.call(this);\n        this.observableFactory = observableFactory;\n    }\n    /**\n     * Creates an Observable that, on subscribe, calls an Observable factory to\n     * make an Observable for each new Observer.\n     *\n     * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n     * is subscribed.\n     * </span>\n     *\n     * <img src=\"./img/defer.png\" width=\"100%\">\n     *\n     * `defer` allows you to create the Observable only when the Observer\n     * subscribes, and create a fresh Observable for each Observer. It waits until\n     * an Observer subscribes to it, and then it generates an Observable,\n     * typically with an Observable factory function. It does this afresh for each\n     * subscriber, so although each subscriber may think it is subscribing to the\n     * same Observable, in fact each subscriber gets its own individual\n     * Observable.\n     *\n     * @example <caption>Subscribe to either an Observable of clicks or an Observable of interval, at random</caption>\n     * var clicksOrInterval = Rx.Observable.defer(function () {\n     *   if (Math.random() > 0.5) {\n     *     return Rx.Observable.fromEvent(document, 'click');\n     *   } else {\n     *     return Rx.Observable.interval(1000);\n     *   }\n     * });\n     * clicksOrInterval.subscribe(x => console.log(x));\n     *\n     * // Results in the following behavior:\n     * // If the result of Math.random() is greater than 0.5 it will listen\n     * // for clicks anywhere on the \"document\"; when document is clicked it\n     * // will log a MouseEvent object to the console. If the result is less\n     * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n     *\n     * @see {@link create}\n     *\n     * @param {function(): SubscribableOrPromise} observableFactory The Observable\n     * factory function to invoke for each Observer that subscribes to the output\n     * Observable. May also return a Promise, which will be converted on the fly\n     * to an Observable.\n     * @return {Observable} An Observable whose Observers' subscriptions trigger\n     * an invocation of the given Observable factory function.\n     * @static true\n     * @name defer\n     * @owner Observable\n     */\n    DeferObservable.create = function (observableFactory) {\n        return new DeferObservable(observableFactory);\n    };\n    /** @deprecated internal use only */ DeferObservable.prototype._subscribe = function (subscriber) {\n        return new DeferSubscriber(subscriber, this.observableFactory);\n    };\n    return DeferObservable;\n}(Observable));\nvar DeferSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(DeferSubscriber, _super);\n    function DeferSubscriber(destination, factory) {\n        _super.call(this, destination);\n        this.factory = factory;\n        this.tryDefer();\n    }\n    DeferSubscriber.prototype.tryDefer = function () {\n        try {\n            this._callFactory();\n        }\n        catch (err) {\n            this._error(err);\n        }\n    };\n    DeferSubscriber.prototype._callFactory = function () {\n        var result = this.factory();\n        if (result) {\n            this.add(subscribeToResult(this, result));\n        }\n    };\n    return DeferSubscriber;\n}(OuterSubscriber));\n//# sourceMappingURL=DeferObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/DeferObservable.js","/** PURE_IMPORTS_START ._DeferObservable PURE_IMPORTS_END */\nimport { DeferObservable } from './DeferObservable';\nexport var defer = DeferObservable.create;\n//# sourceMappingURL=defer.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/defer.js","/** PURE_IMPORTS_START ._FromEventObservable PURE_IMPORTS_END */\nimport { FromEventObservable } from './FromEventObservable';\nexport var fromEvent = FromEventObservable.create;\n//# sourceMappingURL=fromEvent.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/fromEvent.js","/** PURE_IMPORTS_START .._Observable,.._util_noop PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { noop } from '../util/noop';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var NeverObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(NeverObservable, _super);\n    function NeverObservable() {\n        _super.call(this);\n    }\n    /**\n     * Creates an Observable that emits no items to the Observer.\n     *\n     * <span class=\"informal\">An Observable that never emits anything.</span>\n     *\n     * <img src=\"./img/never.png\" width=\"100%\">\n     *\n     * This static operator is useful for creating a simple Observable that emits\n     * neither values nor errors nor the completion notification. It can be used\n     * for testing purposes or for composing with other Observables. Please note\n     * that by never emitting a complete notification, this Observable keeps the\n     * subscription from being disposed automatically. Subscriptions need to be\n     * manually disposed.\n     *\n     * @example <caption>Emit the number 7, then never emit anything else (not even complete).</caption>\n     * function info() {\n     *   console.log('Will not be called');\n     * }\n     * var result = Rx.Observable.never().startWith(7);\n     * result.subscribe(x => console.log(x), info, info);\n     *\n     * @see {@link create}\n     * @see {@link empty}\n     * @see {@link of}\n     * @see {@link throw}\n     *\n     * @return {Observable} A \"never\" Observable: never emits anything.\n     * @static true\n     * @name never\n     * @owner Observable\n     */\n    NeverObservable.create = function () {\n        return new NeverObservable();\n    };\n    /** @deprecated internal use only */ NeverObservable.prototype._subscribe = function (subscriber) {\n        noop();\n    };\n    return NeverObservable;\n}(Observable));\n//# sourceMappingURL=NeverObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/NeverObservable.js","/** PURE_IMPORTS_START ._NeverObservable PURE_IMPORTS_END */\nimport { NeverObservable } from './NeverObservable';\nexport var never = NeverObservable.create;\n//# sourceMappingURL=never.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/never.js","/** PURE_IMPORTS_START .._Subject,.._Observable,.._Subscriber,.._Subscription,.._operators_refCount PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { SubjectSubscriber } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\n/**\n * @class ConnectableObservable<T>\n */\nexport var ConnectableObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ConnectableObservable, _super);\n    function ConnectableObservable(/** @deprecated internal use only */ source, \n    /** @deprecated internal use only */ subjectFactory) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        /** @deprecated internal use only */ this._refCount = 0;\n        this._isComplete = false;\n    }\n    /** @deprecated internal use only */ ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    /** @deprecated internal use only */ ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return higherOrderRefCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable));\nvar connectableProto = ConnectableObservable.prototype;\nexport var connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated internal use only */ ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(SubjectSubscriber));\nvar RefCountOperator = /*@__PURE__*/ (/*@__PURE__*/ function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber));\n//# sourceMappingURL=ConnectableObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/ConnectableObservable.js","/** PURE_IMPORTS_START ._ArrayObservable PURE_IMPORTS_END */\nimport { ArrayObservable } from './ArrayObservable';\nexport var of = ArrayObservable.of;\n//# sourceMappingURL=of.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/of.js","/** PURE_IMPORTS_START .._Observable,._ScalarObservable,._EmptyObservable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { Observable } from '../Observable';\nimport { ScalarObservable } from './ScalarObservable';\nimport { EmptyObservable } from './EmptyObservable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var ArrayLikeObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ArrayLikeObservable, _super);\n    function ArrayLikeObservable(arrayLike, scheduler) {\n        _super.call(this);\n        this.arrayLike = arrayLike;\n        this.scheduler = scheduler;\n        if (!scheduler && arrayLike.length === 1) {\n            this._isScalar = true;\n            this.value = arrayLike[0];\n        }\n    }\n    ArrayLikeObservable.create = function (arrayLike, scheduler) {\n        var length = arrayLike.length;\n        if (length === 0) {\n            return new EmptyObservable();\n        }\n        else if (length === 1) {\n            return new ScalarObservable(arrayLike[0], scheduler);\n        }\n        else {\n            return new ArrayLikeObservable(arrayLike, scheduler);\n        }\n    };\n    ArrayLikeObservable.dispatch = function (state) {\n        var arrayLike = state.arrayLike, index = state.index, length = state.length, subscriber = state.subscriber;\n        if (subscriber.closed) {\n            return;\n        }\n        if (index >= length) {\n            subscriber.complete();\n            return;\n        }\n        subscriber.next(arrayLike[index]);\n        state.index = index + 1;\n        this.schedule(state);\n    };\n    /** @deprecated internal use only */ ArrayLikeObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, arrayLike = _a.arrayLike, scheduler = _a.scheduler;\n        var length = arrayLike.length;\n        if (scheduler) {\n            return scheduler.schedule(ArrayLikeObservable.dispatch, 0, {\n                arrayLike: arrayLike, index: index, length: length, subscriber: subscriber\n            });\n        }\n        else {\n            for (var i = 0; i < length && !subscriber.closed; i++) {\n                subscriber.next(arrayLike[i]);\n            }\n            subscriber.complete();\n        }\n    };\n    return ArrayLikeObservable;\n}(Observable));\n//# sourceMappingURL=ArrayLikeObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/ArrayLikeObservable.js","/** PURE_IMPORTS_START .._util_isArray,.._util_isArrayLike,.._util_isPromise,._PromiseObservable,._IteratorObservable,._ArrayObservable,._ArrayLikeObservable,.._symbol_iterator,.._Observable,.._operators_observeOn,.._symbol_observable PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { isArray } from '../util/isArray';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { PromiseObservable } from './PromiseObservable';\nimport { IteratorObservable } from './IteratorObservable';\nimport { ArrayObservable } from './ArrayObservable';\nimport { ArrayLikeObservable } from './ArrayLikeObservable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { Observable } from '../Observable';\nimport { ObserveOnSubscriber } from '../operators/observeOn';\nimport { observable as Symbol_observable } from '../symbol/observable';\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nexport var FromObservable = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(FromObservable, _super);\n    function FromObservable(ish, scheduler) {\n        _super.call(this, null);\n        this.ish = ish;\n        this.scheduler = scheduler;\n    }\n    /**\n     * Creates an Observable from an Array, an array-like object, a Promise, an\n     * iterable object, or an Observable-like object.\n     *\n     * <span class=\"informal\">Converts almost anything to an Observable.</span>\n     *\n     * <img src=\"./img/from.png\" width=\"100%\">\n     *\n     * Convert various other objects and data types into Observables. `from`\n     * converts a Promise or an array-like or an\n     * [iterable](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable)\n     * object into an Observable that emits the items in that promise or array or\n     * iterable. A String, in this context, is treated as an array of characters.\n     * Observable-like objects (contains a function named with the ES2015 Symbol\n     * for Observable) can also be converted through this operator.\n     *\n     * @example <caption>Converts an array to an Observable</caption>\n     * var array = [10, 20, 30];\n     * var result = Rx.Observable.from(array);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 10 20 30\n     *\n     * @example <caption>Convert an infinite iterable (from a generator) to an Observable</caption>\n     * function* generateDoubles(seed) {\n     *   var i = seed;\n     *   while (true) {\n     *     yield i;\n     *     i = 2 * i; // double it\n     *   }\n     * }\n     *\n     * var iterator = generateDoubles(3);\n     * var result = Rx.Observable.from(iterator).take(10);\n     * result.subscribe(x => console.log(x));\n     *\n     * // Results in the following:\n     * // 3 6 12 24 48 96 192 384 768 1536\n     *\n     * @see {@link create}\n     * @see {@link fromEvent}\n     * @see {@link fromEventPattern}\n     * @see {@link fromPromise}\n     *\n     * @param {ObservableInput<T>} ish A subscribable object, a Promise, an\n     * Observable-like, an Array, an iterable or an array-like object to be\n     * converted.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * emissions of values.\n     * @return {Observable<T>} The Observable whose values are originally from the\n     * input object that was converted.\n     * @static true\n     * @name from\n     * @owner Observable\n     */\n    FromObservable.create = function (ish, scheduler) {\n        if (ish != null) {\n            if (typeof ish[Symbol_observable] === 'function') {\n                if (ish instanceof Observable && !scheduler) {\n                    return ish;\n                }\n                return new FromObservable(ish, scheduler);\n            }\n            else if (isArray(ish)) {\n                return new ArrayObservable(ish, scheduler);\n            }\n            else if (isPromise(ish)) {\n                return new PromiseObservable(ish, scheduler);\n            }\n            else if (typeof ish[Symbol_iterator] === 'function' || typeof ish === 'string') {\n                return new IteratorObservable(ish, scheduler);\n            }\n            else if (isArrayLike(ish)) {\n                return new ArrayLikeObservable(ish, scheduler);\n            }\n        }\n        throw new TypeError((ish !== null && typeof ish || ish) + ' is not observable');\n    };\n    /** @deprecated internal use only */ FromObservable.prototype._subscribe = function (subscriber) {\n        var ish = this.ish;\n        var scheduler = this.scheduler;\n        if (scheduler == null) {\n            return ish[Symbol_observable]().subscribe(subscriber);\n        }\n        else {\n            return ish[Symbol_observable]().subscribe(new ObserveOnSubscriber(subscriber, scheduler, 0));\n        }\n    };\n    return FromObservable;\n}(Observable));\n//# sourceMappingURL=FromObservable.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/FromObservable.js","/** PURE_IMPORTS_START ._FromObservable PURE_IMPORTS_END */\nimport { FromObservable } from './FromObservable';\nexport var from = FromObservable.create;\n//# sourceMappingURL=from.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/observable/from.js","/** PURE_IMPORTS_START  PURE_IMPORTS_END */\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b)\n        if (b.hasOwnProperty(p))\n            d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport var ArgumentOutOfRangeError = /*@__PURE__*/ (/*@__PURE__*/ function (_super) {\n    __extends(ArgumentOutOfRangeError, _super);\n    function ArgumentOutOfRangeError() {\n        var err = _super.call(this, 'argument out of range');\n        this.name = err.name = 'ArgumentOutOfRangeError';\n        this.stack = err.stack;\n        this.message = err.message;\n    }\n    return ArgumentOutOfRangeError;\n}(Error));\n//# sourceMappingURL=ArgumentOutOfRangeError.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/util/ArgumentOutOfRangeError.js","/** PURE_IMPORTS_START ._AsyncAction,._AsyncScheduler PURE_IMPORTS_END */\nimport { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asap} scheduler.\n *\n * @example <caption>Use async scheduler to delay task</caption>\n * const task = () => console.log('it works!');\n *\n * Rx.Scheduler.async.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n *\n *\n * @example <caption>Use async scheduler to repeat task in intervals</caption>\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * Rx.Scheduler.async.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n *\n * @static true\n * @name async\n * @owner Scheduler\n */\nexport var async = /*@__PURE__*/ new AsyncScheduler(AsyncAction);\n//# sourceMappingURL=async.js.map\n\n\n\n// WEBPACK FOOTER //\n// ./node_modules/rxjs/_esm5/scheduler/async.js","// # src / mixin / operators.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { never } from \"rxjs/_esm5/observable/never\";\n\nimport { filter } from \"rxjs/_esm5/operators/filter\";\nimport { map } from \"rxjs/_esm5/operators/map\";\nimport { switchMap } from \"rxjs/_esm5/operators/switchMap\";\nimport { withLatestFrom } from \"rxjs/_esm5/operators/withLatestFrom\";\n\n// ### Observable extensions\n// #### Subscribe when\n// This operator is like `filterWhen`, but it will unsubscribe from the source observable\n// when the input observable emits `false`, and re-subscribe when it emits `true`.\nexport const subscribeWhen = p$ => source => {\n  if (process.env.DEBUG && !p$) throw Error();\n  return p$.pipe(switchMap(p => (p ? source : never())));\n};\n\n// #### Filter when\n// This operator is like `filter`, but it takes an observable of booleans as input,\n// instead of a predicate function.\nexport const filterWhen = (p$, ...others) => source => {\n  if (process.env.DEBUG && !p$) throw Error();\n  else if (others.length === 0) {\n    return source.pipe(withLatestFrom(p$), filter(([, p]) => p), map(([x]) => x));\n\n    // When providing more than one observable, the result observable will only emit values\n    // when `every` input observable has emitted a truthy value.\n  } else {\n    return source.pipe(\n      withLatestFrom(p$, ...others),\n      filter(([, ...ps]) => ps.every(p => p)),\n      map(([x]) => x)\n    );\n  }\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixin/operators.js","// # src / mixin / calc.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { VELOCITY_THRESHOLD } from \"./constants\";\n\n// Using shorthands for common functions\nconst min = Math.min.bind(Math);\nconst max = Math.max.bind(Math);\n\nexport const calcMixin = C =>\n  class extends C {\n    // #### Is in range?\n    // Given a x-coordinate, `isInRange` will  determine whether it is within range from where\n    // to pull the drawer. The x-coordinate *must* be larger than the lower bound,\n    // but when the drawer is opened it may be anywhere on the screen.\n    // Otherwise it must be below the upper bound.\n    calcIsInRange(clientX, opened) {\n      switch (this.align) {\n        case \"left\":\n          return clientX > this.range[0] && (opened || clientX < this.range[1]);\n        case \"right\":\n          return (\n            clientX < window.innerWidth - this.range[0] &&\n            (opened || clientX > window.innerWidth - this.range[1])\n          );\n        default:\n          throw Error();\n      }\n    }\n\n    // #### Calculate 'Is swipe?'\n    // If the start and end position are not the same x-coordinate, we call it a 'swipe'.\n    // However, if a tap occures during an animation (i.e. `translateX` not in a resting position)\n    // we treat it as a swipe as well. The reasons for this are pretty complex:\n    // Basically, we want users the be able to stop the animation by putting a finger on the screen.\n    // However, if they lift the finger again without swiping, the animation would not continue,\n    // because it would not pass the condition below, unless we introduce the second term.\n    // TODO: reuse isSlidign observable?\n    calcIsSwipe([{ clientX: endX }, { clientX: startX }, translateX]) {\n      return endX !== startX || (translateX > 0 && translateX < this.drawerWidth);\n    }\n\n    // #### Calculate 'Will open?'\n    // Based on current velocity and position of the drawer,\n    // should the drawer slide open, or snap back?\n    // TODO: could incorporate the current open state of the drawer.\n    calcWillOpen([, , translateX, velocity]) {\n      switch (this.align) {\n        case \"left\": {\n          if (velocity > VELOCITY_THRESHOLD) return true;\n          else if (velocity < -VELOCITY_THRESHOLD) return false;\n          else if (translateX >= this.drawerWidth / 2) return true;\n          else return false;\n        }\n        case \"right\": {\n          if (-velocity > VELOCITY_THRESHOLD) return true;\n          else if (-velocity < -VELOCITY_THRESHOLD) return false;\n          else if (translateX <= -this.drawerWidth / 2) return true;\n          else return false;\n        }\n        default:\n          throw Error();\n      }\n    }\n\n    // #### Calculate translate X\n    // Calcuate the current position of the drawer,\n    // by taking the difference between the current and starting postion of the finger,\n    // then adding that difference to the starting position of the drawer.\n    // This way, we avoid the drawer jumping to the finger, when \"catching\" it during an animation.\n    // The function will also clip the position at 0 and the width of the drawer.\n    calcTranslateX(clientX, startX, startTranslateX) {\n      switch (this.align) {\n        case \"left\": {\n          const deltaX = clientX - startX;\n          const translateX = startTranslateX + deltaX;\n          return max(0, min(this.drawerWidth, translateX));\n        }\n        case \"right\": {\n          const deltaX = clientX - startX;\n          const translateX = startTranslateX + deltaX;\n          return min(0, max(-this.drawerWidth, translateX));\n        }\n        default:\n          throw Error();\n      }\n    }\n\n    // #### Get movable drawer width\n    // One feature of hy-drawer is to allow the drawer to \"peek\" over the edge.\n    // This effect is achieved by setting a smaller negative `left` (`right`) CSS property,\n    // than is the width of the drawer,\n    // The 'moveable' part of the drawer, then, is equal to the inverse of that property.\n    // See [Styling](../../styling.md) for more.\n    calcMovableDrawerWidth() {\n      return -parseFloat(getComputedStyle(this.contentEl)[this.align]);\n    }\n  };\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixin/calc.js","// # src / mixin / constants.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// The base duration of the fling animation.\nexport const BASE_DURATION = 200;\n\n// We adjust the duration of the animation using the width of the drawer.\n// There is no physics to this, but we know from testing that the animation starts to feel bad\n// when the drawer increases in size.\n// From testing we know that, if we increase the duration as a fraction of the drawer width,\n// the animation stays smooth across common display sizes.\nexport const WIDTH_CONTRIBUTION = 0.15;\n\n// Minimum velocity of the drawer (in px/ms) when releasing to make it fling to opened/closed state.\nexport const VELOCITY_THRESHOLD = 0.15;\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixin/constants.js","// # src / mixin / update.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nconst hasCSSOM = \"attributeStyleMap\" in Element.prototype && \"CSS\" in window && CSS.number;\n\nexport const updateMixin = C =>\n  class extends C {\n    histId() {\n      return this.el.id || this.constructor.componentName;\n    }\n\n    // #### Prepare and cleanup interaction\n    // `prepareInteraction` causes various side effects before sliding the drawer.\n    //\n    // Note that the drawer receives the `hy-drawer-opened` CSS class when it is opened.\n    // This class makes the drawer appear open by setting the CSS `left` (`right`) property, instead\n    // of an absoulte `transform` value.\n    // This way, the drawer's width can change while it is open without having to\n    // recalculate `translateX` on every `resize`.\n    // However, it has to be removed before we move the drawer via `translateX` again.\n    prepareInteraction() {\n      if (hasCSSOM) {\n        this.contentEl.attributeStyleMap.set(\"will-change\", \"transform\");\n        this.scrimEl.attributeStyleMap.set(\"will-change\", \"opacity\");\n      } else {\n        this.contentEl.style.willChange = \"transform\";\n        this.scrimEl.style.willChange = \"opacity\";\n      }\n      this.contentEl.classList.remove(\"hy-drawer-opened\");\n      this.fireEvent(\"prepare\");\n    }\n\n    // Cleanup code after a completed interaction.\n    // Will add/remove the beforementioned `hy-drawer-opened` class.\n    cleanupInteraction(opened) {\n      if (hasCSSOM) {\n        this.contentEl.attributeStyleMap.delete(\"will-change\");\n        this.scrimEl.attributeStyleMap.delete(\"will-change\");\n\n        if (opened) {\n          this.scrimEl.attributeStyleMap.set(\"pointer-events\", new CSSKeywordValue(\"all\"));\n          this.contentEl.classList.add(\"hy-drawer-opened\");\n        } else {\n          this.scrimEl.attributeStyleMap.delete(\"pointer-events\");\n          this.contentEl.classList.remove(\"hy-drawer-opened\");\n        }\n      } else {\n        this.scrimEl.style.willChange = \"\";\n        this.contentEl.style.willChange = \"\";\n\n        if (opened) {\n          this.scrimEl.style.pointerEvents = \"all\";\n          this.contentEl.classList.add(\"hy-drawer-opened\");\n        } else {\n          this.scrimEl.style.pointerEvents = \"\";\n          this.contentEl.classList.remove(\"hy-drawer-opened\");\n        }\n      }\n\n      // If the experimental back button feature is enabled we hack the history API,\n      // so that it matches the state of the drawer...\n      /*\n      if (this._backButton) {\n        const id = histId.call(this);\n        const hash = `#${id}--opened`;\n\n        if (opened && window.location.hash !== hash) {\n          window.history.pushState({ [id]: true }, document.title, hash);\n        }\n\n        if (!opened\n            && (window.history.state && window.history.state[histId.call(this)])\n            && window.location.hash !== '') {\n          window.history.back();\n        }\n      }\n      */\n\n      // Once we're finished cleaning up, we fire the `transitioned` event.\n      this.fireEvent(\"transitioned\", { detail: opened });\n    }\n    // #### Update DOM\n    // In the end, we only modify two properties: The x-coordinate of the drawer,\n    // and the opacity of the scrim, which is handled by `updateDOM`.\n    updateDOM(translateX) {\n      this.translateX = translateX;\n\n      const inv = this.align === \"left\" ? 1 : -1;\n      const opacity = (this.opacity = translateX / this.drawerWidth * inv);\n\n      if (hasCSSOM) {\n        this.contentEl.attributeStyleMap.set(\n          \"transform\",\n          new CSSTransformValue([new CSSTranslate(CSS.px(translateX), CSS.px(0))])\n        );\n        this.scrimEl.attributeStyleMap.set(\"opacity\", this.opacity);\n      } else {\n        this.contentEl.style.transform = `translateX(${translateX}px)`;\n        this.scrimEl.style.opacity = this.opacity;\n      }\n\n      this.fireEvent(\"move\", { detail: { translateX, opacity } });\n    }\n  };\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixin/update.js","// # src / mixin / observables.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\nimport { combineLatest } from \"rxjs/_esm5/observable/combineLatest\";\nimport { fromEvent } from \"rxjs/_esm5/observable/fromEvent\";\nimport { merge } from \"rxjs/_esm5/observable/merge\";\n\nimport { tap } from \"rxjs/_esm5/operators/tap\";\nimport { filter } from \"rxjs/_esm5/operators/filter\";\nimport { map } from \"rxjs/_esm5/operators/map\";\nimport { mapTo } from \"rxjs/_esm5/operators/mapTo\";\nimport { skipWhile } from \"rxjs/_esm5/operators/skipWhile\";\nimport { switchMap } from \"rxjs/_esm5/operators/switchMap\";\nimport { withLatestFrom } from \"rxjs/_esm5/operators/withLatestFrom\";\n\nimport { subscribeWhen } from \"./operators\";\n\n// Using shorthands for common functions\nconst abs = Math.abs.bind(Math);\n\n// #### Get start observable\n// The following function returns an observable of all \"start\" events.\n// Usually, that's just `touchstart` event of the first finger touching the screen,\n// however since the compontent also supports mouse events,\n// we may listen for `mousedown` events.\nexport const baseObservablesMixin = C =>\n  class extends C {\n    getStartObservable() {\n      // Since the `mouseEvents` option may change at any point, we `switchMap` to reflect the changes.\n      return combineLatest(this.subjects.document, this.subjects.mouseEvents).pipe(\n        switchMap(([doc, mouseEvents]) => {\n          // The touchstart observable is passive since we won't be calling `preventDefault`.\n          // Also, we're only interested in the first `touchstart`.\n          const touchstart$ = fromEvent(doc, \"touchstart\", {\n            passive: true,\n          }).pipe(filter(({ touches }) => touches.length === 1), map(({ touches }) => touches[0]));\n\n          // If mouse events aren't enabled, we're done here.\n          if (!mouseEvents) return touchstart$;\n\n          // Otherwise we also include `mousedown` events in the output.\n          const mousedown$ = fromEvent(doc, \"mousedown\").pipe(\n            tap(event => Object.assign(event, { event }))\n          );\n\n          return merge(touchstart$, mousedown$);\n        })\n      );\n    }\n\n    // #### Get move observable\n    // This function returns an observable of all move events. Usually that's just `touchmove`,\n    // but may also include `mousemove` events while the mouse button is down.\n    getMoveObservable(start$, end$) {\n      // Since the `mouseEvents` or `preventDefault` option may change at any point,\n      // we `switchMap` to reflect the changes.\n      // Nice: `combineLatest` provides us with the functionality of emitting\n      // when either of the inputs change, but not before all inputs have their first value set.\n      return combineLatest(\n        this.subjects.document,\n        this.subjects.mouseEvents,\n        this.subjects.preventDefault\n      ).pipe(\n        switchMap(([doc, mouseEvents, preventDefault]) => {\n          // We're only keeping track of the first finger.\n          // Should the user remove the finger that started the interaction, we use the next instead.\n          // Note that this doesn't occur under normal circumstances,\n          // and exists primarliy to ensure that the interaction continues without hiccups.\n          // Note that the event listener is only passive when the `preventDefault` option is falsy.\n          const touchmove$ = fromEvent(doc, \"touchmove\", { passive: !preventDefault }).pipe(\n            map(e => Object.assign(e.touches[0], { event: e }))\n          );\n\n          // If mouse events aren't enabled, we're done here.\n          if (!mouseEvents) return touchmove$;\n\n          // Otherwise we listen for `mousemove` events,\n          // but only those between a `start` and `end` event, i.e. while the user is sliding.\n          // We unsubscribe form the source observable outside of those contraints.\n          // Again, the listener is only marked as passive when the `preventDefault` option is falsy.\n          const mousemove$ = fromEvent(doc, \"mousemove\", {\n            passive: !preventDefault,\n          }).pipe(\n            subscribeWhen(merge(start$.pipe(mapTo(true)), end$.pipe(mapTo(false)))),\n            map(event => Object.assign(event, { event }))\n          );\n\n          return merge(touchmove$, mousemove$);\n        })\n      );\n    }\n\n    // #### Get end observable\n    // This function returns an observable of end events.\n    // Usually, this is the `touchend` event of the last finger, but may also include `mouseup` events,\n    // when the `mouseEvents` option is enabled.\n    getEndObservable() {\n      // Since the `mouseEvents` option may change at any point, we `switchMap` to reflect the changes.\n      return combineLatest(this.subjects.document, this.subjects.mouseEvents).pipe(\n        switchMap(([doc, mouseEvents]) => {\n          // We're only interested in the last `touchend`.\n          // Otherwise there's at least one finger left on the screen,\n          // that can be used to slide the drawer.\n          const touchend$ = fromEvent(doc, \"touchend\", { passive: true }).pipe(\n            filter(({ touches }) => touches.length === 0),\n            map(event => event.changedTouches[0])\n          );\n\n          // If mouse events aren't enabled, we're done here.\n          if (!mouseEvents) return touchend$;\n\n          // Otherwise we include `mouseup` events.\n          const mouseup$ = fromEvent(doc, \"mouseup\", { passive: true });\n          return merge(touchend$, mouseup$);\n        })\n      );\n    }\n\n    // #### Get \"Is sliding?\" observable\n    // An observable that emits `true` when the user is *sliding* the drawer,\n    // (i.e. moving the finger along the x-axis), or `false` when *scrolling* the page\n    // (i.e. moving the finger along the y-axis).\n    getIsSlidingObservable(move$, start$) {\n      // If the threshold options is set, we delay the decision until\n      // the finger has moved at least `threshold` pixels in either direction.\n      if (this.threshold) {\n        return move$.pipe(\n          withLatestFrom(start$),\n          skipWhile(\n            ([{ clientX, clientY }, { clientX: startX, clientY: startY }]) =>\n              abs(startY - clientY) < this.threshold && abs(startX - clientX) < this.threshold\n          ),\n          map(\n            ([{ clientX, clientY }, { clientX: startX, clientY: startY }]) =>\n              abs(startX - clientX) >= abs(startY - clientY)\n          )\n        );\n\n        // If the threshold option is set to `0` (or `false`) we make a decision immediately.\n        // This is intended for Safari and possibly other browsers that have a built-in threshold.\n        // Additionally, Safari ignores all calls to `preventDefault`, except on the first move event\n        // after a start event, so that we *have to* make a decision immediately.\n      } else {\n        return move$.pipe(\n          withLatestFrom(start$),\n          map(([{ clientX, clientY, event }, { clientX: startX, clientY: startY }]) => {\n            const isSliding = abs(startX - clientX) >= abs(startY - clientY);\n            if (this.preventDefault && isSliding) event.preventDefault();\n            return isSliding;\n          })\n        );\n      }\n    }\n  };\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixin/observables.js","// # src / mixin / setup.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// As mentioned before, we only import the RxJS function that we need.\nimport { combineLatest } from \"rxjs/_esm5/observable/combineLatest\";\nimport { defer } from \"rxjs/_esm5/observable/defer\";\nimport { fromEvent } from \"rxjs/_esm5/observable/fromEvent\";\nimport { merge } from \"rxjs/_esm5/observable/merge\";\nimport { never } from \"rxjs/_esm5/observable/never\";\n\nimport { tap } from \"rxjs/_esm5/operators/tap\";\nimport { filter } from \"rxjs/_esm5/operators/filter\";\nimport { map } from \"rxjs/_esm5/operators/map\";\nimport { pairwise } from \"rxjs/_esm5/operators/pairwise\";\nimport { repeatWhen } from \"rxjs/_esm5/operators/repeatWhen\";\nimport { sample } from \"rxjs/_esm5/operators/sample\";\nimport { share } from \"rxjs/_esm5/operators/share\";\nimport { skip } from \"rxjs/_esm5/operators/skip\";\nimport { startWith } from \"rxjs/_esm5/operators/startWith\";\nimport { switchMap } from \"rxjs/_esm5/operators/switchMap\";\nimport { take } from \"rxjs/_esm5/operators/take\";\nimport { takeUntil } from \"rxjs/_esm5/operators/takeUntil\";\nimport { timestamp } from \"rxjs/_esm5/operators/timestamp\";\nimport { withLatestFrom } from \"rxjs/_esm5/operators/withLatestFrom\";\n\nimport { createTween } from \"rxjs-create-tween\";\n\nimport { easeOutSine } from \"../common\";\n\nimport { BASE_DURATION, WIDTH_CONTRIBUTION } from \"./constants\";\n\nimport { filterWhen /* , subscribeWhen */ } from \"./operators\";\n\nimport { calcMixin } from \"./calc\";\nimport { updateMixin } from \"./update\";\nimport { baseObservablesMixin } from \"./observables\";\n\n// ### Setup observables\n// This function sets up the observable \"pipeline\".\nexport const setupObservablesMixin = C =>\n  class extends baseObservablesMixin(updateMixin(calcMixin(C))) {\n    setupObservables() {\n      // An observable of resize events.\n      const resize$ = fromEvent(window, \"resize\", { passive: true }).pipe(\n        takeUntil(this.subjects.disconnect),\n        /* debounceTime(100), */\n        share(),\n        startWith({})\n      );\n\n      // Keep measurements up-to-date.\n      // Note that we need to temporarily remove the opened class to get the correct measures.\n      resize$.pipe(takeUntil(this.subjects.disconnect)).subscribe(() => {\n        if (this.opened) this.contentEl.classList.remove(\"hy-drawer-opened\");\n        this.drawerWidth = this.calcMovableDrawerWidth();\n        if (this.opened) this.contentEl.classList.add(\"hy-drawer-opened\");\n      });\n\n      // Emitts a value every time you change the `persistent` property of the drawer.\n      // Interally, we invert it and call it `active`.\n      const active$ = this.subjects.persistent.pipe(map(x => !x));\n\n      // #### Start observable\n      // Emits a value every time a start event *could* intiate an interaction.\n      // Each emitted value is a hash containing a `clientX` and `clientY` key.\n      const start$ = this.getStartObservable().pipe(\n        takeUntil(this.subjects.disconnect),\n        filterWhen(active$),\n        share()\n      );\n\n      // An observable that emits `true`, as long as the drawer isn't fully closed\n      // (as long as the scrim is visible the user can still \"catch\" the drawer).\n      // It references the yet-to-be-defined `translateX` obsevable, so we wrap it inside a `defer`.\n      const isScrimVisible$ = defer(() =>\n        this.translateX$.pipe(\n          map(\n            translateX => (this.align === \"left\" ? translateX > 0 : translateX < this.drawerWidth)\n          )\n        )\n      );\n\n      // TODO: ...\n      const isInRange$ = start$.pipe(\n        withLatestFrom(isScrimVisible$),\n        map(([{ clientX }, isScrimVisible]) => this.calcIsInRange(clientX, isScrimVisible)),\n        tap(inRange => {\n          if (inRange) {\n            if (this.mouseEvents) this.contentEl.classList.add(\"hy-drawer-grabbing\");\n            this.prepareInteraction();\n          }\n        }),\n        share()\n      );\n\n      // #### End observable\n      // The observable of all relevant \"end\" events, i.e. the last `touchend` (or `mouseup`),\n      const end$ = this.getEndObservable().pipe(\n        takeUntil(this.subjects.disconnect),\n        filterWhen(active$, isInRange$),\n        share()\n      );\n\n      // #### Move observable\n      // The observable of all relevant \"move\" events.\n      const move$ = this.getMoveObservable(start$, end$).pipe(\n        takeUntil(this.subjects.disconnect),\n        filterWhen(active$, isInRange$),\n        share()\n      );\n\n      // #### 'Is sliding?' observable\n      // An observable that emits `true` when the user is *sliding* the drawer,\n      // (i.e. moving the finger along the x-axis), or `false` when *scrolling* the page\n      // (i.e. moving the finger along the y-axis), and `undefined` while we aren't sure yet.\n      //\n      // See [`getIsSlidingObservable`](./observables.md#get-is-sliding-observable).\n      const isSliding$ = this.getIsSlidingObservable(move$, start$).pipe(\n        take(1),\n        startWith(undefined),\n        repeatWhen(() => end$),\n\n        // When the user is sliding, fire the `slidestart` event.\n        tap(isSliding => {\n          if (isSliding) this.fireEvent(\"slidestart\", { detail: this.opened });\n        })\n      );\n\n      // #### Translate X observable\n      // The `translateX` observable is the central observable of this component.\n      // It emits the current x-coordinate of the drawer, which\n      // can be modified by either of 3 incoming observables:\n      //\n      // 1. the animation/tween observable, and\n      // 2. The move observable (the user's finger/mouse moving across the screen),\n      // 3. direct modifications of the `opened` state.\n      //\n      // It is wrapped in a `defer` because it depends on previous values of itself.\n      this.translateX$ = defer(() =>\n        merge(\n          // 1)\n          // The tween observable can be used unmodified (see below),\n          // but isn't defined yet, because it depends on previous values of `translateX$`.\n          this.tween$,\n\n          // 2)\n          // We only let move events modify the drawer's position when we are sure\n          // that the user is sliding. In case the `preventDefault` option is enabled,\n          // this is also when we're sure to call `preventDefault`.\n          move$.pipe(\n            filterWhen(isSliding$),\n            tap(({ event }) => {\n              if (this.preventDefault) event.preventDefault();\n            }),\n\n            // Finally, we take the start position of the finger, the start position of the drawer,\n            // and the current position of the finger to calculate the next `translateX` value.\n            withLatestFrom(start$, this.startTranslateX$),\n            map(([{ clientX }, { clientX: startX }, startTranslateX]) =>\n              this.calcTranslateX(clientX, startX, startTranslateX)\n            )\n          ),\n\n          // 3)\n          // When the `opened` state changes, we \"jump\" to the new position,\n          // which is either 0 (when closed) or the width of the drawer (when open).\n          combineLatest(this.subjects.opened, this.subjects.align).pipe(\n            // Usually the cleanup code would run at the end of the fling animation,\n            // but since there is no animation in this case, we call it directly.\n            tap(([opened]) => this.cleanupInteraction(opened)),\n            map(([opened, align]) => (!opened ? 0 : this.drawerWidth * (align === \"left\" ? 1 : -1)))\n          )\n        )\n      )\n        // `share`ing the observable between many subscribers:\n        .pipe(takeUntil(this.subjects.disconnect), share());\n\n      // The `translateX` value at the start of an interaction.\n      // Typically this would be either 0 or `drawerWidth`, but since the user can initiate\n      // an interaction *during the animation*, it could also be any value inbetween.\n      // We obtain it by sampling the translate-x observable at the beginning of each interaction.\n      this.startTranslateX$ = this.translateX$.pipe(sample(start$));\n\n      // #### Tween observable\n      // For the tween animations we first need an observable that tracks\n      // the current velocity of the drawer,\n      // which we will use to determine whether the drawer should flinging in its direction,\n      // or snap back into place.\n      const velocity$ = this.translateX$.pipe(\n        timestamp(),\n        pairwise(),\n        // Since we are at the mercy of the browser firing move events,\n        // we make sure that some time has passed since the last move event.\n        filter(([{ timestamp: prevTime }, { timestamp: time }]) => time - prevTime > 0),\n        // Now we are save to calculate the current velocity without divide by zero errors.\n        map(\n          ([{ value: prevX, timestamp: prevTime }, { value: x, timestamp: time }]) =>\n            (x - prevX) / (time - prevTime)\n        ),\n        // The initial velocity is zero.\n        startWith(0)\n      );\n\n      // TODO\n      const willOpen$ = end$.pipe(\n        tap(() => {\n          this.contentEl.classList.remove(\"hy-drawer-grabbing\");\n        }),\n        withLatestFrom(start$, this.translateX$, velocity$),\n        filter(this.calcIsSwipe.bind(this)),\n        map(this.calcWillOpen.bind(this)),\n        // TODO: only fire `slideend` event when slidestart fired as well?\n        tap(willOpen => this.fireEvent(\"slideend\", { detail: willOpen }))\n      );\n\n      // There are 2 things that can trigger an animation:\n      // 1. The end of an interaction, i.e. the user releases the finger/mouse while moving the slider.\n      // 2. A call to a method like `open` or `close` (represented by a value on the animate observable)\n      //    Note that we call `prepareInteraction` manually here, because it wasn't triggered by a\n      //    prior `touchdown`/`mousedown` event in this case.\n      const tweenTrigger$ = merge(\n        willOpen$,\n        this.animateTo$.pipe(tap(this.prepareInteraction.bind(this)))\n      );\n\n      // We silently set the new `opened` state here,\n      // so that the next interaction will do the right thing even while the animation is\n      // still playing, e.g. a call to `toggle` will cancel the current animation\n      // and initiate an animation to the opposite state.\n      this.tween$ = tweenTrigger$.pipe(\n        tap(willOpen => this.setInternalState(\"opened\", willOpen)),\n        // By using `switchMap` we ensure that subsequent events that trigger an animation\n        // don't cause more than one animation to be played at a time.\n        withLatestFrom(this.translateX$),\n        switchMap(([opened, translateX]) => {\n          // We return a tween observable that runs cleanup code when it completes\n          // --- unless a new interaction is initiated, in which case it is canceled.\n          const inv = this.align === \"left\" ? 1 : -1;\n          const endTranslateX = opened ? this.drawerWidth * inv : 0;\n          const diffTranslateX = endTranslateX - translateX;\n          const duration = BASE_DURATION + this.drawerWidth * WIDTH_CONTRIBUTION;\n\n          return createTween(easeOutSine, translateX, diffTranslateX, duration).pipe(\n            tap({ complete: () => this.subjects.opened.next(opened) }),\n            takeUntil(start$),\n            takeUntil(this.subjects.align.pipe(skip(1))),\n            share()\n          );\n        })\n      );\n\n      // #### Subscriptions\n      // Now we are ready to cause some side effects.\n      //\n      // The end result is always to update the (shadow) DOM, which happens here.\n      // Note that the call to subscribe sets the whole process in motion,\n      // and causes the code inside the above `defer` observables to run.\n      requestIdleCallback(() => {\n        this.translateX$.subscribe(this.updateDOM.bind(this));\n\n        // A click on the scrim should close the drawer.\n        fromEvent(this.scrimEl, \"click\")\n          .pipe(takeUntil(this.subjects.disconnect))\n          .subscribe(() => this.close());\n\n        // Other than preventing sliding, setting `persistent` will also hide the scrim.\n        active$.pipe(takeUntil(this.subjects.disconnect)).subscribe(active => {\n          this.scrimEl.style.display = active ? \"block\" : \"none\";\n        });\n\n        // Whenever the alignment of the drawer changes, update the CSS classes.\n        this.subjects.align.pipe(takeUntil(this.subjects.disconnect)).subscribe(align => {\n          this.contentEl.classList.remove(`hy-drawer-left`);\n          this.contentEl.classList.remove(`hy-drawer-right`);\n          this.contentEl.classList.add(`hy-drawer-${align}`);\n        });\n\n        // If the experimental back button feature is enabled, handle popstate events...\n        /*\n        fromEvent(window, 'popstate')\n          .pipe(\n            takeUntil(this.subjects.disconnect),\n            subscribeWhen(this.backButton$),\n          )\n          .subscribe(() => {\n            const hash = `#${histId.call(this)}--opened`;\n            const willOpen = window.location.hash === hash;\n            if (willOpen !== this.opened) this.animateTo$.next(willOpen);\n          });\n        */\n\n        // When drawing with mouse is enabled, we add the grab cursor to the drawer.\n        // We also want to call `preventDefault` when `mousedown` is within the drawer range\n        // to prevent text selection while sliding.\n        this.subjects.mouseEvents\n          .pipe(\n            takeUntil(this.subjects.disconnect),\n            switchMap(mouseEvents => {\n              if (mouseEvents) this.contentEl.classList.add(\"hy-drawer-grab\");\n              else this.contentEl.classList.remove(\"hy-drawer-grab\");\n\n              return mouseEvents ? start$.pipe(withLatestFrom(isInRange$)) : never();\n            })\n          )\n          .subscribe(([{ event }, isInRange]) => {\n            if (isInRange && event) event.preventDefault();\n          });\n\n        // Now we set the initial opend state.\n        // If the experimental back button feature is enabled, we check the location hash...\n        /*\n        if (this._backButton) {\n          const hash = `#${histId.call(this)}--opened`;\n          if (window.location.hash === hash) this.setInternalState('opened', true);\n        }\n      */\n      });\n    }\n  };\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixin/setup.js","// # src / mixin / index.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// ## Overview\n// This component is written in [RxJS] and reading its code requires some basic understanding\n// of how RxJS works. It may also serve as an example of how to use RxJS.\n//\n// Other than RxJS, you should be familiar with [ES6 Mixin][esmixins],\n// which is a clever way of using the ES6 class syntax to achieve inheritance-based mixins.\n// The mixin in the main export of this file.\n\n// ## Imports\n// ES6+ functions that we use.\n// import 'core-js/fn/array/from';\n// import 'core-js/fn/function/bind';\n// import 'core-js/fn/object/assign';\n\n// Importing the hy-compontent base libary,\n// which helps with making multiple versions of the component (Vanilla JS, WebComponent, etc...).\nimport { componentMixin, COMPONENT_FEATURE_TESTS, Set } from \"hy-component/src/component\";\nimport { rxjsMixin } from \"hy-component/src/rxjs\";\nimport { arrayOf, bool, number, oneOf } from \"hy-component/src/types\";\n\nimport { Subject } from \"rxjs/_esm5/Subject\";\n\n// TODO\nimport { setupObservablesMixin } from \"./setup\";\n\n// A set of [Modernizr] tests that are required for this component to work.\nexport const MIXIN_FEATURE_TESTS = new Set([\n  ...COMPONENT_FEATURE_TESTS,\n  \"eventlistener\",\n  \"queryselector\",\n  \"requestanimationframe\",\n  \"classlist\",\n  \"opacity\",\n  \"csstransforms\",\n  \"csspointerevents\",\n]);\n\nexport { Set };\n\n// ## Drawer Mixin\nexport const drawerMixin = C =>\n  class extends setupObservablesMixin(rxjsMixin(componentMixin(C))) {\n    // The name of the component (required by hy-component)\n    static get componentName() {\n      return \"hy-drawer\";\n    }\n\n    // ### Options\n    // The default values (and types) of the configuration options (required by hy-component)\n    // See [Options](../../options.md) for usage information.\n    static get types() {\n      return {\n        opened: bool,\n        align: oneOf([\"left\", \"right\"]),\n        persistent: bool,\n        range: arrayOf(number),\n        threshold: number,\n        preventDefault: bool,\n        mouseEvents: bool,\n      };\n    }\n\n    static get defaults() {\n      return {\n        opened: false,\n        align: \"left\",\n        persistent: false,\n        range: [0, 100],\n        threshold: 10,\n        preventDefault: false,\n        mouseEvents: false,\n      };\n    }\n\n    // ### Setup\n    // Overriding the setup function.\n    setupComponent(el, props) {\n      super.setupComponent(el, props);\n\n      this.animateTo$ = new Subject();\n\n      // Cache DOM elements.\n      this.scrimEl = this.sroot.querySelector(\".hy-drawer-scrim\");\n      this.contentEl = this.sroot.querySelector(\".hy-drawer-content\");\n\n      // Set the initial alignment class.\n      this.contentEl.classList.add(`hy-drawer-${this.align}`);\n    }\n\n    // Calling the [setup observables function](./setup.md) function.\n    connectComponent() {\n      requestIdleCallback(() => {\n        this.setupObservables();\n\n        // TODO: meh..\n        super.connectComponent();\n\n        // Firing an event to let the outside world know the drawer is ready.\n        this.fireEvent(\"init\", { detail: this.opened });\n      });\n    }\n\n    // ### Methods\n    // Public methods of this component. See [Methods](../../methods.md) for more.\n    open(animated = true) {\n      if (animated) this.animateTo$.next(true);\n      else this.opened = true;\n    }\n\n    close(animated = true) {\n      if (animated) this.animateTo$.next(false);\n      else this.opened = false;\n    }\n\n    toggle(animated = true) {\n      if (animated) this.animateTo$.next(!this.opened);\n      else this.opened = !this.opened;\n    }\n  };\n\n// [rxjs]: https://github.com/ReactiveX/rxjs\n// [esmixins]: http://justinfagnani.com/2015/12/21/real-mixins-with-javascript-classes/\n// [modernizr]: https://modernizr.com/\n\n\n\n// WEBPACK FOOTER //\n// ./src/mixin/index.js","// # src / webcomponent / index.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// import 'core-js/fn/array/from';\n\n// We start by importing form the hy-component library...\nimport {\n  customElementMixin,\n  CustomElement,\n  fragmentFromString,\n  CUSTOM_ELEMENT_FEATURE_TESTS,\n  Set,\n} from \"hy-component/src/custom-element\";\n\n// ...and our own component.\nimport { drawerMixin, MIXIN_FEATURE_TESTS } from \"../mixin\";\n\n// Unlike the [HTML Import version](./html-import.md), this version bundles the template\n// as a string.\nimport { template } from \"./template\";\n\n// The set of Modernizr feature tests required for *this* version of the component.\nexport const WEBCOMPONENT_FEATURE_TESTS = new Set([\n  ...CUSTOM_ELEMENT_FEATURE_TESTS,\n  ...MIXIN_FEATURE_TESTS,\n]);\n\nexport { Set };\n\n// The exported class follows the HTML naming convetion.\n// It is a combination of the `CustomElement` class (a wrapper around `HTMLElement` that\n// doesn't break when piped through the babel transformer),\n// our [`drawerMixin`](../mixin/index.md),\n// and the `customElementMixin`, which is part of hy-component and handles things like\n// reflecting options as HTML attributes, etc...\nexport class HyDrawerElement extends customElementMixin(drawerMixin(CustomElement)) {\n  // The CustomElements spec demands that we provide a list of attributes (i.e. our options).\n  static get observedAttributes() {\n    return this.getObservedAttributes();\n  }\n\n  // We override the `getTemplate` method and return a document fragment\n  // obtained from parsing the template string.\n  getTemplate() {\n    return fragmentFromString(template);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/webcomponent/index.js","export const template = `<div class=\"hy-drawer-scrim\"></div> <div class=\"hy-drawer-content\"> <slot></slot> </div> <style> @media screen { .hy-drawer-scrim { position: fixed; top: 0; left: 0; height: 100vh; width: 100vw; z-index: 20; opacity: 0; pointer-events: none; background: rgba(0, 0, 0, 0.5); transform: translateX(0); -webkit-tap-highlight-color: transparent; } .hy-drawer-content { position: fixed; top: 0; height: 100vh; z-index: 30; overflow-x: hidden; overflow-y: auto; transform: translateX(0); width: 300px; background: #e8e8e8; box-shadow: 0 0 15px rgba(0, 0, 0, 0.25); contain: strict; -webkit-overflow-scrolling: touch; } .hy-drawer-content.hy-drawer-left { left: -300px; } .hy-drawer-content.hy-drawer-right { right: -300px; } .hy-drawer-content.hy-drawer-left.hy-drawer-opened { left: 0 !important; transform: translateX(0) !important; } .hy-drawer-content.hy-drawer-right.hy-drawer-opened { right: 0 !important; transform: translateX(0) !important; } .hy-drawer-grab { cursor: move; cursor: -webkit-grab; cursor: -moz-grab; cursor: grab; } .hy-drawer-grabbing { cursor: -webkit-grabbing; cursor: -moz-grabbing; cursor: grabbing; } } @media print { .hy-drawer-scrim { display: none !important; } .hy-drawer-content { transform: none !important; } } @media screen { .hy-drawer-content { @apply --hy-drawer-content-container; width: var(--hy-drawer-width, 300px); background: var(--hy-drawer-background, #e8e8e8); box-shadow: var(--hy-drawer-box-shadow, 0 0 15px rgba(0, 0, 0, 0.25)); z-index: var(--hy-drawer-z-index, 30); } .hy-drawer-content.hy-drawer-left { left: calc( -1 * var(--hy-drawer-slide-width, var(--hy-drawer-width, 300px)) ); } .hy-drawer-content.hy-drawer-right { right: calc( -1 * var(--hy-drawer-slide-width, var(--hy-drawer-width, 300px)) ); } .hy-drawer-scrim { @apply --hy-drawer-scrim-container; background: var(--hy-drawer-scrim-background, rgba(0, 0, 0, 0.5)); z-index: var(--hy-drawer-scrim-z-index, 20); } } </style>`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/webcomponent/template.js","// # src / webcomponent / module.js\n// Copyright (c) 2018 Florian Klampfer <https://qwtel.com/>\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n// ## Overview\n// TODO\n\nimport { HyDrawerElement } from \"./index\";\n\nconst define = () => {\n  window.customElements.define(\"hy-drawer\", HyDrawerElement);\n};\n\n// Make sure the polyfills are ready (if they are being used).\nif (\n  (\"customElements\" in window && \"attachShadow\" in Element.prototype) ||\n  (window.WebComponents && window.WebComponents.ready)\n) {\n  define();\n} else if (window.WebComponents) {\n  window.addEventListener(\"WebComponentsReady\", define);\n} else if (process.env.DEBUG) {\n  console.warn(\"Couldn't register component. Did you forget to include a WebComponents polyfill?\");\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/webcomponent/module.js","var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function(\"return this\")() || (1,eval)(\"this\");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === \"object\")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it's\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n\n\n\n// WEBPACK FOOTER //\n// (webpack)/buildin/global.js"],"sourceRoot":""}